<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source" xml:lang="en-US">
<title>TMXAbstractScoringAccumulable.cc</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/src/scoring/TMXAbstractScoringAccumulable.cc</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00001"/>00001 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00002"/>00002 <emphasis role="comment">//&#32;\brief&#32;Implementation&#32;of&#32;the&#32;scoring&#32;of&#32;any&#32;scalar</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00003"/>00003 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00004"/>00004 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00006"/>00006 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00007"/>00007 <emphasis role="comment">//&#32;TMXAbstractScoringAccumulable</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00008"/>00008 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00009"/>00009 <emphasis role="comment">//&#32;Thomas&#32;Guilbaud,&#32;Transmutex,&#32;21/09/2021</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00010"/>00010 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00012"/>00012 <emphasis role="comment"></emphasis><emphasis role="comment">//&#32;Scoring&#32;Accumulable</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00014"/>00014 <emphasis role="comment"></emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00015"/>00015 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00016"/>00016 <emphasis role="comment">//&#32;TMX&#32;Class</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&quot;TMXAbstractScoringAccumulable.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00018"/>00018 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00019"/>00019 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00020"/>00020 TMXAbstractScoringAccumulable::TMXAbstractScoringAccumulable(<link linkend="_class_t_m_x_input_parameters">TMXInputParameters</link>*&#32;parameter,&#32;std::string&#32;name)
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00021"/>00021 :&#32;&#32;&#32;<link linkend="_class_t_m_x_abstract_scoring">TMXAbstractScoring</link>(parameter,&#32;name),
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00022"/>00022 &#32;&#32;&#32;&#32;m_accCounter(0.),
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00023"/>00023 &#32;&#32;&#32;&#32;m_accValue(0.),
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00024"/>00024 &#32;&#32;&#32;&#32;m_accValueSquared(0.)
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00025"/>00025 {}
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00026"/>00026 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00027"/>00027 TMXAbstractScoringAccumulable::~TMXAbstractScoringAccumulable()
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00028"/>00028 {}
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00029"/>00029 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00030"/>00030 <emphasis role="comment">//------------------------------------------------------------------------------*</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00031"/>00031 <emphasis role="comment">//&#32;Register</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00032"/>00032 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00033"/>00033 <emphasis role="keywordtype">void</emphasis>&#32;TMXAbstractScoringAccumulable::RegisterAccumulable(G4AccumulableManager*&#32;accumulableManager)&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00034"/>00034 &#32;&#32;&#32;&#32;accumulableManager-&gt;RegisterAccumulable(m_accCounter);
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00035"/>00035 &#32;&#32;&#32;&#32;accumulableManager-&gt;RegisterAccumulable(m_accValue);
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00036"/>00036 &#32;&#32;&#32;&#32;accumulableManager-&gt;RegisterAccumulable(m_accValueSquared);
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00037"/>00037 }
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00038"/>00038 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00039"/>00039 <emphasis role="comment">//------------------------------------------------------------------------------*</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00040"/>00040 <emphasis role="comment">//&#32;Getter</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00041"/>00041 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00042"/>00042 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;TMXAbstractScoringAccumulable::GetNCount()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(m_accCounter.GetValue());
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00044"/>00044 }
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00045"/>00045 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00046"/>00046 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXAbstractScoringAccumulable::GetAccValue()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(m_accValue.GetValue());&#32;<emphasis role="comment">//&#32;Energy&#32;Deposited&#32;per&#32;primary</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00048"/>00048 }
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00049"/>00049 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00050"/>00050 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXAbstractScoringAccumulable::GetAccValueSquared()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="comment">//&#32;RMS&#32;squared</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(m_accValueSquared.GetValue());
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00052"/>00052 }
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00053"/>00053 
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00054"/>00054 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXAbstractScoringAccumulable::GetAccValueError()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="comment">//&#32;Verified,&#32;error&#32;decrease&#32;with&#32;a&#32;1/sqrt(N)&#32;law</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;eDepMoy&#32;=&#32;GetAccValue();
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;rms&#32;=&#32;GetAccValueSquared()&#32;-&#32;eDepMoy*eDepMoy/((double)GetNCount());
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(rms&#32;&gt;&#32;0.&#32;?&#32;std::sqrt(rms)&#32;:&#32;0.);
<anchor xml:id="__t_m_x_abstract_scoring_accumulable_8cc_source_1l00058"/>00058 }
</programlisting></section>
