<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__t_m_x_neutronic_param_8cc_source" xml:lang="en-US">
<title>TMXNeutronicParam.cc</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/src/TMXNeutronicParam.cc</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00001"/>00001 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00002"/>00002 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00003"/>00003 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00005"/>00005 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00006"/>00006 <emphasis role="comment">//&#32;TMXNeutronicParam</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00007"/>00007 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00008"/>00008 <emphasis role="comment">//&#32;Donovan&#32;Maire,&#32;Transmutex,&#32;01/09/2020</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00009"/>00009 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00011"/>00011 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00012"/>00012 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00013"/>00013 <emphasis role="preprocessor">#include&#32;&quot;TMXNeutronicParam.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00014"/>00014 <emphasis role="preprocessor">#include&#32;&quot;TMXOption.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00015"/>00015 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00016"/>00016 <emphasis role="preprocessor">#include&#32;&lt;chrono&gt;</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00018"/>00018 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00019"/><link linkend="_class_t_m_x_neutronic_param_1a837f7bf4b87e49723b855ae9e7e50794">00019</link> <link linkend="_class_t_m_x_neutronic_param_1a837f7bf4b87e49723b855ae9e7e50794">TMXNeutronicParam::TMXNeutronicParam</link>(<emphasis role="keywordtype">int</emphasis>&#32;RunNumber,&#32;<link linkend="_class_t_m_x_merge_threads_results">TMXMergeThreadsResults</link>&amp;&#32;mergedOutput,&#32;<link linkend="_class_t_m_x_input_parameters">TMXInputParameters</link>*&#32;parameter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;threadID)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00020"/>00020 &#32;&#32;&#32;&#32;Initialize(RunNumber,&#32;mergedOutput,&#32;parameter,&#32;threadID);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00021"/>00021 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00022"/>00022 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00023"/>00023 TMXNeutronicParam::~TMXNeutronicParam()&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00024"/>00024 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00025"/>00025 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00026"/>00026 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::Initialize(<emphasis role="keywordtype">int</emphasis>&#32;RunNumber,&#32;<link linkend="_class_t_m_x_merge_threads_results">TMXMergeThreadsResults</link>&amp;&#32;mergedOutput,&#32;<link linkend="_class_t_m_x_input_parameters">TMXInputParameters</link>*&#32;parameter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;threadID)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00027"/>00027 <emphasis role="comment">//&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;TMXNeutronicParam&#32;Initialization&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00028"/>00028 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00029"/>00029 &#32;&#32;fInputParam&#32;=&#32;parameter;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00030"/>00030 &#32;&#32;fnEvt&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00031"/>00031 &#32;&#32;fthreadID&#32;=&#32;threadID;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00032"/>00032 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00033"/>00033 &#32;&#32;fTotNbNeutrons&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00034"/>00034 &#32;&#32;fNbNperGeneration.clear();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00035"/>00035 &#32;&#32;fErrorCap_abs.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00036"/>00036 &#32;&#32;fErrorEta.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00037"/>00037 &#32;&#32;fErrorFissionByN0.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00038"/>00038 &#32;&#32;fErrorN_AbsU5.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00039"/>00039 &#32;&#32;fErrorN_CapU8.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00040"/>00040 &#32;&#32;fErrorEperFission_withEdepMinusEbeam.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00041"/>00041 &#32;&#32;fErrorEperFission.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00042"/>00042 &#32;&#32;fErrorEdep.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00043"/>00043 &#32;&#32;fErrorKeff_collision.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00044"/>00044 &#32;&#32;fErrorKeff_analogAbs.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00045"/>00045 &#32;&#32;fErrorKeff_implicitAbs.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00046"/>00046 &#32;&#32;fErrorKeff_trackLength.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00047"/>00047 &#32;&#32;fRunNumber&#32;=&#32;RunNumber;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00048"/>00048 &#32;&#32;&#32;&#32;fkeff&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00049"/>00049 &#32;&#32;&#32;&#32;fsigma_mean_keff&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00050"/>00050 &#32;&#32;&#32;&#32;ferror_mean_keff&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00051"/>00051 &#32;&#32;&#32;&#32;fEtot_deposit&#32;=&#32;0.;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00052"/>00052 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00053"/>00053 <emphasis role="comment">//&#32;&#32;&#32;//&#32;Define&#32;the&#32;name&#32;of&#32;the&#32;file&#32;to&#32;record&#32;physical&#32;parameters&#32;of&#32;this&#32;thread</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00054"/>00054 <emphasis role="comment">//&#32;&#32;&#32;if(fInputParam-&gt;str_ROOTFileName&#32;!=&#32;&quot;&quot;)&#32;{</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00055"/>00055 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;std::size_t&#32;pos&#32;=&#32;fInputParam-&gt;str_ROOTFileName.find(&quot;.root&quot;);</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00056"/>00056 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;if&#32;(pos&#32;!=&#32;std::string::npos)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00057"/>00057 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fLogFile&#32;=&#32;fInputParam-&gt;str_ROOTFileName.substr(0,pos)&#32;+&#32;&quot;_log&quot;;</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00058"/>00058 <emphasis role="comment">//&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00059"/>00059 <emphasis role="comment">//&#32;</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00060"/>00060 <emphasis role="comment">//&#32;&#32;&#32;//&#32;Log&#32;file&#32;is&#32;used&#32;to&#32;record&#32;each&#32;following&#32;parameters&#32;every&#32;fInputParam-&gt;PrintModulo&#32;events</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00061"/>00061 <emphasis role="comment">//&#32;&#32;&#32;std::ofstream&#32;LogFile;</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00062"/>00062 <emphasis role="comment">//&#32;&#32;&#32;LogFile.open((fLogFile&#32;+&#32;std::to_string(fthreadID)&#32;+&#32;&quot;_&quot;&#32;+&#32;std::to_string(fRunNumber)&#32;+&#32;(std::string)&quot;.txt&quot;).c_str(),std::ios::out);</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00063"/>00063 <emphasis role="comment">//&#32;&#32;&#32;if(!TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00064"/>00064 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;&quot;Events\tN0\tNtot\tFissionByN0\terrFissionByN0\tNeutronFromFission\tnbNeutronFromInelastic\tAbsorptionInU235\terr_AbsorptionInU235\tCaptureInU238\terr_CaptureInU238\tk_src\terrk_src\tk_eff\terrk_eff\tnu\teta\terr_eta\tepsilon\terr_epsilon\tcap(U-238)/abs(U-235)\terr_cap(U-238)/abs(U-235)\tEtot-Ebeam_perFission\terr_Etot-Ebeam_perFission\tEdep_perFission\terr_Edep_perFission\tG0\terr_G0\tG_G0k\terr_G_G0k\tG_Pth\terr_G_Pth\n&quot;;</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00065"/>00065 <emphasis role="comment">//&#32;&#32;&#32;else</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00066"/>00066 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;&quot;Chi2\terr_Chi2\tEvents\tN0\tNtot\tFissionByN0\terrFissionByN0\tNeutronFromFission\tnbNeutronFromInelastic\tAbsorptionInU235\terr_AbsorptionInU235\tCaptureInU238\terr_CaptureInU238\tk_eff\terrk_eff\tk_eff_direct\terrk_eff_direct\tnu\teta\terr_eta\tcap(U-238)/abs(U-235)\terr_cap(U-238)/abs(U-235)\tEtot-Ebeam_perFission\terr_Etot-Ebeam_perFission\tEdep_perFission\terr_Edep_perFission\n&quot;;</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00067"/>00067 <emphasis role="comment">//&#32;&#32;&#32;LogFile.close();</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00068"/>00068 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00069"/>00069 &#32;&#32;<emphasis role="comment">//&#32;Random&#32;sampling&#32;of&#32;source&#32;neutron&#32;position&#32;for&#32;keff&#32;Calculation&#32;(fint_Option&#32;=&#32;4)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00070"/>00070 &#32;&#32;fmergedOutput&#32;=&#32;&amp;mergedOutput;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00071"/>00071 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00072"/>00072 &#32;&#32;fPrevious_weights.clear();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00073"/>00073 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00074"/>00074 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00075"/>00075 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::UpdateValues(<emphasis role="keywordtype">int</emphasis>&#32;nEvt,&#32;std::vector&lt;long&#32;int&gt;&amp;&#32;NbNperGeneration,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;TotNbNeutrons)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00076"/>00076 &#32;&#32;&#32;&#32;fnEvt&#32;=&#32;nEvt;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00077"/>00077 &#32;&#32;&#32;&#32;fNbNperGeneration&#32;=&#32;NbNperGeneration;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00078"/>00078 &#32;&#32;&#32;&#32;fTotNbNeutrons&#32;=&#32;TotNbNeutrons;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00079"/>00079 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00080"/>00080 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00081"/>00081 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::DoCalculationAndPrintValues(<emphasis role="keywordtype">int</emphasis>&#32;N0abs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;NeutronFromFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;NeutronFromInelastic,&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;N_AbsU5,&#32;<emphasis role="keywordtype">double</emphasis>&#32;RelativeAbundanceU235,&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;N_CapU8,&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;N_absTot,&#32;<emphasis role="keywordtype">double</emphasis>&#32;RelativeAbundanceU238,&#32;<emphasis role="keywordtype">double</emphasis>&#32;Edep,&#32;<emphasis role="keywordtype">double</emphasis>&#32;Ebeam,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;NbFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;EperFission,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Nb_EperFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;nu,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;FissionByN0,&#32;<link linkend="_class_t_m_x_random_distribution3_d">TMXRandomDistribution3D</link>&amp;&#32;RadiusAnglesHeight,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nEvt,&#32;std::vector&lt;long&#32;int&gt;&amp;&#32;NbNperGeneration,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;TotNbNeutrons)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00082"/>00082 &#32;&#32;&#32;&#32;UpdateValues(nEvt,&#32;NbNperGeneration,&#32;TotNbNeutrons);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00083"/>00083 &#32;&#32;&#32;&#32;DoCalculationAndPrintValues(N0abs,&#32;NeutronFromFission,&#32;NeutronFromInelastic,&#32;N_AbsU5,&#32;RelativeAbundanceU235,&#32;N_CapU8,&#32;N_absTot,&#32;RelativeAbundanceU238,&#32;Edep,&#32;Ebeam,&#32;NbFission,&#32;EperFission,&#32;Nb_EperFission,&#32;nu,&#32;FissionByN0,&#32;RadiusAnglesHeight);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00084"/>00084 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00085"/>00085 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00086"/>00086 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::DoCalculationAndPrintValues(<emphasis role="keywordtype">int</emphasis>&#32;N0abs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;NeutronFromFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;NeutronFromInelastic,&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;N_AbsU5,&#32;<emphasis role="keywordtype">double</emphasis>&#32;RelativeAbundanceU235,&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;N_CapU8,&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;<emphasis role="comment">/*N_absTot*/</emphasis>,&#32;<emphasis role="keywordtype">double</emphasis>&#32;RelativeAbundanceU238,&#32;<emphasis role="keywordtype">double</emphasis>&#32;Edep,&#32;<emphasis role="keywordtype">double</emphasis>&#32;Ebeam,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;NbFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;EperFission,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Nb_EperFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;nu,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;FissionByN0,&#32;<link linkend="_class_t_m_x_random_distribution3_d">TMXRandomDistribution3D</link>&amp;&#32;RadiusAnglesHeight)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00087"/>00087 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00088"/>00088 &#32;&#32;&#32;&#32;fEtot_deposit&#32;+=&#32;Edep;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00089"/>00089 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00090"/>00090 &#32;&#32;<emphasis role="comment">//&#32;Accumulate&#32;data&#32;of&#32;E_per_fission&#32;for&#32;every&#32;events</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00091"/>00091 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(NbFission&#32;!=&#32;0)&#32;{&#32;fErrorEperFission_withEdepMinusEbeam.StatErrorCalc((Edep-Ebeam)/(<emphasis role="keywordtype">double</emphasis>)NbFission);}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00092"/>00092 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(Nb_EperFission&#32;!=&#32;0)&#32;{&#32;fErrorEperFission.StatErrorCalc(EperFission/(<emphasis role="keywordtype">double</emphasis>)Nb_EperFission);&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00093"/>00093 &#32;&#32;fErrorEdep.StatErrorCalc(&#32;Edep&#32;);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00094"/>00094 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00095"/>00095 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00096"/>00096 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;fTotNbNeutrons&#32;!=&#32;0&#32;)&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;some&#32;neutrons&#32;are&#32;produced</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;(fnEvt%fInputParam-&gt;PrintModulo&#32;==&#32;0&#32;||&#32;0.8*fInputParam-&gt;Nparticles/fInputParam-&gt;nThreads&#32;&lt;&#32;fnEvt)&#32;&amp;&amp;&#32;fInputParam-&gt;int_Option&#32;!=&#32;20)&#32;<emphasis role="comment">//&#32;every&#32;fInputParam-&gt;PrintModulo&#32;events</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00099"/>00099 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Definition&#32;of&#32;Capture/absorption&#32;ratio&#32;to&#32;estimate&#32;the&#32;spectrum&#32;quality&#32;(fast&#32;neutrons&#32;VS&#32;thermal&#32;neutrons)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Definition&#32;of&#32;capture&#32;and&#32;absorption&#32;rates&#32;in&#32;U-238&#32;or&#32;U-235</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CapAbsRatioCalculation(N_AbsU5,&#32;RelativeAbundanceU235,&#32;N_CapU8,&#32;RelativeAbundanceU238);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00103"/>00103 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;k&#32;as&#32;a&#32;function&#32;of&#32;neutron&#32;generation&#32;and&#32;its&#32;statistical&#32;error&#32;(1&#32;sigma)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;error_k;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;double&gt;&#32;k&#32;=&#32;k_Calculation(error_k);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00107"/>00107 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;k_eff&#32;+-&#32;sigma_keff&#32;(statistical&#32;error)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keffCalculation(k);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00110"/>00110 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;k_source&#32;+-&#32;sigma_k_source&#32;(statistical&#32;error)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ksrcCalculation();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00113"/>00113 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Definition&#32;of&#32;characteristic&#32;parameters&#32;of&#32;an&#32;ADS</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00115"/>00115 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EpsilonCalculation();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Coupling&#32;constant</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EtaCalculation(NeutronFromFission,&#32;NeutronFromInelastic);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Efficiency&#32;to&#32;produce&#32;fissions</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EFissionCalculation(Edep,&#32;Ebeam,&#32;NbFission);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Average&#32;energy&#32;released&#32;per&#32;fission&#32;[MeV]&#32;-&gt;&#32;Total&#32;Energy&#32;deposited&#32;minus&#32;the&#32;beam&#32;energy&#32;divided&#32;by&#32;the&#32;number&#32;of&#32;fission&#32;=&#32;the&#32;mean&#32;energy&#32;released&#32;by&#32;each&#32;fission</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EperFissionCalculation(EperFission,&#32;Nb_EperFission);&#32;&#32;&#32;<emphasis role="comment">//&#32;Average&#32;energy&#32;released&#32;per&#32;fission&#32;[MeV]&#32;-&gt;&#32;Total&#32;Energy&#32;released&#32;by&#32;fission&#32;and&#32;secondaries&#32;due&#32;to&#32;fission&#32;=&#32;the&#32;mean&#32;energy&#32;released&#32;by&#32;each&#32;fission</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;G0calculation(nu);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Definition&#32;of&#32;the&#32;ADS&#32;gain&#32;G0&#32;=&#32;intrisic&#32;gain&#32;of&#32;the&#32;ADS</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;G_G0k_calculation();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Definition&#32;of&#32;the&#32;ADS&#32;gain&#32;G&#32;=&#32;G0&#32;*&#32;ksrc/1-ksrc</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;G_Pth_calculation();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Definition&#32;of&#32;the&#32;ADS&#32;gain&#32;G&#32;=&#32;P_tot&#32;/&#32;P_beam&#32;-1</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FissionByN0Calculation(FissionByN0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;fissions&#32;due&#32;to&#32;N0</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Chi2Calculation(RadiusAnglesHeight);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Chi&#32;square&#32;calculation&#32;of&#32;the&#32;fission&#32;spatial&#32;distribution&#32;between&#32;to&#32;step&#32;of&#32;a&#32;keff&#32;calculation</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00125"/>00125 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Gives&#32;the&#32;information&#32;to&#32;the&#32;class&#32;which&#32;merges&#32;the&#32;results&#32;of&#32;every&#32;threads</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmergedOutput-&gt;AddNewValues(fthreadID,&#32;fNbNperGeneration[0],&#32;fTotNbNeutrons,&#32;fsumFissionByN0,&#32;fsigma_FissionByN0,&#32;NeutronFromFission,&#32;NeutronFromInelastic,
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fErrorN_AbsU5.GetSum()/(<emphasis role="keywordtype">double</emphasis>)fnEvt,&#32;fsigma_N_AbsU5,&#32;fErrorN_CapU8.GetSum()/(<emphasis role="keywordtype">double</emphasis>)fnEvt,&#32;fsigma_N_CapU8,
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fksrc,&#32;fsigma_ksrc,&#32;fkeff,&#32;fsigma_mean_keff,&#32;nu,&#32;feta,&#32;fsigma_eta,&#32;fepsilon,&#32;fsigma_eps,&#32;fCap_abs,&#32;fsigma_Cap_Abs,
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fEtotEbeam_perFission,&#32;fsigma_EtotEbeam_perFission,&#32;fmeanEperFission,&#32;fsigma_EperFission,&#32;fG0,&#32;fsigma_G0,&#32;fG_G0k,&#32;fsigma_G_G0k,&#32;fG_Pth,&#32;fsigma_G_Pth,&#32;fSum2,&#32;fSum4);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00131"/>00131 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmergedOutput-&gt;AddNew_k_values(fthreadID,&#32;k,&#32;error_k);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00133"/>00133 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00134"/>00134 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00135"/>00135 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00136"/>00136 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;values&#32;in&#32;the&#32;terminal</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintValues(NeutronFromFission,&#32;NeutronFromInelastic,&#32;nu,&#32;N0abs);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00139"/>00139 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;values&#32;in&#32;a&#32;file</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00141"/>00141 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteValues(NeutronFromFission,&#32;NeutronFromInelastic,&#32;nu);</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00142"/>00142 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTimer();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00144"/>00144 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00145"/>00145 &#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00146"/>00146 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00147"/>00147 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00148"/>00148 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::PrintTimer()&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00149"/>00149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fnEvt&#32;&lt;&#32;10&#32;*&#32;fInputParam-&gt;PrintModulo&#32;&#32;&amp;&amp;&#32;fnEvt&#32;&gt;&#32;0&#32;&amp;&amp;&#32;fthreadID&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;timenow&#32;=&#32;std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;ctime(&amp;timenow)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00152"/>00152 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;it&#32;tooks&#32;&quot;&#32;&lt;&lt;&#32;difftime(time(NULL),&#32;fTimer)&#32;&lt;&lt;&#32;&quot;&#32;seconds&#32;for&#32;last&#32;&quot;&#32;&lt;&lt;&#32;fInputParam-&gt;PrintModulo&#32;&lt;&lt;&#32;&quot;&#32;events.\n&quot;&#32;&lt;&lt;&#32;G4endl;</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00153"/>00153 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00154"/>00154 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00155"/>00155 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00157"/>00157 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00158"/>00158 <emphasis role="comment">//&#32;Calculation&#32;of&#32;k&#32;and&#32;error_k&#32;for&#32;each&#32;neutron&#32;generation</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00159"/>00159 <emphasis role="comment">//&#32;k&#32;is&#32;the&#32;ratio&#32;between&#32;the&#32;number&#32;of&#32;neutrons&#32;in&#32;two&#32;consecutive&#32;generations</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00160"/>00160 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00161"/>00161 std::vector&lt;double&gt;&#32;TMXNeutronicParam::k_Calculation(std::vector&lt;double&gt;&amp;&#32;error_k)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00162"/>00162 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;k;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00163"/>00163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;fNbNperGeneration.size()-1;&#32;++i)&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;k&#32;for&#32;each&#32;neutron&#32;generation</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fNbNperGeneration[i]&#32;&gt;&#32;0)
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k.push_back(fNbNperGeneration[i+1]/(<emphasis role="keywordtype">double</emphasis>)fNbNperGeneration[i]);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k.push_back(0);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00168"/>00168 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fNbNperGeneration[i+1]&#32;&gt;&#32;0&#32;&amp;&amp;&#32;fNbNperGeneration[i]&#32;&gt;&#32;0)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_k.push_back(&#32;k[i]&#32;*&#32;std::sqrt(&#32;1./fNbNperGeneration[i+1]&#32;+&#32;1./fNbNperGeneration[i]&#32;)&#32;);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_k.push_back(&#32;0&#32;);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00175"/>00175 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00176"/>00176 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00177"/>00177 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;k;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00178"/>00178 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00179"/>00179 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00181"/>00181 <emphasis role="comment">//&#32;Calculation&#32;of&#32;k_source</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00182"/>00182 <emphasis role="comment">//&#32;ksrc&#32;=&#32;1&#32;-&#32;Nb&#32;source&#32;neutrons&#32;/&#32;Total&#32;number&#32;of&#32;neutrons</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00183"/>00183 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00184"/>00184 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::ksrcCalculation()&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fTotNbNeutrons&#32;&gt;&#32;0)
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fksrc&#32;=&#32;1&#32;-&#32;fNbNperGeneration[0]/(double)fTotNbNeutrons;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00187"/>00187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fksrc&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00189"/>00189 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00190"/>00190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fTotNbNeutrons&#32;&gt;&#32;0&#32;&amp;&amp;&#32;fNbNperGeneration[0])
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fsigma_ksrc&#32;=&#32;fksrc&#32;*&#32;std::sqrt(&#32;1./fNbNperGeneration[0]&#32;+&#32;1./fTotNbNeutrons&#32;);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00192"/>00192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fsigma_ksrc&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00194"/>00194 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00195"/>00195 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00197"/>00197 <emphasis role="comment">//&#32;Calculation&#32;of&#32;k_eff&#32;(direct&#32;estimation)&#32;&#32;(WARNING&#32;neutron&#32;generation&#32;range&#32;is&#32;hard&#32;coded)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00198"/>00198 <emphasis role="comment">//&#32;direct&#32;keff&#32;=&#32;average&#32;value&#32;of&#32;k&#32;from&#32;generation&#32;10&#32;to&#32;60</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00199"/>00199 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00200"/>00200 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::keffCalculation(std::vector&#32;&lt;double&gt;&amp;&#32;k)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00201"/>00201 &#32;&#32;&#32;&#32;<link linkend="_class_t_m_x_stat_error_calc">TMXStatErrorCalc</link>&#32;ErrorKeff;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00202"/>00202 &#32;&#32;&#32;&#32;fkeff&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00203"/>00203 &#32;&#32;&#32;&#32;fsigma_mean_keff&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00204"/>00204 &#32;&#32;&#32;&#32;ferror_mean_keff&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00205"/>00205 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00206"/>00206 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00207"/>00207 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;the&#32;variation&#32;of&#32;k&#32;over&#32;the&#32;5&#32;generations&#32;before&#32;min&#32;to&#32;see&#32;if&#32;min&#32;is&#32;correctly&#32;defined&#32;(the&#32;plateau&#32;is&#32;reached)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;END&#32;of&#32;TODO</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00209"/>00209 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00210"/>00210 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Definition&#32;of&#32;minimum&#32;and&#32;maximum&#32;of&#32;neutron&#32;generation&#32;to&#32;be&#32;considered&#32;to&#32;calculate&#32;keff</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_keff_min&#32;=&#32;9;&#32;&#32;<emphasis role="comment">//&#32;k&#32;at&#32;Generation&#32;10</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00212"/>00212 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_keff_max&#32;=&#32;59;&#32;&#32;<emphasis role="comment">//&#32;k&#32;at&#32;generation&#32;59</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00213"/>00213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index_keff_max&#32;&gt;=&#32;(<emphasis role="keywordtype">int</emphasis>)k.size())&#32;{&#32;index_keff_max&#32;=&#32;k.size()-1;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00214"/>00214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index_keff_min&#32;&gt;=&#32;(<emphasis role="keywordtype">int</emphasis>)k.size())&#32;{&#32;index_keff_min&#32;=&#32;0;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00215"/>00215 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Accumulate&#32;values&#32;of&#32;k&#32;for&#32;several&#32;neutron&#32;generations</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00217"/>00217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;ik&#32;=&#32;index_keff_min;&#32;ik&#32;&lt;=&#32;index_keff_max;&#32;++ik)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ErrorKeff.StatErrorCalc(k[ik]);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00219"/>00219 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00220"/>00220 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00221"/>00221 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;Mean&#32;k&#32;=&#32;keff&#32;and&#32;sigma_keff&#32;=&#32;standard&#32;dev.</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00222"/>00222 &#32;&#32;&#32;&#32;fkeff&#32;=&#32;ErrorKeff.GetMeanValue();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00223"/>00223 &#32;&#32;&#32;&#32;ferror_mean_keff&#32;=&#32;ErrorKeff.GetMeanError();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00224"/>00224 &#32;&#32;&#32;&#32;fsigma_mean_keff&#32;=&#32;ErrorKeff.GetStandardDeviation();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00225"/>00225 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00226"/>00226 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00227"/>00227 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::EpsilonCalculation()&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00228"/>00228 &#32;&#32;&#32;&#32;fepsilon&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00229"/>00229 &#32;&#32;&#32;&#32;fsigma_eps&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00230"/>00230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(1&#32;-&#32;fksrc&#32;!=0&#32;&amp;&amp;&#32;fkeff&#32;!=0)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fepsilon&#32;=&#32;fksrc&#32;*&#32;(1&#32;-&#32;fkeff)&#32;/&#32;(fkeff&#32;*&#32;(1&#32;-&#32;fksrc));
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fsigma_eps&#32;=&#32;fepsilon&#32;*&#32;sqrt(pow(&#32;(1-fkeff)&#32;/&#32;(fkeff&#32;*&#32;(1&#32;-&#32;fksrc)*(1&#32;-&#32;fksrc))&#32;*&#32;fsigma_ksrc&#32;,&#32;2)&#32;+&#32;pow(&#32;fksrc&#32;/&#32;(fkeff*fkeff&#32;*&#32;(1&#32;-&#32;fksrc))&#32;*&#32;fsigma_mean_keff&#32;,&#32;2));
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00233"/>00233 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00234"/>00234 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00235"/>00235 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00236"/>00236 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::EtaCalculation(<emphasis role="keywordtype">double</emphasis>&#32;NeutronFromFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;NeutronFromInelastic)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00237"/>00237 &#32;&#32;&#32;&#32;feta&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(NeutronFromFission&#32;+&#32;NeutronFromInelastic&#32;!=&#32;0)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;feta&#32;=&#32;NeutronFromFission/(double)(NeutronFromFission&#32;+&#32;NeutronFromInelastic);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fsigma_eta&#32;=&#32;fErrorEta.StatErrorCalc(feta);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00241"/>00241 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00242"/>00242 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00243"/>00243 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00244"/>00244 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::EFissionCalculation(<emphasis role="keywordtype">double</emphasis>&#32;Edep,&#32;<emphasis role="keywordtype">double</emphasis>&#32;Ebeam,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;NbFission)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00245"/>00245 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Total&#32;Energy&#32;deposited&#32;minus&#32;the&#32;beam&#32;energy&#32;divided&#32;by&#32;the&#32;number&#32;of&#32;fission&#32;=&#32;the&#32;mean&#32;energy&#32;released&#32;by&#32;each&#32;fission</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00246"/>00246 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;number&#32;of&#32;values&#32;of&#32;the&#32;energy&#32;deposit&#32;per&#32;fission&#32;is&#32;not&#32;0,&#32;we&#32;calculate&#32;the&#32;statistical&#32;error&#32;(1&#32;sigma)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00247"/>00247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(NbFission&#32;!=&#32;0)&#32;{fsigma_EtotEbeam_perFission&#32;=&#32;1e-6&#32;*&#32;fErrorEperFission_withEdepMinusEbeam.StatErrorCalc((Edep-Ebeam)/NbFission);&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00248"/>00248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;fsigma_EtotEbeam_perFission&#32;=&#32;1e-6&#32;*&#32;fErrorEperFission_withEdepMinusEbeam.GetMeanError();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00249"/>00249 &#32;&#32;&#32;&#32;fEtotEbeam_perFission&#32;=&#32;fErrorEperFission_withEdepMinusEbeam.GetMeanValue()&#32;*&#32;1e-6;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00250"/>00250 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00251"/>00251 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00252"/>00252 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::EperFissionCalculation(<emphasis role="keywordtype">double</emphasis>&#32;EperFission,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Nb_EperFission)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00253"/>00253 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Total&#32;Energy&#32;released&#32;by&#32;fission&#32;and&#32;secondaries&#32;due&#32;to&#32;fission&#32;=&#32;the&#32;mean&#32;energy&#32;released&#32;by&#32;each&#32;fission</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00254"/>00254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(Nb_EperFission&#32;!=&#32;0)&#32;{&#32;<emphasis role="comment">//&#32;If&#32;the&#32;number&#32;of&#32;value&#32;of&#32;the&#32;energy&#32;released&#32;by&#32;fissions&#32;is&#32;not&#32;0,&#32;we&#32;calculate&#32;its&#32;statistical&#32;error&#32;(1&#32;sigma)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fsigma_EperFission&#32;=&#32;1e-6&#32;*&#32;fErrorEperFission.StatErrorCalc(EperFission/(<emphasis role="keywordtype">double</emphasis>)Nb_EperFission);&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00256"/>00256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;fsigma_EperFission&#32;=&#32;1e-6&#32;*&#32;fErrorEperFission.GetMeanError();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00257"/>00257 &#32;&#32;&#32;&#32;fmeanEperFission&#32;=&#32;fErrorEperFission.GetMeanValue()&#32;*&#32;1e-6;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00258"/>00258 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00259"/>00259 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00260"/>00260 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00261"/>00261 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::G0calculation(<emphasis role="keywordtype">double</emphasis>&#32;nu)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00262"/>00262 &#32;&#32;&#32;&#32;fG0&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00263"/>00263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fInputParam-&gt;BeamEnergy&#32;!=0&#32;&amp;&amp;&#32;nu&#32;!=0)
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fG0&#32;=&#32;feta/nu&#32;*&#32;(fNbNperGeneration[0]/(double)fnEvt)&#32;*&#32;fEtotEbeam_perFission/(fInputParam-&gt;BeamEnergy);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00265"/>00265 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fNbNperGeneration[0]&#32;!=&#32;0&#32;&amp;&amp;&#32;fEtotEbeam_perFission&#32;!=&#32;0)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fsigma_G0&#32;=&#32;fG0&#32;*&#32;sqrt(1/fNbNperGeneration[0]&#32;+&#32;(fsigma_EtotEbeam_perFission/fEtotEbeam_perFission)*(fsigma_EtotEbeam_perFission/fEtotEbeam_perFission));}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00267"/>00267 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00268"/>00268 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00269"/>00269 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::G_G0k_calculation()&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00270"/>00270 &#32;&#32;&#32;&#32;fG_G0k&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;1&#32;-&#32;fksrc&#32;!=0&#32;)
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fG_G0k&#32;=&#32;fG0&#32;*&#32;fksrc/(1-fksrc);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00273"/>00273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;fG0&#32;!=&#32;0&#32;&amp;&amp;&#32;fksrc&#32;!=&#32;0&#32;&amp;&amp;&#32;1-fksrc&#32;!=&#32;0)
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fsigma_G_G0k&#32;=&#32;fG_G0k&#32;*&#32;sqrt(&#32;(fsigma_G0/fG0)*(fsigma_G0/fG0)&#32;+&#32;(fsigma_ksrc&#32;/(fksrc*(1-fksrc)))&#32;*&#32;(fsigma_ksrc/(fksrc*(1-fksrc))));
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00275"/>00275 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00276"/>00276 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00277"/>00277 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00278"/>00278 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::G_Pth_calculation()&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00279"/>00279 &#32;&#32;&#32;&#32;fG_Pth&#32;=&#32;fErrorEdep.GetMeanValue()/&#32;(fInputParam-&gt;BeamEnergy*1e+6)&#32;-&#32;1;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00280"/>00280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;fInputParam-&gt;BeamEnergy&#32;!=&#32;0&#32;&amp;&amp;&#32;fnEvt&#32;!=&#32;0)
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fsigma_G_Pth&#32;=&#32;std::sqrt(&#32;(fErrorEdep.GetMeanError()/fErrorEdep.GetMeanValue())*(fErrorEdep.GetMeanError()/fErrorEdep.GetMeanValue())&#32;+
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1/fErrorEdep.GetNbValues())&#32;*&#32;fG_Pth;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00283"/>00283 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00284"/>00284 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00285"/>00285 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::FissionByN0Calculation(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;FissionByN0)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00286"/>00286 &#32;&#32;&#32;&#32;fsigma_FissionByN0&#32;=&#32;fErrorFissionByN0.StatErrorCalc(FissionByN0)/(double)fInputParam-&gt;PrintModulo&#32;*&#32;fnEvt;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00287"/>00287 &#32;&#32;&#32;&#32;FissionByN0&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;Initialize&#32;the&#32;counter&#32;after&#32;reading</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00288"/>00288 &#32;&#32;&#32;&#32;fsumFissionByN0&#32;=&#32;fErrorFissionByN0.GetSum();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00289"/>00289 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00290"/>00290 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00291"/>00291 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::CapAbsRatioCalculation(<emphasis role="keywordtype">double</emphasis>&amp;&#32;N_AbsU5,&#32;<emphasis role="keywordtype">double</emphasis>&#32;RelativeAbundanceU235,&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;N_CapU8,&#32;<emphasis role="keywordtype">double</emphasis>&#32;RelativeAbundanceU238)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Definition&#32;of&#32;capture&#32;and&#32;absorption&#32;rates&#32;in&#32;U-238&#32;or&#32;U-235</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00293"/>00293 &#32;&#32;&#32;&#32;fsigma_N_AbsU5&#32;=&#32;fErrorN_AbsU5.StatErrorCalc(N_AbsU5)/(double)fInputParam-&gt;PrintModulo;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00294"/>00294 &#32;&#32;&#32;&#32;fsigma_N_CapU8&#32;=&#32;fErrorN_CapU8.StatErrorCalc(N_CapU8)/(double)fInputParam-&gt;PrintModulo;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00295"/>00295 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00296"/>00296 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Definition&#32;of&#32;Capture/absorption&#32;ratio&#32;to&#32;estimate&#32;the&#32;spectrum&#32;quality&#32;(fast&#32;neutrons&#32;VS&#32;thermal&#32;neutrons)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00297"/>00297 &#32;&#32;&#32;&#32;fCap_abs&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00298"/>00298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(N_AbsU5&#32;!=&#32;0&#32;&amp;&amp;&#32;RelativeAbundanceU238&#32;!=&#32;0)
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fCap_abs&#32;=&#32;N_CapU8&#32;/&#32;RelativeAbundanceU238&#32;*&#32;RelativeAbundanceU235&#32;/&#32;N_AbsU5;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00300"/>00300 &#32;&#32;&#32;&#32;N_AbsU5&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;Initialize&#32;the&#32;counter&#32;after&#32;reading</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00301"/>00301 &#32;&#32;&#32;&#32;N_CapU8&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;Initialize&#32;the&#32;counter&#32;after&#32;reading</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00302"/>00302 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00303"/>00303 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;calculate&#32;statistical&#32;uncertainties&#32;(1&#32;sigma)</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00304"/>00304 &#32;&#32;&#32;&#32;fsigma_Cap_Abs&#32;=&#32;fErrorCap_abs.StatErrorCalc(fCap_abs);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00305"/>00305 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00306"/>00306 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00307"/>00307 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::Chi2Calculation(<link linkend="_class_t_m_x_random_distribution3_d">TMXRandomDistribution3D</link>&amp;&#32;RadiusAnglesHeight)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00308"/>00308 &#32;&#32;&#32;&#32;fSum2&#32;=&#32;0;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00309"/>00309 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convergence&#32;calculation&#32;for&#32;keff&#32;calculation</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;weights&#32;=&#32;RadiusAnglesHeight.GetUnnormedWeights();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;fPrevious_weights.size()&#32;==&#32;0)&#32;{&#32;fPrevious_weights&#32;=&#32;RadiusAnglesHeight.GetInitialUnnormedWeights();&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;fPrevious_weights.size();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;n;&#32;++i)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fSum2&#32;+=&#32;std::pow(weights[i]&#32;-&#32;fPrevious_weights[i],&#32;2);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fSum4&#32;+=&#32;std::pow(weights[i]&#32;-&#32;fPrevious_weights[i],&#32;4);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fSum2&#32;=&#32;fSum2/n;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fSum4&#32;=&#32;std::sqrt(fSum4/n&#32;-&#32;fSum2*fSum2);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fPrevious_weights&#32;=&#32;weights;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00321"/>00321 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00322"/>00322 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00323"/>00323 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00324"/>00324 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::WriteValues(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;NeutronFromFission,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;NeutronFromInelastic,&#32;<emphasis role="keywordtype">double</emphasis>&#32;nu)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00325"/>00325 &#32;&#32;&#32;&#32;std::ofstream&#32;LogFile;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00326"/>00326 &#32;&#32;&#32;&#32;LogFile.open((fLogFile&#32;+&#32;std::to_string(fthreadID)&#32;+&#32;<emphasis role="stringliteral">&quot;_&quot;</emphasis>&#32;+&#32;std::to_string(fRunNumber)&#32;+&#32;(std::string)<emphasis role="stringliteral">&quot;.txt&quot;</emphasis>).c_str(),std::ios::out&#32;|&#32;std::ios::app);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00327"/>00327 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00328"/>00328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fSum2&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fSum4&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00330"/>00330 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00331"/>00331 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Writing&#32;in&#32;LogFile</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00332"/>00332 &#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fnEvt&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00333"/>00333 &#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fNbNperGeneration[0]&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fTotNbNeutrons&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsumFissionByN0&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_FissionByN0&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;NeutronFromFission&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;NeutronFromInelastic&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00334"/>00334 &#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fErrorN_AbsU5.GetSum()/(double)fnEvt&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_N_AbsU5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00335"/>00335 &#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fErrorN_CapU8.GetSum()/(double)fnEvt&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_N_CapU8&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00336"/>00336 &#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fksrc&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_ksrc&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00337"/>00337 &#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fkeff&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_mean_keff&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00338"/>00338 &#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;nu&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;feta&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_eta&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00339"/>00339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fepsilon&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_eps&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00341"/>00341 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00342"/>00342 &#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fCap_abs&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_Cap_Abs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00343"/>00343 &#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fEtotEbeam_perFission&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_EtotEbeam_perFission&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00344"/>00344 &#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fmeanEperFission&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_EperFission&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00345"/>00345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fG0&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_G0&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fG_G0k&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_G_G0k&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;fG_Pth&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_G_Pth&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00349"/>00349 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00350"/>00350 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00351"/>00351 &#32;&#32;&#32;&#32;LogFile&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00352"/>00352 &#32;&#32;&#32;&#32;LogFile.close();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00353"/>00353 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00354"/>00354 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00355"/>00355 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::PrintValues(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;NeutronFromFission,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;NeutronFromInelastic,&#32;<emphasis role="keywordtype">double</emphasis>&#32;nu,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;N0abs)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;str_k&#32;=&#32;<emphasis role="stringliteral">&quot;k_src&quot;</emphasis>;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))&#32;{&#32;str_k&#32;=&#32;<emphasis role="stringliteral">&quot;k_eff&#32;dedicated&quot;</emphasis>;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00358"/>00358 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Printing&#32;information&#32;in&#32;the&#32;terminal</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nEvt&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fnEvt&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;N0&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fNbNperGeneration[0]/(double)fnEvt&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;;&#32;Ntot&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fTotNbNeutrons/(<emphasis role="keywordtype">double</emphasis>)fnEvt&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;;&#32;FissionByN0&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsumFissionByN0/(double)fnEvt&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_FissionByN0/(<emphasis role="keywordtype">double</emphasis>)fnEvt&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;;&#32;fission&#32;neutrons&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;NeutronFromFission/(double)fnEvt&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;;&#32;inelastic&#32;neutrons&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;NeutronFromInelastic/(<emphasis role="keywordtype">double</emphasis>)fnEvt&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;N_AbsU5&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorN_AbsU5.GetSum()&#32;&#32;/(double)fnEvt&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_N_AbsU5&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;;&#32;N_CapU8&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorN_CapU8.GetSum()/(double)fnEvt&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_N_CapU8&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;nu&#32;&#32;&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;nu&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;str_k&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fksrc&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_ksrc&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;k_eff&#32;direct&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fkeff&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_mean_keff&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(mean&#32;error&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;ferror_mean_keff&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Edep&#32;(=per&#32;fission)&#32;per&#32;fission&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fmeanEperFission&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_EperFission&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00367"/>00367 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Edep&#32;(=&#32;Etot-Ebeam)&#32;per&#32;fission&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fEtotEbeam_perFission&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_EtotEbeam_perFission&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;eta&#32;&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;feta&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_eta&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;;&#32;epsilon&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fepsilon&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_eps&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;G0&#32;&#32;&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fG0&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_G0&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;G&#32;&#32;&#32;&#32;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fG_G0k&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_G_G0k&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;G_Pth&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fG_Pth&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_G_Pth&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;err_cap(U-238)&#32;/&#32;err_abs(U-235)&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fCap_abs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fsigma_Cap_Abs&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;N0absorber&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;N0abs/(double)fnEvt&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Sum&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fSum2&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fSum4&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MCNP&#32;keff&#32;estimators&#32;:&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;k_col&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_collision.GetMeanValue()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_collision.GetMeanError()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(sigma&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_collision.GetStandardDeviation()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;k_Aab&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_analogAbs.GetMeanValue()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_analogAbs.GetMeanError()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(sigma&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_analogAbs.GetStandardDeviation()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;k_Iab&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_implicitAbs.GetMeanValue()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_implicitAbs.GetMeanError()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(sigma&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_implicitAbs.GetStandardDeviation()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;k_trl&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_trackLength.GetMeanValue()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_trackLength.GetMeanError()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(sigma&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fErrorKeff_trackLength.GetStandardDeviation()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fnEvt&#32;&lt;&#32;10)&#32;{&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;keep&#32;first&#32;10&#32;cycles</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fErrorKeff_collision.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fErrorKeff_analogAbs.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fErrorKeff_implicitAbs.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fErrorKeff_trackLength.Initialize();
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00391"/>00391 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00392"/>00392 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00393"/>00393 <emphasis role="keywordtype">void</emphasis>&#32;TMXNeutronicParam::UpdateKeffEstimators(<emphasis role="keywordtype">double</emphasis>&#32;Keff_collision,&#32;<emphasis role="keywordtype">double</emphasis>&#32;Keff_analogAbs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;Keff_implicitAbs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;Keff_trackLength,&#32;<emphasis role="keywordtype">long</emphasis>&#32;NsourceNeutronPerEvent)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00394"/>00394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(NsourceNeutronPerEvent&#32;&gt;&#32;0)&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fErrorKeff_collision.StatErrorCalc(Keff_collision/NsourceNeutronPerEvent);;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fErrorKeff_analogAbs.StatErrorCalc(Keff_analogAbs/NsourceNeutronPerEvent);;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fErrorKeff_implicitAbs.StatErrorCalc(Keff_implicitAbs/NsourceNeutronPerEvent);;
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fErrorKeff_trackLength.StatErrorCalc(Keff_trackLength/NsourceNeutronPerEvent);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00399"/>00399 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00400"/>00400 }
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00401"/>00401 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00402"/>00402 <emphasis role="comment">//------------------------------------------------------------------------------*</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00403"/>00403 <emphasis role="comment">//&#32;Getter</emphasis>
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00404"/>00404 
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00405"/>00405 &#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXNeutronicParam::GetEtotDeposit()&#32;{
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(fEtot_deposit);
<anchor xml:id="__t_m_x_neutronic_param_8cc_source_1l00407"/>00407 &#32;}
</programlisting></section>
