<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_zpipe_8c_source" xml:lang="en-US">
<title>zpipe.c</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/xnsect/xnutil/src/zpipe.c</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="_zpipe_8c_source_1l00001"/>00001 <emphasis role="comment">/*&#32;zpipe.c:&#32;example&#32;of&#32;proper&#32;use&#32;of&#32;zlib&apos;s&#32;inflate()&#32;and&#32;deflate()</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00002"/>00002 <emphasis role="comment">&#32;&#32;&#32;Not&#32;copyrighted&#32;--&#32;provided&#32;to&#32;the&#32;public&#32;domain</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00003"/>00003 <emphasis role="comment">&#32;&#32;&#32;Version&#32;1.4&#32;&#32;11&#32;December&#32;2005&#32;&#32;Mark&#32;Adler&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00004"/>00004 
<anchor xml:id="_zpipe_8c_source_1l00005"/>00005 <emphasis role="comment">/*&#32;Version&#32;history:</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00006"/>00006 <emphasis role="comment">&#32;&#32;&#32;1.0&#32;&#32;30&#32;Oct&#32;2004&#32;&#32;First&#32;version</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00007"/>00007 <emphasis role="comment">&#32;&#32;&#32;1.1&#32;&#32;&#32;8&#32;Nov&#32;2004&#32;&#32;Add&#32;void&#32;casting&#32;for&#32;unused&#32;return&#32;values</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00008"/>00008 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Use&#32;switch&#32;statement&#32;for&#32;inflate()&#32;return&#32;values</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00009"/>00009 <emphasis role="comment">&#32;&#32;&#32;1.2&#32;&#32;&#32;9&#32;Nov&#32;2004&#32;&#32;Add&#32;assertions&#32;to&#32;document&#32;zlib&#32;guarantees</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00010"/>00010 <emphasis role="comment">&#32;&#32;&#32;1.3&#32;&#32;&#32;6&#32;Apr&#32;2005&#32;&#32;Remove&#32;incorrect&#32;assertion&#32;in&#32;inf()</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00011"/>00011 <emphasis role="comment">&#32;&#32;&#32;1.4&#32;&#32;11&#32;Dec&#32;2005&#32;&#32;Add&#32;hack&#32;to&#32;avoid&#32;MSDOS&#32;end-of-line&#32;conversions</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00012"/>00012 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Avoid&#32;some&#32;compiler&#32;warnings&#32;for&#32;input&#32;and&#32;output&#32;buffers</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00013"/>00013 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00014"/>00014 
<anchor xml:id="_zpipe_8c_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00016"/>00016 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&lt;assert.h&gt;</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&quot;zlib.h&quot;</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00019"/>00019 
<anchor xml:id="_zpipe_8c_source_1l00020"/>00020 <emphasis role="preprocessor">#if&#32;defined(MSDOS)&#32;||&#32;defined(OS2)&#32;||&#32;defined(WIN32)&#32;||&#32;defined(__CYGWIN__)</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00021"/>00021 <emphasis role="preprocessor">#&#32;&#32;include&#32;&lt;fcntl.h&gt;</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00022"/>00022 <emphasis role="preprocessor">#&#32;&#32;include&#32;&lt;io.h&gt;</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00023"/>00023 <emphasis role="preprocessor">#&#32;&#32;define&#32;SET_BINARY_MODE(file)&#32;setmode(fileno(file),&#32;O_BINARY)</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00024"/>00024 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00025"/>00025 <emphasis role="preprocessor">#&#32;&#32;define&#32;SET_BINARY_MODE(file)</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00026"/>00026 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00027"/>00027 
<anchor xml:id="_zpipe_8c_source_1l00028"/>00028 <emphasis role="preprocessor">#define&#32;CHUNK&#32;16384</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00029"/>00029 
<anchor xml:id="_zpipe_8c_source_1l00030"/>00030 <emphasis role="comment">/*&#32;Compress&#32;from&#32;file&#32;source&#32;to&#32;file&#32;dest&#32;until&#32;EOF&#32;on&#32;source.</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00031"/>00031 <emphasis role="comment">&#32;&#32;&#32;def()&#32;returns&#32;Z_OK&#32;on&#32;success,&#32;Z_MEM_ERROR&#32;if&#32;memory&#32;could&#32;not&#32;be</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00032"/>00032 <emphasis role="comment">&#32;&#32;&#32;allocated&#32;for&#32;processing,&#32;Z_STREAM_ERROR&#32;if&#32;an&#32;invalid&#32;compression</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00033"/>00033 <emphasis role="comment">&#32;&#32;&#32;level&#32;is&#32;supplied,&#32;Z_VERSION_ERROR&#32;if&#32;the&#32;version&#32;of&#32;zlib.h&#32;and&#32;the</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00034"/>00034 <emphasis role="comment">&#32;&#32;&#32;version&#32;of&#32;the&#32;library&#32;linked&#32;do&#32;not&#32;match,&#32;or&#32;Z_ERRNO&#32;if&#32;there&#32;is</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00035"/>00035 <emphasis role="comment">&#32;&#32;&#32;an&#32;error&#32;reading&#32;or&#32;writing&#32;the&#32;files.&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00036"/>00036 <emphasis role="keywordtype">int</emphasis>&#32;def(FILE&#32;*source,&#32;FILE&#32;*dest,&#32;<emphasis role="keywordtype">int</emphasis>&#32;level)
<anchor xml:id="_zpipe_8c_source_1l00037"/>00037 {
<anchor xml:id="_zpipe_8c_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ret,&#32;flush;
<anchor xml:id="_zpipe_8c_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;have;
<anchor xml:id="_zpipe_8c_source_1l00040"/>00040 &#32;&#32;&#32;&#32;z_stream&#32;strm;
<anchor xml:id="_zpipe_8c_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;in[CHUNK];
<anchor xml:id="_zpipe_8c_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;out[CHUNK];
<anchor xml:id="_zpipe_8c_source_1l00043"/>00043 
<anchor xml:id="_zpipe_8c_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;allocate&#32;deflate&#32;state&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;strm.zalloc&#32;=&#32;Z_NULL;
<anchor xml:id="_zpipe_8c_source_1l00046"/>00046 &#32;&#32;&#32;&#32;strm.zfree&#32;=&#32;Z_NULL;
<anchor xml:id="_zpipe_8c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;strm.opaque&#32;=&#32;Z_NULL;
<anchor xml:id="_zpipe_8c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;ret&#32;=&#32;deflateInit(&amp;strm,&#32;level);
<anchor xml:id="_zpipe_8c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ret&#32;!=&#32;Z_OK)
<anchor xml:id="_zpipe_8c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_zpipe_8c_source_1l00051"/>00051 
<anchor xml:id="_zpipe_8c_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;compress&#32;until&#32;end&#32;of&#32;file&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_zpipe_8c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strm.avail_in&#32;=&#32;fread(in,&#32;1,&#32;CHUNK,&#32;source);
<anchor xml:id="_zpipe_8c_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ferror(source))&#32;{
<anchor xml:id="_zpipe_8c_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)deflateEnd(&amp;strm);
<anchor xml:id="_zpipe_8c_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Z_ERRNO;
<anchor xml:id="_zpipe_8c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_zpipe_8c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flush&#32;=&#32;feof(source)&#32;?&#32;Z_FINISH&#32;:&#32;Z_NO_FLUSH;
<anchor xml:id="_zpipe_8c_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strm.next_in&#32;=&#32;in;
<anchor xml:id="_zpipe_8c_source_1l00061"/>00061 
<anchor xml:id="_zpipe_8c_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;run&#32;deflate()&#32;on&#32;input&#32;until&#32;output&#32;buffer&#32;not&#32;full,&#32;finish</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00063"/>00063 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compression&#32;if&#32;all&#32;of&#32;source&#32;has&#32;been&#32;read&#32;in&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_zpipe_8c_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strm.avail_out&#32;=&#32;CHUNK;
<anchor xml:id="_zpipe_8c_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strm.next_out&#32;=&#32;out;
<anchor xml:id="_zpipe_8c_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;deflate(&amp;strm,&#32;flush);&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;bad&#32;return&#32;value&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(ret&#32;!=&#32;Z_STREAM_ERROR);&#32;&#32;<emphasis role="comment">/*&#32;state&#32;not&#32;clobbered&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;have&#32;=&#32;CHUNK&#32;-&#32;strm.avail_out;
<anchor xml:id="_zpipe_8c_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fwrite(out,&#32;1,&#32;have,&#32;dest)&#32;!=&#32;have&#32;||&#32;ferror(dest))&#32;{
<anchor xml:id="_zpipe_8c_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)deflateEnd(&amp;strm);
<anchor xml:id="_zpipe_8c_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Z_ERRNO;
<anchor xml:id="_zpipe_8c_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_zpipe_8c_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(strm.avail_out&#32;==&#32;0);
<anchor xml:id="_zpipe_8c_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(strm.avail_in&#32;==&#32;0);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;all&#32;input&#32;will&#32;be&#32;used&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00076"/>00076 
<anchor xml:id="_zpipe_8c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;done&#32;when&#32;last&#32;data&#32;in&#32;file&#32;processed&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(flush&#32;!=&#32;Z_FINISH);
<anchor xml:id="_zpipe_8c_source_1l00079"/>00079 &#32;&#32;&#32;&#32;assert(ret&#32;==&#32;Z_STREAM_END);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;stream&#32;will&#32;be&#32;complete&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00080"/>00080 
<anchor xml:id="_zpipe_8c_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;clean&#32;up&#32;and&#32;return&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00082"/>00082 &#32;&#32;&#32;&#32;(void)deflateEnd(&amp;strm);
<anchor xml:id="_zpipe_8c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Z_OK;
<anchor xml:id="_zpipe_8c_source_1l00084"/>00084 }
<anchor xml:id="_zpipe_8c_source_1l00085"/>00085 
<anchor xml:id="_zpipe_8c_source_1l00086"/>00086 <emphasis role="comment">/*&#32;Decompress&#32;from&#32;file&#32;source&#32;to&#32;file&#32;dest&#32;until&#32;stream&#32;ends&#32;or&#32;EOF.</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00087"/>00087 <emphasis role="comment">&#32;&#32;&#32;inf()&#32;returns&#32;Z_OK&#32;on&#32;success,&#32;Z_MEM_ERROR&#32;if&#32;memory&#32;could&#32;not&#32;be</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00088"/>00088 <emphasis role="comment">&#32;&#32;&#32;allocated&#32;for&#32;processing,&#32;Z_DATA_ERROR&#32;if&#32;the&#32;deflate&#32;data&#32;is</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00089"/>00089 <emphasis role="comment">&#32;&#32;&#32;invalid&#32;or&#32;incomplete,&#32;Z_VERSION_ERROR&#32;if&#32;the&#32;version&#32;of&#32;zlib.h&#32;and</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00090"/>00090 <emphasis role="comment">&#32;&#32;&#32;the&#32;version&#32;of&#32;the&#32;library&#32;linked&#32;do&#32;not&#32;match,&#32;or&#32;Z_ERRNO&#32;if&#32;there</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00091"/>00091 <emphasis role="comment">&#32;&#32;&#32;is&#32;an&#32;error&#32;reading&#32;or&#32;writing&#32;the&#32;files.&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00092"/>00092 <emphasis role="keywordtype">int</emphasis>&#32;inf(FILE&#32;*source,&#32;FILE&#32;*dest)
<anchor xml:id="_zpipe_8c_source_1l00093"/>00093 {
<anchor xml:id="_zpipe_8c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ret;
<anchor xml:id="_zpipe_8c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;have;
<anchor xml:id="_zpipe_8c_source_1l00096"/>00096 &#32;&#32;&#32;&#32;z_stream&#32;strm;
<anchor xml:id="_zpipe_8c_source_1l00097"/>00097 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;in[CHUNK];
<anchor xml:id="_zpipe_8c_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;out[CHUNK];
<anchor xml:id="_zpipe_8c_source_1l00099"/>00099 
<anchor xml:id="_zpipe_8c_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;allocate&#32;inflate&#32;state&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00101"/>00101 &#32;&#32;&#32;&#32;strm.zalloc&#32;=&#32;Z_NULL;
<anchor xml:id="_zpipe_8c_source_1l00102"/>00102 &#32;&#32;&#32;&#32;strm.zfree&#32;=&#32;Z_NULL;
<anchor xml:id="_zpipe_8c_source_1l00103"/>00103 &#32;&#32;&#32;&#32;strm.opaque&#32;=&#32;Z_NULL;
<anchor xml:id="_zpipe_8c_source_1l00104"/>00104 &#32;&#32;&#32;&#32;strm.avail_in&#32;=&#32;0;
<anchor xml:id="_zpipe_8c_source_1l00105"/>00105 &#32;&#32;&#32;&#32;strm.next_in&#32;=&#32;Z_NULL;
<anchor xml:id="_zpipe_8c_source_1l00106"/>00106 &#32;&#32;&#32;&#32;ret&#32;=&#32;inflateInit(&amp;strm);
<anchor xml:id="_zpipe_8c_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ret&#32;!=&#32;Z_OK)
<anchor xml:id="_zpipe_8c_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_zpipe_8c_source_1l00109"/>00109 
<anchor xml:id="_zpipe_8c_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;decompress&#32;until&#32;deflate&#32;stream&#32;ends&#32;or&#32;end&#32;of&#32;file&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_zpipe_8c_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strm.avail_in&#32;=&#32;fread(in,&#32;1,&#32;CHUNK,&#32;source);
<anchor xml:id="_zpipe_8c_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ferror(source))&#32;{
<anchor xml:id="_zpipe_8c_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)inflateEnd(&amp;strm);
<anchor xml:id="_zpipe_8c_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Z_ERRNO;
<anchor xml:id="_zpipe_8c_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_zpipe_8c_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strm.avail_in&#32;==&#32;0)
<anchor xml:id="_zpipe_8c_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_zpipe_8c_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strm.next_in&#32;=&#32;in;
<anchor xml:id="_zpipe_8c_source_1l00120"/>00120 
<anchor xml:id="_zpipe_8c_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;run&#32;inflate()&#32;on&#32;input&#32;until&#32;output&#32;buffer&#32;not&#32;full&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_zpipe_8c_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strm.avail_out&#32;=&#32;CHUNK;
<anchor xml:id="_zpipe_8c_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strm.next_out&#32;=&#32;out;
<anchor xml:id="_zpipe_8c_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;inflate(&amp;strm,&#32;Z_NO_FLUSH);
<anchor xml:id="_zpipe_8c_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(ret&#32;!=&#32;Z_STREAM_ERROR);&#32;&#32;<emphasis role="comment">/*&#32;state&#32;not&#32;clobbered&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ret)&#32;{
<anchor xml:id="_zpipe_8c_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Z_NEED_DICT:
<anchor xml:id="_zpipe_8c_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;Z_DATA_ERROR;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;and&#32;fall&#32;through&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Z_DATA_ERROR:
<anchor xml:id="_zpipe_8c_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Z_MEM_ERROR:
<anchor xml:id="_zpipe_8c_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)inflateEnd(&amp;strm);
<anchor xml:id="_zpipe_8c_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_zpipe_8c_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_zpipe_8c_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;have&#32;=&#32;CHUNK&#32;-&#32;strm.avail_out;
<anchor xml:id="_zpipe_8c_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fwrite(out,&#32;1,&#32;have,&#32;dest)&#32;!=&#32;have&#32;||&#32;ferror(dest))&#32;{
<anchor xml:id="_zpipe_8c_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)inflateEnd(&amp;strm);
<anchor xml:id="_zpipe_8c_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Z_ERRNO;
<anchor xml:id="_zpipe_8c_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_zpipe_8c_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(strm.avail_out&#32;==&#32;0);
<anchor xml:id="_zpipe_8c_source_1l00141"/>00141 
<anchor xml:id="_zpipe_8c_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;done&#32;when&#32;inflate()&#32;says&#32;it&apos;s&#32;done&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00143"/>00143 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ret&#32;!=&#32;Z_STREAM_END);
<anchor xml:id="_zpipe_8c_source_1l00144"/>00144 
<anchor xml:id="_zpipe_8c_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;clean&#32;up&#32;and&#32;return&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00146"/>00146 &#32;&#32;&#32;&#32;(void)inflateEnd(&amp;strm);
<anchor xml:id="_zpipe_8c_source_1l00147"/>00147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret&#32;==&#32;Z_STREAM_END&#32;?&#32;Z_OK&#32;:&#32;Z_DATA_ERROR;
<anchor xml:id="_zpipe_8c_source_1l00148"/>00148 }
<anchor xml:id="_zpipe_8c_source_1l00149"/>00149 
<anchor xml:id="_zpipe_8c_source_1l00150"/>00150 <emphasis role="comment">/*&#32;report&#32;a&#32;zlib&#32;or&#32;i/o&#32;error&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00151"/>00151 <emphasis role="keywordtype">void</emphasis>&#32;zerr(<emphasis role="keywordtype">int</emphasis>&#32;ret)
<anchor xml:id="_zpipe_8c_source_1l00152"/>00152 {
<anchor xml:id="_zpipe_8c_source_1l00153"/>00153 &#32;&#32;&#32;&#32;fputs(<emphasis role="stringliteral">&quot;zpipe:&#32;&quot;</emphasis>,&#32;stderr);
<anchor xml:id="_zpipe_8c_source_1l00154"/>00154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ret)&#32;{
<anchor xml:id="_zpipe_8c_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Z_ERRNO:
<anchor xml:id="_zpipe_8c_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ferror(stdin))
<anchor xml:id="_zpipe_8c_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fputs(<emphasis role="stringliteral">&quot;error&#32;reading&#32;stdin\n&quot;</emphasis>,&#32;stderr);
<anchor xml:id="_zpipe_8c_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ferror(stdout))
<anchor xml:id="_zpipe_8c_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fputs(<emphasis role="stringliteral">&quot;error&#32;writing&#32;stdout\n&quot;</emphasis>,&#32;stderr);
<anchor xml:id="_zpipe_8c_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_zpipe_8c_source_1l00161"/>00161 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Z_STREAM_ERROR:
<anchor xml:id="_zpipe_8c_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fputs(<emphasis role="stringliteral">&quot;invalid&#32;compression&#32;level\n&quot;</emphasis>,&#32;stderr);
<anchor xml:id="_zpipe_8c_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_zpipe_8c_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Z_DATA_ERROR:
<anchor xml:id="_zpipe_8c_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fputs(<emphasis role="stringliteral">&quot;invalid&#32;or&#32;incomplete&#32;deflate&#32;data\n&quot;</emphasis>,&#32;stderr);
<anchor xml:id="_zpipe_8c_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_zpipe_8c_source_1l00167"/>00167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Z_MEM_ERROR:
<anchor xml:id="_zpipe_8c_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fputs(<emphasis role="stringliteral">&quot;out&#32;of&#32;memory\n&quot;</emphasis>,&#32;stderr);
<anchor xml:id="_zpipe_8c_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_zpipe_8c_source_1l00170"/>00170 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Z_VERSION_ERROR:
<anchor xml:id="_zpipe_8c_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fputs(<emphasis role="stringliteral">&quot;zlib&#32;version&#32;mismatch!\n&quot;</emphasis>,&#32;stderr);
<anchor xml:id="_zpipe_8c_source_1l00172"/>00172 &#32;&#32;&#32;&#32;}
<anchor xml:id="_zpipe_8c_source_1l00173"/>00173 }
<anchor xml:id="_zpipe_8c_source_1l00174"/>00174 
<anchor xml:id="_zpipe_8c_source_1l00175"/>00175 <emphasis role="comment">/*&#32;compress&#32;or&#32;decompress&#32;from&#32;stdin&#32;to&#32;stdout&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00176"/>00176 <emphasis role="keywordtype">int</emphasis>&#32;main(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)
<anchor xml:id="_zpipe_8c_source_1l00177"/>00177 {
<anchor xml:id="_zpipe_8c_source_1l00178"/>00178 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ret;
<anchor xml:id="_zpipe_8c_source_1l00179"/>00179 
<anchor xml:id="_zpipe_8c_source_1l00180"/>00180 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;avoid&#32;end-of-line&#32;conversions&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00181"/>00181 &#32;&#32;&#32;&#32;SET_BINARY_MODE(stdin);
<anchor xml:id="_zpipe_8c_source_1l00182"/>00182 &#32;&#32;&#32;&#32;SET_BINARY_MODE(stdout);
<anchor xml:id="_zpipe_8c_source_1l00183"/>00183 
<anchor xml:id="_zpipe_8c_source_1l00184"/>00184 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;do&#32;compression&#32;if&#32;no&#32;arguments&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;==&#32;1)&#32;{
<anchor xml:id="_zpipe_8c_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;def(stdin,&#32;stdout,&#32;Z_DEFAULT_COMPRESSION);
<anchor xml:id="_zpipe_8c_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ret&#32;!=&#32;Z_OK)
<anchor xml:id="_zpipe_8c_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zerr(ret);
<anchor xml:id="_zpipe_8c_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_zpipe_8c_source_1l00190"/>00190 &#32;&#32;&#32;&#32;}
<anchor xml:id="_zpipe_8c_source_1l00191"/>00191 
<anchor xml:id="_zpipe_8c_source_1l00192"/>00192 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;do&#32;decompression&#32;if&#32;-d&#32;specified&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00193"/>00193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;==&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-d&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="_zpipe_8c_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;inf(stdin,&#32;stdout);
<anchor xml:id="_zpipe_8c_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ret&#32;!=&#32;Z_OK)
<anchor xml:id="_zpipe_8c_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zerr(ret);
<anchor xml:id="_zpipe_8c_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_zpipe_8c_source_1l00198"/>00198 &#32;&#32;&#32;&#32;}
<anchor xml:id="_zpipe_8c_source_1l00199"/>00199 
<anchor xml:id="_zpipe_8c_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;otherwise,&#32;report&#32;usage&#32;*/</emphasis>
<anchor xml:id="_zpipe_8c_source_1l00201"/>00201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_zpipe_8c_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fputs(<emphasis role="stringliteral">&quot;zpipe&#32;usage:&#32;zpipe&#32;[-d]&#32;&lt;&#32;source&#32;&gt;&#32;dest\n&quot;</emphasis>,&#32;stderr);
<anchor xml:id="_zpipe_8c_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_zpipe_8c_source_1l00204"/>00204 &#32;&#32;&#32;&#32;}
<anchor xml:id="_zpipe_8c_source_1l00205"/>00205 }
</programlisting></section>
