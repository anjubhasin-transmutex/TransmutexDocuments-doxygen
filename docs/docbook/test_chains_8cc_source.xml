<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test_chains_8cc_source" xml:lang="en-US">
<title>testChains.cc</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/src/testChains.cc</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="_test_chains_8cc_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;cctype&gt;</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00008"/>00008 
<anchor xml:id="_test_chains_8cc_source_1l00009"/>00009 <emphasis role="keyword">using</emphasis>&#32;std::string;
<anchor xml:id="_test_chains_8cc_source_1l00010"/>00010 <emphasis role="keyword">using</emphasis>&#32;std::map;
<anchor xml:id="_test_chains_8cc_source_1l00011"/>00011 <emphasis role="keyword">using</emphasis>&#32;std::endl;
<anchor xml:id="_test_chains_8cc_source_1l00012"/>00012 <emphasis role="keyword">using</emphasis>&#32;std::cout;
<anchor xml:id="_test_chains_8cc_source_1l00013"/>00013 <emphasis role="keyword">using</emphasis>&#32;std::vector;
<anchor xml:id="_test_chains_8cc_source_1l00014"/>00014 <emphasis role="keyword">using</emphasis>&#32;std::ostringstream;
<anchor xml:id="_test_chains_8cc_source_1l00015"/>00015 
<anchor xml:id="_test_chains_8cc_source_1l00016"/>00016 
<anchor xml:id="_test_chains_8cc_source_1l00017"/>00017 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZA(<emphasis role="keywordtype">int</emphasis>&#32;jz,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ja,&#32;<emphasis role="keywordtype">int</emphasis>&#32;jso)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;jz*10000+ja*10+jso;};
<anchor xml:id="_test_chains_8cc_source_1l00018"/>00018 
<anchor xml:id="_test_chains_8cc_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&quot;TMXElements.hh&quot;</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00020"/>00020 <emphasis role="preprocessor">#include&#32;&quot;testBateman.hh&quot;</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00021"/>00021 
<anchor xml:id="_test_chains_8cc_source_1l00022"/>00022 <emphasis role="keywordtype">int</emphasis>&#32;main&#32;()&#32;{
<anchor xml:id="_test_chains_8cc_source_1l00023"/>00023 <emphasis role="comment">//</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00024"/>00024 &#32;&#32;<link linkend="_class_t_m_x_element">TMXElement</link>&#32;*curele;
<anchor xml:id="_test_chains_8cc_source_1l00025"/>00025 &#32;&#32;map&lt;int,&#32;TMXElement*&gt;::iterator&#32;it;
<anchor xml:id="_test_chains_8cc_source_1l00026"/>00026 <emphasis role="comment">//&#32;&#32;</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00027"/>00027 <emphasis role="comment">//&#32;Build&#32;the&#32;database</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00028"/>00028 <emphasis role="comment">//&#32;&#32;&#32;TMXElementStore::BuildElementDB();</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00029"/>00029 <emphasis role="comment">//</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00030"/>00030 <emphasis role="comment">//&#32;Check&#32;Bateman&#32;equations</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00031"/>00031 &#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&#32;Checking&#32;Bateman&#32;decay&quot;</emphasis>&#32;&lt;&lt;&#32;endl&#32;&lt;&lt;
<anchor xml:id="_test_chains_8cc_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;================================================================================================&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_test_chains_8cc_source_1l00033"/>00033 &#32;&#32;<link linkend="_classtest_bateman">testBateman</link>&#32;testBate;
<anchor xml:id="_test_chains_8cc_source_1l00034"/>00034 <emphasis role="comment">//</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00035"/>00035 <emphasis role="comment">//&#32;Check&#32;branching&#32;ratios</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00036"/>00036 &#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&#32;Checking&#32;the&#32;branching&#32;ratios&quot;</emphasis>&#32;&lt;&lt;&#32;endl&#32;&lt;&lt;
<anchor xml:id="_test_chains_8cc_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;================================================================================================&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_test_chains_8cc_source_1l00038"/>00038 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totbr&#32;=&#32;0;
<anchor xml:id="_test_chains_8cc_source_1l00039"/>00039 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totis&#32;=&#32;0;
<anchor xml:id="_test_chains_8cc_source_1l00040"/>00040 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(it&#32;=&#32;TMXElementStore::Store().begin();&#32;it&#32;!=&#32;TMXElementStore::Store().end();&#32;++it)&#32;{
<anchor xml:id="_test_chains_8cc_source_1l00041"/>00041 &#32;&#32;&#32;&#32;++totis;
<anchor xml:id="_test_chains_8cc_source_1l00042"/>00042 &#32;&#32;&#32;&#32;curele&#32;=&#32;it-&gt;second;
<anchor xml:id="_test_chains_8cc_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!curele-&gt;Stable())&#32;{
<anchor xml:id="_test_chains_8cc_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;vector&lt;TMXDecayChannel*&gt;&#32;decays&#32;=&#32;curele-&gt;DecayChannels();
<anchor xml:id="_test_chains_8cc_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;vector&lt;TMXDecayChannel*&gt;::iterator&#32;id;
<anchor xml:id="_test_chains_8cc_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;totrat&#32;=&#32;0.;
<anchor xml:id="_test_chains_8cc_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">id</emphasis>=decays.begin();&#32;<emphasis role="keywordtype">id</emphasis>&#32;!=&#32;decays.end();&#32;++id)&#32;{
<anchor xml:id="_test_chains_8cc_source_1l00048"/>00048 &#32;&#32;&#32;&#32;++totbr;
<anchor xml:id="_test_chains_8cc_source_1l00049"/>00049 &#32;&#32;&#32;&#32;totrat&#32;+=&#32;(*id)-&gt;BranchingRatio();
<anchor xml:id="_test_chains_8cc_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_test_chains_8cc_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fabs(totrat-1.)&#32;&gt;&#32;1.e-6)&#32;
<anchor xml:id="_test_chains_8cc_source_1l00052"/>00052 &#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;curele-&gt;Name()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;br&#32;total&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;totrat&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_test_chains_8cc_source_1l00053"/>00053 &#32;&#32;&#32;&#32;}
<anchor xml:id="_test_chains_8cc_source_1l00054"/>00054 &#32;&#32;}
<anchor xml:id="_test_chains_8cc_source_1l00055"/>00055 &#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Checked&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;totbr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;branching&#32;ratios&#32;for&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;totis&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;isotopes&quot;</emphasis>&#32;&lt;&lt;&#32;endl&#32;&lt;&lt;
<anchor xml:id="_test_chains_8cc_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;================================================================================================&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_test_chains_8cc_source_1l00057"/>00057 <emphasis role="comment">//</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00058"/>00058 <emphasis role="comment">//&#32;Check&#32;closure</emphasis>
<anchor xml:id="_test_chains_8cc_source_1l00059"/>00059 &#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&#32;Checking&#32;closure&#32;of&#32;the&#32;decay&#32;chains&quot;</emphasis>&#32;&lt;&lt;&#32;endl&#32;&lt;&lt;
<anchor xml:id="_test_chains_8cc_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;================================================================================================&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_test_chains_8cc_source_1l00061"/>00061 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(it&#32;=&#32;TMXElementStore::Store().begin();&#32;it&#32;!=&#32;TMXElementStore::Store().end();&#32;++it)&#32;{
<anchor xml:id="_test_chains_8cc_source_1l00062"/>00062 &#32;&#32;&#32;&#32;curele&#32;=&#32;it-&gt;second;
<anchor xml:id="_test_chains_8cc_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!curele-&gt;Stable())&#32;{
<anchor xml:id="_test_chains_8cc_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;vector&lt;TMXDecayChannel*&gt;&#32;decays&#32;=&#32;curele-&gt;DecayChannels();
<anchor xml:id="_test_chains_8cc_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;vector&lt;TMXDecayChannel*&gt;::iterator&#32;id;
<anchor xml:id="_test_chains_8cc_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">id</emphasis>=decays.begin();&#32;<emphasis role="keywordtype">id</emphasis>&#32;!=&#32;decays.end();&#32;++id)&#32;{
<anchor xml:id="_test_chains_8cc_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZAd&#32;=&#32;(*id)-&gt;IZA();
<anchor xml:id="_test_chains_8cc_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(IZAd&#32;!=&#32;-10000)
<anchor xml:id="_test_chains_8cc_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!TMXElementStore::GetElement(IZAd))
<anchor xml:id="_test_chains_8cc_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;curele-&gt;Name()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;curele-&gt;IZA()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&#32;decays&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(*id)-&gt;Decay()
<anchor xml:id="_test_chains_8cc_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;into&#32;non&#32;existent&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Name(IZAd)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;IZAd&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_test_chains_8cc_source_1l00072"/>00072 &#32;&#32;&#32;&#32;}
<anchor xml:id="_test_chains_8cc_source_1l00073"/>00073 &#32;&#32;&#32;&#32;}
<anchor xml:id="_test_chains_8cc_source_1l00074"/>00074 &#32;&#32;}
<anchor xml:id="_test_chains_8cc_source_1l00075"/>00075 &#32;&#32;
<anchor xml:id="_test_chains_8cc_source_1l00076"/>00076 &#32;&#32;
<anchor xml:id="_test_chains_8cc_source_1l00077"/>00077 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_test_chains_8cc_source_1l00078"/>00078 }
<anchor xml:id="_test_chains_8cc_source_1l00079"/>00079 
<anchor xml:id="_test_chains_8cc_source_1l00080"/>00080 
</programlisting></section>
