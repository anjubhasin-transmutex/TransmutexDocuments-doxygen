<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__extract_t_h2_8_c_source" xml:lang="en-US">
<title>ExtractTH2.C</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/tools/ExtractTH2.C</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__extract_t_h2_8_c_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__extract_t_h2_8_c_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="__extract_t_h2_8_c_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__extract_t_h2_8_c_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="__extract_t_h2_8_c_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="__extract_t_h2_8_c_source_1l00006"/>00006 
<anchor xml:id="__extract_t_h2_8_c_source_1l00007"/>00007 <emphasis role="keywordtype">int</emphasis>&#32;ExtractTH2(std::string&#32;filename,&#32;std::string&#32;outputFileName)&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00008"/>00008 &#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="__extract_t_h2_8_c_source_1l00009"/>00009 &#32;&#32;&#32;&#32;std::ifstream&#32;infile(filename);
<anchor xml:id="__extract_t_h2_8_c_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;bin;
<anchor xml:id="__extract_t_h2_8_c_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;value;
<anchor xml:id="__extract_t_h2_8_c_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos;
<anchor xml:id="__extract_t_h2_8_c_source_1l00013"/>00013 &#32;&#32;&#32;&#32;std::string&#32;delimiter&#32;=&#32;<emphasis role="stringliteral">&quot;-&gt;SetBinContent(&quot;</emphasis>;
<anchor xml:id="__extract_t_h2_8_c_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;bin1,&#32;min1,&#32;max1,&#32;bin2,&#32;min2,&#32;max2;
<anchor xml:id="__extract_t_h2_8_c_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;x,&#32;y;
<anchor xml:id="__extract_t_h2_8_c_source_1l00016"/>00016 
<anchor xml:id="__extract_t_h2_8_c_source_1l00017"/>00017 &#32;&#32;&#32;&#32;ofstream&#32;outputFile;
<anchor xml:id="__extract_t_h2_8_c_source_1l00018"/>00018 &#32;&#32;&#32;&#32;outputFile.open(outputFileName);
<anchor xml:id="__extract_t_h2_8_c_source_1l00019"/>00019 
<anchor xml:id="__extract_t_h2_8_c_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(infile,&#32;line))&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(<emphasis role="stringliteral">&quot;new&#32;TH2D&quot;</emphasis>)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;line&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__extract_t_h2_8_c_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;binning;
<anchor xml:id="__extract_t_h2_8_c_source_1l00024"/>00024 
<anchor xml:id="__extract_t_h2_8_c_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;0;
<anchor xml:id="__extract_t_h2_8_c_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;token;
<anchor xml:id="__extract_t_h2_8_c_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
<anchor xml:id="__extract_t_h2_8_c_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;delimiterTH2&#32;=&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="__extract_t_h2_8_c_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((pos&#32;=&#32;line.find(delimiterTH2))&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token&#32;=&#32;line.substr(0,&#32;pos);
<anchor xml:id="__extract_t_h2_8_c_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(2&#32;&lt;=&#32;count)&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binning.push_back(std::stod(token));
<anchor xml:id="__extract_t_h2_8_c_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_t_h2_8_c_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line.erase(0,&#32;pos&#32;+&#32;1);
<anchor xml:id="__extract_t_h2_8_c_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
<anchor xml:id="__extract_t_h2_8_c_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_t_h2_8_c_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binning.push_back(std::stod(line.substr(0,&#32;line.find(<emphasis role="stringliteral">&quot;);&quot;</emphasis>))));
<anchor xml:id="__extract_t_h2_8_c_source_1l00038"/>00038 
<anchor xml:id="__extract_t_h2_8_c_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bin1&#32;=&#32;binning[0],&#32;min1&#32;=&#32;binning[1],&#32;max1&#32;=&#32;binning[2],
<anchor xml:id="__extract_t_h2_8_c_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bin2&#32;=&#32;binning[3],&#32;min2&#32;=&#32;binning[4],&#32;max2&#32;=&#32;binning[5];
<anchor xml:id="__extract_t_h2_8_c_source_1l00041"/>00041 
<anchor xml:id="__extract_t_h2_8_c_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;bin1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;min1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;max1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;bin2&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;min2&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;max2&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__extract_t_h2_8_c_source_1l00043"/>00043 
<anchor xml:id="__extract_t_h2_8_c_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_t_h2_8_c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(delimiter)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;linesize&#32;=&#32;line.size();
<anchor xml:id="__extract_t_h2_8_c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line&#32;=&#32;line.substr(line.find(delimiter)&#32;+&#32;delimiter.size(),&#32;line.size());
<anchor xml:id="__extract_t_h2_8_c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;line.find(<emphasis role="stringliteral">&quot;,&quot;</emphasis>);
<anchor xml:id="__extract_t_h2_8_c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bin&#32;=&#32;std::stol(line.substr(0,&#32;pos));
<anchor xml:id="__extract_t_h2_8_c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line.erase(0,&#32;pos&#32;+&#32;1);
<anchor xml:id="__extract_t_h2_8_c_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;std::stod(line.substr(0,&#32;line.find(<emphasis role="stringliteral">&quot;);&quot;</emphasis>)));
<anchor xml:id="__extract_t_h2_8_c_source_1l00052"/>00052 
<anchor xml:id="__extract_t_h2_8_c_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;(bin&#32;%&#32;((long)bin1+2)-1)&#32;*&#32;(max1-min1)&#32;/&#32;bin1&#32;+&#32;min1;
<anchor xml:id="__extract_t_h2_8_c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;(bin&#32;/&#32;((long)bin1+2)-1)&#32;*&#32;(max2-min2)&#32;/&#32;bin2&#32;+&#32;min2;
<anchor xml:id="__extract_t_h2_8_c_source_1l00055"/>00055 
<anchor xml:id="__extract_t_h2_8_c_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;x&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;y&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;value&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__extract_t_h2_8_c_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_t_h2_8_c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_t_h2_8_c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;outputFile.close();
<anchor xml:id="__extract_t_h2_8_c_source_1l00060"/>00060 
<anchor xml:id="__extract_t_h2_8_c_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__extract_t_h2_8_c_source_1l00062"/>00062 }
<anchor xml:id="__extract_t_h2_8_c_source_1l00063"/>00063 
<anchor xml:id="__extract_t_h2_8_c_source_1l00064"/>00064 
<anchor xml:id="__extract_t_h2_8_c_source_1l00065"/>00065 <emphasis role="keywordtype">int</emphasis>&#32;ExtractTH1(std::string&#32;filename,&#32;std::string&#32;outputFileName)&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00066"/>00066 &#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="__extract_t_h2_8_c_source_1l00067"/>00067 &#32;&#32;&#32;&#32;std::ifstream&#32;infile(filename);
<anchor xml:id="__extract_t_h2_8_c_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;bin;
<anchor xml:id="__extract_t_h2_8_c_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;value;
<anchor xml:id="__extract_t_h2_8_c_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos;
<anchor xml:id="__extract_t_h2_8_c_source_1l00071"/>00071 &#32;&#32;&#32;&#32;std::string&#32;delimiter&#32;=&#32;<emphasis role="stringliteral">&quot;-&gt;SetBinContent(&quot;</emphasis>;
<anchor xml:id="__extract_t_h2_8_c_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;bin1,&#32;min1,&#32;max1;
<anchor xml:id="__extract_t_h2_8_c_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;x;
<anchor xml:id="__extract_t_h2_8_c_source_1l00074"/>00074 
<anchor xml:id="__extract_t_h2_8_c_source_1l00075"/>00075 &#32;&#32;&#32;&#32;ofstream&#32;outputFile;
<anchor xml:id="__extract_t_h2_8_c_source_1l00076"/>00076 &#32;&#32;&#32;&#32;outputFile.open(outputFileName);
<anchor xml:id="__extract_t_h2_8_c_source_1l00077"/>00077 
<anchor xml:id="__extract_t_h2_8_c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(infile,&#32;line))&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(<emphasis role="stringliteral">&quot;new&#32;TH1D&quot;</emphasis>)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;line&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__extract_t_h2_8_c_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;binning;
<anchor xml:id="__extract_t_h2_8_c_source_1l00082"/>00082 
<anchor xml:id="__extract_t_h2_8_c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;0;
<anchor xml:id="__extract_t_h2_8_c_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;token;
<anchor xml:id="__extract_t_h2_8_c_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0;
<anchor xml:id="__extract_t_h2_8_c_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;delimiterTH2&#32;=&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="__extract_t_h2_8_c_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((pos&#32;=&#32;line.find(delimiterTH2))&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token&#32;=&#32;line.substr(0,&#32;pos);
<anchor xml:id="__extract_t_h2_8_c_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(2&#32;&lt;=&#32;count)&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binning.push_back(std::stod(token));
<anchor xml:id="__extract_t_h2_8_c_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_t_h2_8_c_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line.erase(0,&#32;pos&#32;+&#32;1);
<anchor xml:id="__extract_t_h2_8_c_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
<anchor xml:id="__extract_t_h2_8_c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_t_h2_8_c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binning.push_back(std::stod(line.substr(0,&#32;line.find(<emphasis role="stringliteral">&quot;);&quot;</emphasis>))));
<anchor xml:id="__extract_t_h2_8_c_source_1l00096"/>00096 
<anchor xml:id="__extract_t_h2_8_c_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bin1&#32;=&#32;binning[0],&#32;min1&#32;=&#32;binning[1],&#32;max1&#32;=&#32;binning[2];
<anchor xml:id="__extract_t_h2_8_c_source_1l00098"/>00098 
<anchor xml:id="__extract_t_h2_8_c_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;bin1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;min1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;max1&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__extract_t_h2_8_c_source_1l00100"/>00100 
<anchor xml:id="__extract_t_h2_8_c_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_t_h2_8_c_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(delimiter)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_t_h2_8_c_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;linesize&#32;=&#32;line.size();
<anchor xml:id="__extract_t_h2_8_c_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line&#32;=&#32;line.substr(line.find(delimiter)&#32;+&#32;delimiter.size(),&#32;line.size());
<anchor xml:id="__extract_t_h2_8_c_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;line.find(<emphasis role="stringliteral">&quot;,&quot;</emphasis>);
<anchor xml:id="__extract_t_h2_8_c_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bin&#32;=&#32;std::stol(line.substr(0,&#32;pos));
<anchor xml:id="__extract_t_h2_8_c_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line.erase(0,&#32;pos&#32;+&#32;1);
<anchor xml:id="__extract_t_h2_8_c_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;std::stod(line.substr(0,&#32;line.find(<emphasis role="stringliteral">&quot;);&quot;</emphasis>)));
<anchor xml:id="__extract_t_h2_8_c_source_1l00109"/>00109 
<anchor xml:id="__extract_t_h2_8_c_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;(bin&#32;%&#32;((long)bin1+2)-1)&#32;*&#32;(max1-min1)&#32;/&#32;bin1&#32;+&#32;min1;
<anchor xml:id="__extract_t_h2_8_c_source_1l00111"/>00111 
<anchor xml:id="__extract_t_h2_8_c_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;x&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;value&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__extract_t_h2_8_c_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_t_h2_8_c_source_1l00114"/>00114 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_t_h2_8_c_source_1l00115"/>00115 &#32;&#32;&#32;&#32;outputFile.close();
<anchor xml:id="__extract_t_h2_8_c_source_1l00116"/>00116 
<anchor xml:id="__extract_t_h2_8_c_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__extract_t_h2_8_c_source_1l00118"/>00118 }
</programlisting></section>
