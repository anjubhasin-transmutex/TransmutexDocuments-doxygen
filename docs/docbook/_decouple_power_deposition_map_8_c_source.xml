<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__decouple_power_deposition_map_8_c_source" xml:lang="en-US">
<title>DecouplePowerDepositionMap.C</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/tools/DecouplePowerDepositionMap.C</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00006"/>00006 
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00007"/>00007 std::vector&lt;std::string&gt;&#32;split(std::string&#32;str)&#32;{
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00008"/>00008 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;line;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00009"/>00009 &#32;&#32;&#32;&#32;istringstream&#32;buf(str);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>&#32;word;&#32;buf&#32;&gt;&gt;&#32;word;)
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line.push_back(word);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(line);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00013"/>00013 }
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00014"/>00014 
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00015"/>00015 <emphasis role="keywordtype">int</emphasis>&#32;DecouplePowerDepositionMap(std::string&#32;filename1,&#32;std::string&#32;filename2)&#32;{
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00016"/>00016 
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00017"/>00017 &#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00018"/>00018 &#32;&#32;&#32;&#32;std::ifstream&#32;infile1(filename1);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00019"/>00019 
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00020"/>00020 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;vec_file1;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00021"/>00021 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;vec_file2;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00022"/>00022 
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(infile1,&#32;line))&#32;{
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec_file1.push_back(line);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00025"/>00025 &#32;&#32;&#32;&#32;}
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00026"/>00026 
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00027"/>00027 &#32;&#32;&#32;&#32;std::ifstream&#32;infile2(filename2);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(infile2,&#32;line))&#32;{
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec_file2.push_back(line);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00030"/>00030 &#32;&#32;&#32;&#32;}
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00031"/>00031 
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;rho1&#32;=&#32;10.23,&#32;rho2&#32;=&#32;7.87;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;k,&#32;E1,&#32;E2;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00034"/>00034 
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00035"/>00035 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;line1,&#32;line2;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00036"/>00036 &#32;&#32;&#32;&#32;std::string&#32;input1,&#32;input2;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;l1&#32;=&#32;0;&#32;l1&#32;&lt;&#32;vec_file1.size();&#32;l1++)&#32;{
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line1&#32;=&#32;split(vec_file1[l1]);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input1&#32;=&#32;line1[0]+<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>+line1[1]+<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;l2&#32;=&#32;0;&#32;l2&#32;&lt;&#32;vec_file2.size();&#32;l2++)&#32;{
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line2&#32;=&#32;split(vec_file2[l2]);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input2&#32;=&#32;line2[0]+<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>+line2[1]+<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(input1&#32;==&#32;input2)&#32;{
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E1&#32;=&#32;std::stod(line1[2]);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E2&#32;=&#32;std::stod(line2[2]);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k&#32;=&#32;(E2/E1)&#32;*&#32;(rho1/rho2);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec_file1[l1]&#32;=&#32;input1&#32;+&#32;std::to_string(E1&#32;*&#32;(1+k));
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec_file2[l2]&#32;=&#32;input2&#32;+&#32;std::to_string(E2&#32;*&#32;(1+1/k));
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00052"/>00052 &#32;&#32;&#32;&#32;}
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00053"/>00053 
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;ofstream&#32;outputFile1;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00055"/>00055 &#32;&#32;&#32;&#32;outputFile1.open(filename1+<emphasis role="stringliteral">&quot;.out&quot;</emphasis>);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;vec_file1.size();&#32;i++)&#32;{
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile1&#32;&lt;&lt;&#32;vec_file1[i]&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;}
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00059"/>00059 
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00060"/>00060 &#32;&#32;&#32;&#32;ofstream&#32;outputFile2;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00061"/>00061 &#32;&#32;&#32;&#32;outputFile2.open(filename2+<emphasis role="stringliteral">&quot;.out&quot;</emphasis>);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;vec_file2.size();&#32;i++)&#32;{
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile2&#32;&lt;&lt;&#32;vec_file2[i]&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00064"/>00064 &#32;&#32;&#32;&#32;}
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00065"/>00065 
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(0);
<anchor xml:id="__decouple_power_deposition_map_8_c_source_1l00067"/>00067 }
</programlisting></section>
