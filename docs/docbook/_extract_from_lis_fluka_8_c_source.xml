<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__extract_from_lis_fluka_8_c_source" xml:lang="en-US">
<title>ExtractFromLisFluka.C</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/tools/ExtractFromLisFluka.C</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00008"/>00008 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00009"/>00009 <emphasis role="preprocessor">#define&#32;INF&#32;100000000.</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00010"/>00010 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00011"/>00011 <emphasis role="keywordtype">int</emphasis>&#32;ExtractSpectraFromFluka(std::string&#32;inputFileName)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00012"/>00012 &#32;&#32;&#32;&#32;std::string&#32;line,&#32;lowBinE,&#32;uppBinE,&#32;value,&#32;error;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00013"/>00013 &#32;&#32;&#32;&#32;std::ifstream&#32;inputFile(inputFileName);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00014"/>00014 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lineCount&#32;=&#32;0;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;result&#32;=&#32;0.;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;rms&#32;=&#32;0.;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(inputFile,&#32;line))&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::istringstream&#32;iss(line);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iss&#32;&gt;&gt;&#32;lowBinE&#32;&gt;&gt;&#32;uppBinE&#32;&gt;&gt;&#32;value&#32;&gt;&gt;&#32;error;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00021"/>00021 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lowBinE.find(<emphasis role="stringliteral">&quot;#&quot;</emphasis>)&#32;==&#32;std::string::npos&#32;&amp;&amp;&#32;lineCount&#32;&gt;=&#32;2)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::stod(error)&#32;!=&#32;0.)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rms&#32;+=&#32;1.&#32;/&#32;(std::stod(error)*0.01&#32;*&#32;std::stod(error)*0.01);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;rms&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;+=&#32;std::stod(value)&#32;*&#32;(std::stod(uppBinE)-std::stod(lowBinE));
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lowBinE.find(<emphasis role="stringliteral">&quot;#&quot;</emphasis>)&#32;!=&#32;std::string::npos&#32;&amp;&amp;&#32;lineCount&#32;&gt;=&#32;2)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;&quot;End&quot;&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineCount++;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00034"/>00034 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00035"/>00035 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00036"/>00036 &#32;&#32;&#32;&#32;inputFile.close();
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00037"/>00037 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00038"/>00038 &#32;&#32;&#32;&#32;rms&#32;=&#32;result/std::sqrt(rms);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00039"/>00039 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Result:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;result&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;+-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rms&#32;&lt;&lt;&#32;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(0);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00041"/>00041 }
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00042"/>00042 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00043"/>00043 <emphasis role="keywordtype">double</emphasis>&#32;norm(<emphasis role="keywordtype">double</emphasis>&#32;x1,&#32;<emphasis role="keywordtype">double</emphasis>&#32;x2,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y1,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y2)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(std::sqrt((x1-x2)*(x1-x2)&#32;+&#32;(y1-y2)*(y1-y2)));
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00045"/>00045 }
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00046"/>00046 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00047"/>00047 <emphasis role="keywordtype">double</emphasis>&#32;areaTriangle(<emphasis role="keywordtype">double</emphasis>&#32;x1,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y1,&#32;<emphasis role="keywordtype">double</emphasis>&#32;x2,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y2,&#32;<emphasis role="keywordtype">double</emphasis>&#32;x3,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y3)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Heron&#32;Formula</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;a&#32;=&#32;norm(x1,&#32;x2,&#32;y1,&#32;y2);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;b&#32;=&#32;norm(x1,&#32;x3,&#32;y1,&#32;y3);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;c&#32;=&#32;norm(x2,&#32;x3,&#32;y2,&#32;y3);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;s&#32;=&#32;(a+b+c)/2.;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;area&#32;=&#32;std::sqrt(s*(s-a)*(s-b)*(s-c));
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(area);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00055"/>00055 }
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00056"/>00056 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00057"/>00057 <emphasis role="keywordtype">double</emphasis>&#32;areaQuadrilateral(<emphasis role="keywordtype">double</emphasis>&#32;x1,&#32;<emphasis role="keywordtype">double</emphasis>&#32;x2,&#32;<emphasis role="keywordtype">double</emphasis>&#32;x3,&#32;<emphasis role="keywordtype">double</emphasis>&#32;x4,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y1,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y2,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y3,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y4)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;areaTrig1&#32;=&#32;areaTriangle(x1,&#32;y1,&#32;x2,&#32;y2,&#32;x3,&#32;y3);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;areaTrig2&#32;=&#32;areaTriangle(x1,&#32;y1,&#32;x3,&#32;y3,&#32;x4,&#32;y4);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00060"/>00060 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;areaTrig3&#32;=&#32;areaTriangle(x4,&#32;y4,&#32;x1,&#32;y1,&#32;x2,&#32;y2);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;areaTrig4&#32;=&#32;areaTriangle(x4,&#32;y4,&#32;x3,&#32;y3,&#32;x2,&#32;y2);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(areaTrig1&#32;+&#32;areaTrig2&#32;==&#32;areaTrig3&#32;+&#32;areaTrig4)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(areaTrig1+areaTrig2);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00065"/>00065 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00066"/>00066 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(areaTriangle(x1,&#32;y1,&#32;x2,&#32;y2,&#32;x4,&#32;y4)+areaTriangle(x1,&#32;y1,&#32;x3,&#32;y3,&#32;x4,&#32;y4));
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00068"/>00068 }
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00069"/>00069 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00070"/>00070 <emphasis role="keywordtype">double</emphasis>&#32;isInQuadrilateral(<emphasis role="keywordtype">double</emphasis>&#32;x,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y,&#32;<emphasis role="keywordtype">double</emphasis>&#32;x1,&#32;<emphasis role="keywordtype">double</emphasis>&#32;x2,&#32;<emphasis role="keywordtype">double</emphasis>&#32;x3,&#32;<emphasis role="keywordtype">double</emphasis>&#32;x4,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y1,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y2,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y3,&#32;<emphasis role="keywordtype">double</emphasis>&#32;y4)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;areaTrig1&#32;=&#32;areaTriangle(x,&#32;y,&#32;x1,&#32;y1,&#32;x2,&#32;y2);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;areaTrig2&#32;=&#32;areaTriangle(x,&#32;y,&#32;x2,&#32;y2,&#32;x3,&#32;y3);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;areaTrig3&#32;=&#32;areaTriangle(x,&#32;y,&#32;x3,&#32;y3,&#32;x4,&#32;y4);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;areaTrig4&#32;=&#32;areaTriangle(x,&#32;y,&#32;x4,&#32;y4,&#32;x1,&#32;y1);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;areaQuad0&#32;=&#32;areaQuadrilateral(x1,&#32;x2,&#32;x3,&#32;x4,&#32;y1,&#32;y2,&#32;y3,&#32;y4);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;sumTrig&#32;=&#32;areaTrig1+areaTrig2+areaTrig3+areaTrig4;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(areaQuad0&#32;==&#32;sumTrig);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00078"/>00078 }
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00079"/>00079 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00080"/>00080 <emphasis role="comment">//</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00081"/>00081 <emphasis role="comment">//&#32;A&#32;C++&#32;program&#32;to&#32;check&#32;if&#32;a&#32;given&#32;point&#32;lies&#32;inside&#32;a&#32;given&#32;polygon</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00082"/>00082 <emphasis role="comment">//&#32;Refer&#32;https://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00083"/>00083 <emphasis role="comment">//&#32;for&#32;explanation&#32;of&#32;functions&#32;onSegment(),&#32;orientation()&#32;and&#32;doIntersect()</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00084"/>00084 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00085"/><link linkend="_class_point">00085</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_point">Point</link>&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_point">Point</link>(<emphasis role="keywordtype">double</emphasis>&#32;ix,&#32;<emphasis role="keywordtype">double</emphasis>&#32;iy);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00088"/>00088 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;x;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;y;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00091"/>00091 };
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00092"/>00092 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00093"/>00093 <emphasis role="keyword">inline</emphasis>&#32;Point::Point(<emphasis role="keywordtype">double</emphasis>&#32;ix,&#32;<emphasis role="keywordtype">double</emphasis>&#32;iy)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;x&#32;=&#32;ix;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;y&#32;=&#32;iy;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00096"/>00096 }
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00097"/>00097 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00098"/>00098 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00099"/>00099 <emphasis role="comment">//&#32;Given&#32;three&#32;colinear&#32;points&#32;p,&#32;q,&#32;r,&#32;the&#32;function&#32;checks&#32;if</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00100"/>00100 <emphasis role="comment">//&#32;point&#32;q&#32;lies&#32;on&#32;line&#32;segment&#32;&apos;pr&apos;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00101"/>00101 <emphasis role="keywordtype">bool</emphasis>&#32;onSegment(<link linkend="_class_point">Point</link>&#32;p,&#32;<link linkend="_class_point">Point</link>&#32;q,&#32;<link linkend="_class_point">Point</link>&#32;r)
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00102"/>00102 {
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(q.x&#32;&lt;=&#32;max(p.x,&#32;r.x)&#32;&amp;&amp;&#32;q.x&#32;&gt;=&#32;min(p.x,&#32;r.x)&#32;&amp;&amp;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q.y&#32;&lt;=&#32;max(p.y,&#32;r.y)&#32;&amp;&amp;&#32;q.y&#32;&gt;=&#32;min(p.y,&#32;r.y))
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00107"/>00107 }
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00108"/>00108 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00109"/>00109 <emphasis role="comment">//&#32;To&#32;find&#32;orientation&#32;of&#32;ordered&#32;triplet&#32;(p,&#32;q,&#32;r).</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00110"/>00110 <emphasis role="comment">//&#32;The&#32;function&#32;returns&#32;following&#32;values</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00111"/>00111 <emphasis role="comment">//&#32;0&#32;--&gt;&#32;p,&#32;q&#32;and&#32;r&#32;are&#32;colinear</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00112"/>00112 <emphasis role="comment">//&#32;1&#32;--&gt;&#32;Clockwise</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00113"/>00113 <emphasis role="comment">//&#32;2&#32;--&gt;&#32;Counterclockwise</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00114"/>00114 <emphasis role="keywordtype">int</emphasis>&#32;orientation(<link linkend="_class_point">Point</link>&#32;p,&#32;<link linkend="_class_point">Point</link>&#32;q,&#32;<link linkend="_class_point">Point</link>&#32;r)
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00115"/>00115 {
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;val&#32;=&#32;(q.y&#32;-&#32;p.y)&#32;*&#32;(r.x&#32;-&#32;q.x)&#32;-
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(q.x&#32;-&#32;p.x)&#32;*&#32;(r.y&#32;-&#32;q.y);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00118"/>00118 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;<emphasis role="comment">//&#32;colinear</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00120"/>00120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(val&#32;&gt;&#32;0)?&#32;1:&#32;2;&#32;<emphasis role="comment">//&#32;clock&#32;or&#32;counterclock&#32;wise</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00121"/>00121 }
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00122"/>00122 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00123"/>00123 <emphasis role="comment">//&#32;The&#32;function&#32;that&#32;returns&#32;true&#32;if&#32;line&#32;segment&#32;&apos;p1q1&apos;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00124"/>00124 <emphasis role="comment">//&#32;and&#32;&apos;p2q2&apos;&#32;intersect.</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00125"/>00125 <emphasis role="keywordtype">bool</emphasis>&#32;doIntersect(<link linkend="_class_point">Point</link>&#32;p1,&#32;<link linkend="_class_point">Point</link>&#32;q1,&#32;<link linkend="_class_point">Point</link>&#32;p2,&#32;<link linkend="_class_point">Point</link>&#32;q2)
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00126"/>00126 {
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;four&#32;orientations&#32;needed&#32;for&#32;general&#32;and</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00128"/>00128 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;special&#32;cases</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;o1&#32;=&#32;orientation(p1,&#32;q1,&#32;p2);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00130"/>00130 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;o2&#32;=&#32;orientation(p1,&#32;q1,&#32;q2);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00131"/>00131 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;o3&#32;=&#32;orientation(p2,&#32;q2,&#32;p1);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00132"/>00132 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;o4&#32;=&#32;orientation(p2,&#32;q2,&#32;q1);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00133"/>00133 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;General&#32;case</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(o1&#32;!=&#32;o2&#32;&amp;&amp;&#32;o3&#32;!=&#32;o4)
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00137"/>00137 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00138"/>00138 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Special&#32;Cases</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;p1,&#32;q1&#32;and&#32;p2&#32;are&#32;colinear&#32;and&#32;p2&#32;lies&#32;on&#32;segment&#32;p1q1</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(o1&#32;==&#32;0&#32;&amp;&amp;&#32;onSegment(p1,&#32;p2,&#32;q1))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00141"/>00141 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00142"/>00142 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;p1,&#32;q1&#32;and&#32;p2&#32;are&#32;colinear&#32;and&#32;q2&#32;lies&#32;on&#32;segment&#32;p1q1</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00143"/>00143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(o2&#32;==&#32;0&#32;&amp;&amp;&#32;onSegment(p1,&#32;q2,&#32;q1))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00144"/>00144 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;p2,&#32;q2&#32;and&#32;p1&#32;are&#32;colinear&#32;and&#32;p1&#32;lies&#32;on&#32;segment&#32;p2q2</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00146"/>00146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(o3&#32;==&#32;0&#32;&amp;&amp;&#32;onSegment(p2,&#32;p1,&#32;q2))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00147"/>00147 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00148"/>00148 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;p2,&#32;q2&#32;and&#32;q1&#32;are&#32;colinear&#32;and&#32;q1&#32;lies&#32;on&#32;segment&#32;p2q2</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00149"/>00149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(o4&#32;==&#32;0&#32;&amp;&amp;&#32;onSegment(p2,&#32;q1,&#32;q2))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00150"/>00150 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00151"/>00151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="comment">//&#32;Doesn&apos;t&#32;fall&#32;in&#32;any&#32;of&#32;the&#32;above&#32;cases</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00152"/>00152 }
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00153"/>00153 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00154"/>00154 <emphasis role="comment">//&#32;Returns&#32;true&#32;if&#32;the&#32;point&#32;p&#32;lies&#32;inside&#32;the&#32;polygon[]&#32;with&#32;n&#32;vertices</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00155"/>00155 <emphasis role="keywordtype">bool</emphasis>&#32;isInside(std::vector&lt;Point&gt;&#32;polygon,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<link linkend="_class_point">Point</link>&#32;p)
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00156"/>00156 {
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;must&#32;be&#32;at&#32;least&#32;3&#32;vertices&#32;in&#32;polygon[]</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;&#32;3)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00159"/>00159 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00160"/>00160 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;point&#32;for&#32;line&#32;segment&#32;from&#32;p&#32;to&#32;infinite</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00161"/>00161 &#32;&#32;&#32;&#32;<link linkend="_class_point">Point</link>&#32;extreme&#32;=&#32;{INF,&#32;p.y};
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00162"/>00162 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00163"/>00163 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Count&#32;intersections&#32;of&#32;the&#32;above&#32;line&#32;with&#32;sides&#32;of&#32;polygon</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;0,&#32;i&#32;=&#32;0;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00165"/>00165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00166"/>00166 &#32;&#32;&#32;&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;next&#32;=&#32;(i+1)%n;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00168"/>00168 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;line&#32;segment&#32;from&#32;&apos;p&apos;&#32;to&#32;&apos;extreme&apos;&#32;intersects</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;the&#32;line&#32;segment&#32;from&#32;&apos;polygon[i]&apos;&#32;to&#32;&apos;polygon[next]&apos;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(doIntersect(polygon[i],&#32;polygon[next],&#32;p,&#32;extreme))
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;point&#32;&apos;p&apos;&#32;is&#32;colinear&#32;with&#32;line&#32;segment&#32;&apos;i-next&apos;,</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;then&#32;check&#32;if&#32;it&#32;lies&#32;on&#32;segment.&#32;If&#32;it&#32;lies,&#32;return&#32;true,</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;false</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(orientation(polygon[i],&#32;p,&#32;polygon[next])&#32;==&#32;0)
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;onSegment(polygon[i],&#32;p,&#32;polygon[next]);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00178"/>00178 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;next;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00182"/>00182 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;!=&#32;0);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00183"/>00183 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00184"/>00184 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;true&#32;if&#32;count&#32;is&#32;odd,&#32;false&#32;otherwise</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count&amp;1;&#32;<emphasis role="comment">//&#32;Same&#32;as&#32;(count%2&#32;==&#32;1)</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00186"/>00186 }
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00187"/>00187 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00188"/>00188 <emphasis role="keywordtype">bool</emphasis>&#32;isPointInBeamWindow(<emphasis role="keywordtype">double</emphasis>&#32;r,&#32;<emphasis role="keywordtype">double</emphasis>&#32;z)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nOuter_beamWindow&#32;=&#32;29,&#32;nInner_beamWindow&#32;=&#32;29;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00190"/>00190 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00191"/>00191 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;*outerBeamWindowArray_R&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>[nOuter_beamWindow]{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.,&#32;5.62237292,&#32;17.40127994,&#32;26.52168659,&#32;35.61478663,&#32;43.09679687,&#32;50.16920801,&#32;53.03640172,&#32;54.04674617,&#32;54.5928783,&#32;54.87405841,&#32;&#32;&#32;54.87405841,&#32;&#32;&#32;56.06743506,&#32;&#32;&#32;58.85270895,&#32;&#32;&#32;61.942226,&#32;66.47125223,&#32;&#32;&#32;71.44105465,&#32;&#32;&#32;77.83080063,&#32;&#32;&#32;82.69137662,&#32;&#32;&#32;91.1291181,&#32;98.20152924,&#32;&#32;108.5780398,&#32;&#32;&#32;116.688102,&#32;&#32;&#32;&#32;124.44317831,&#32;&#32;127.36498523,&#32;128.8941552,&#32;&#32;129.49490055,&#32;130.,&#32;0.
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00193"/>00193 &#32;&#32;&#32;&#32;};
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00194"/>00194 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;*outerBeamWindowArray_Z&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>[nOuter_beamWindow]{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.,&#32;6.15445179,&#32;18.41241999,&#32;30.64577981,&#32;46.10131921,&#32;63.4956277,&#32;&#32;&#32;89.0819182,&#32;&#32;110.5995243,&#32;&#32;126.49196942,&#32;144.78739592,&#32;153.94809958,&#32;420.56091873,&#32;455.29082101,&#32;472.38475682,&#32;484.49358455,&#32;499.82789658,&#32;513.6996528,&#32;&#32;527.29834295,&#32;535.54493818,&#32;547.77829799,&#32;557.33561035,&#32;573.69226778,&#32;589.33895343,&#32;609.81890848,&#32;621.86112204,&#32;632.18301938,&#32;651.02457803,&#32;675.,&#32;675.
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00196"/>00196 &#32;&#32;&#32;&#32;};
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00197"/>00197 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00198"/>00198 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;*innerBeamWindowArray_R&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>[nInner_beamWindow]{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.,&#32;3.1403818262218817,&#32;6.784843050009503,&#32;11.666414964440676,&#32;15.845842973371509,&#32;23.288164756191573,&#32;31.983839377202006,&#32;38.920465315336415,&#32;45.59157447114981,&#32;48.24674229435909,&#32;49.37661523646875,&#32;49.77346379270455,&#32;50.,&#32;0.
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00200"/>00200 &#32;&#32;&#32;&#32;};
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00201"/>00201 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;*innerBeamWindowArray_Z&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>[nInner_beamWindow]{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5.484541593287327,&#32;9.011394136142396,&#32;13.023645024716172,&#32;19.042021357576765,&#32;24.358253784936952,&#32;34.919152933811475,&#32;50.086799123894835,&#32;66.61521882337331,&#32;91.44103797038103,&#32;112.01858860025379,&#32;130.82357264052706,&#32;165.1551346622316,&#32;675.,&#32;675.
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00203"/>00203 &#32;&#32;&#32;&#32;};
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00204"/>00204 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00205"/>00205 &#32;&#32;&#32;&#32;std::vector&lt;Point&gt;&#32;innerBeamWindow_polygon;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00206"/>00206 &#32;&#32;&#32;&#32;std::vector&lt;Point&gt;&#32;outerBeamWindow_polygon;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00207"/>00207 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nInner_beamWindow;&#32;i++)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_point">Point</link>&#32;p(innerBeamWindowArray_R[i],&#32;innerBeamWindowArray_Z[i]);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;innerBeamWindow_polygon.push_back(p);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00210"/>00210 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nOuter_beamWindow;&#32;i++)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_point">Point</link>&#32;p(outerBeamWindowArray_R[i],&#32;outerBeamWindowArray_Z[i]);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outerBeamWindow_polygon.push_back(p);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00214"/>00214 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00215"/>00215 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<link linkend="_class_point">Point</link>&#32;p(r,&#32;z);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00217"/>00217 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00218"/>00218 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delete[]outerBeamWindowArray_R;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00219"/>00219 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delete[]outerBeamWindowArray_Z;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00220"/>00220 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delete[]innerBeamWindowArray_R;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00221"/>00221 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;delete[]innerBeamWindowArray_Z;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00222"/>00222 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00223"/>00223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(isInside(outerBeamWindow_polygon,&#32;nOuter_beamWindow,&#32;p)&#32;&amp;&amp;&#32;!isInside(innerBeamWindow_polygon,&#32;nInner_beamWindow,&#32;p));
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00224"/>00224 }
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00225"/>00225 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00226"/>00226 <emphasis role="keywordtype">int</emphasis>&#32;ExtractDPAWindowsFromFluka(std::string&#32;inputFileName)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00227"/>00227 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00228"/>00228 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;binR&#32;=&#32;105.,&#32;minR&#32;=&#32;0.,&#32;maxR&#32;=&#32;105.;&#32;<emphasis role="comment">//&#32;mm</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00229"/>00229 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;binZ&#32;=&#32;1000.,&#32;minZ&#32;=&#32;-630.,&#32;maxZ&#32;=&#32;370.;&#32;<emphasis role="comment">//&#32;mm</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00230"/>00230 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00231"/>00231 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;dr&#32;=&#32;(maxR-minR)/binR;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00232"/>00232 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;dz&#32;=&#32;(maxZ-minZ)/binZ;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00233"/>00233 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00234"/>00234 &#32;&#32;&#32;&#32;std::string&#32;line,&#32;DPA0,&#32;DPA1,&#32;DPA2,&#32;DPA3,&#32;DPA4;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00235"/>00235 &#32;&#32;&#32;&#32;std::ifstream&#32;inputFile(inputFileName);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00236"/>00236 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00237"/>00237 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dpa_tot&#32;=&#32;0.;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00238"/>00238 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;r0&#32;=&#32;minR,&#32;r1,&#32;r2,&#32;r3,&#32;r4;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00240"/>00240 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;z0&#32;=&#32;minZ,&#32;z1&#32;=&#32;minZ,&#32;z2&#32;=&#32;minZ,&#32;z3&#32;=&#32;minZ,&#32;z4&#32;=&#32;minZ;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dpa0,&#32;dpa1,&#32;dpa2,&#32;dpa3,&#32;dpa4;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00242"/>00242 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00243"/>00243 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isCounting&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00244"/>00244 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lineCount&#32;=&#32;0;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00245"/>00245 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;countValues&#32;=&#32;0;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00246"/>00246 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00247"/>00247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(inputFile,&#32;line))&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::istringstream&#32;iss(line);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iss&#32;&gt;&gt;&#32;DPA0&#32;&gt;&gt;&#32;DPA1&#32;&gt;&gt;&#32;DPA2&#32;&gt;&gt;&#32;DPA3&#32;&gt;&gt;&#32;DPA4;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lineCount&#32;==&#32;0)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;=&#32;minR;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r0&#32;+=&#32;5.&#32;*&#32;dr;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r1&#32;=&#32;r0&#32;+&#32;dr;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r2&#32;=&#32;r1&#32;+&#32;dr;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r3&#32;=&#32;r2&#32;+&#32;dr;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r4&#32;=&#32;r3&#32;+&#32;dr;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00260"/>00260 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r0&#32;&gt;=&#32;maxR)&#32;{&#32;r0&#32;-=&#32;maxR;&#32;z0&#32;+=&#32;dz;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r1&#32;&gt;=&#32;maxR)&#32;{&#32;r1&#32;-=&#32;maxR;&#32;z1&#32;+=&#32;dz;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r2&#32;&gt;=&#32;maxR)&#32;{&#32;r2&#32;-=&#32;maxR;&#32;z2&#32;+=&#32;dz;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r3&#32;&gt;=&#32;maxR)&#32;{&#32;r3&#32;-=&#32;maxR;&#32;z3&#32;+=&#32;dz;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r4&#32;&gt;=&#32;maxR)&#32;{&#32;r4&#32;-=&#32;maxR;&#32;z4&#32;+=&#32;dz;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00266"/>00266 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa0&#32;=&#32;std::stod(DPA0);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa1&#32;=&#32;std::stod(DPA1);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa2&#32;=&#32;std::stod(DPA2);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa3&#32;=&#32;std::stod(DPA3);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa4&#32;=&#32;std::stod(DPA4);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00272"/>00272 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isCounting&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::invalid_argument&amp;)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cerr&#32;&lt;&lt;&#32;line&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isCounting&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00279"/>00279 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isCounting)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isPointInBeamWindow(r0&#32;+&#32;dr/2.,&#32;z0&#32;+&#32;dz/2.))&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa_tot&#32;+=&#32;dpa0;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;r0&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;z0&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;dpa0&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isPointInBeamWindow(r1&#32;+&#32;dr/2.,&#32;z1&#32;+&#32;dz/2.))&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa_tot&#32;+=&#32;dpa1;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;r1&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;z1&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;dpa1&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isPointInBeamWindow(r2&#32;+&#32;dr/2.,&#32;z2&#32;+&#32;dz/2.))&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa_tot&#32;+=&#32;dpa2;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;r2&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;z2&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;dpa2&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isPointInBeamWindow(r3&#32;+&#32;dr/2.,&#32;z3&#32;+&#32;dz/2.))&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa_tot&#32;+=&#32;dpa3;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;r3&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;z3&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;dpa3&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isPointInBeamWindow(r4&#32;+&#32;dr/2.,&#32;z4&#32;+&#32;dz/2.))&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa_tot&#32;+=&#32;dpa4;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;r4&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;z4&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;dpa4&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00302"/>00302 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="comment">/*(lineCount&#32;&gt;&#32;15&#32;&amp;&amp;&#32;!isCounting)&#32;||*/</emphasis>&#32;line.find(<emphasis role="stringliteral">&quot;Percentage&#32;errors&#32;follow&#32;in&#32;a&#32;matrix&quot;</emphasis>)&#32;!=&#32;std::string::npos&#32;||&#32;z0&#32;&gt;&#32;maxZ&#32;||&#32;z1&#32;&gt;&#32;maxZ&#32;||&#32;z2&#32;&gt;&#32;maxZ&#32;||&#32;z3&#32;&gt;&#32;maxZ&#32;||&#32;z4&#32;&gt;&#32;maxZ)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;line&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;break&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r0&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r2&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r3&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r4&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;break&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;z0&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;z1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;z2&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;z3&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;z4&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;lineCount&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;countValues&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Total&#32;DPA&#32;in&#32;the&#32;beam&#32;window&#32;after&#32;1&#32;week:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;dpa_tot&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isCounting&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa_tot&#32;=&#32;0.;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineCount&#32;=&#32;0;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countValues&#32;=&#32;0;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;z0&#32;=&#32;minZ,&#32;z1&#32;=&#32;minZ,&#32;z2&#32;=&#32;minZ,&#32;z3&#32;=&#32;minZ,&#32;z4&#32;=&#32;minZ;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countValues&#32;+=&#32;5;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineCount++;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(<emphasis role="stringliteral">&quot;Binning&#32;integral:&quot;</emphasis>)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Total&#32;Sumw2&#32;DPA&#32;in&#32;the&#32;beam&#32;window&#32;after&#32;1&#32;week:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;dpa_tot&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00319"/>00319 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dpa_tot&#32;=&#32;0.;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineCount&#32;=&#32;0;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countValues&#32;=&#32;0;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;z0&#32;=&#32;minZ,&#32;z1&#32;=&#32;minZ,&#32;z2&#32;=&#32;minZ,&#32;z3&#32;=&#32;minZ,&#32;z4&#32;=&#32;minZ;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00325"/>00325 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00326"/>00326 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00327"/>00327 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00328"/>00328 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Total&#32;Sumw2&#32;DPA&#32;in&#32;the&#32;beam&#32;window&#32;after&#32;1&#32;week:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;dpa_tot&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00329"/>00329 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00330"/>00330 &#32;&#32;&#32;&#32;inputFile.close();
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00331"/>00331 
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00332"/>00332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(0);
<anchor xml:id="__extract_from_lis_fluka_8_c_source_1l00333"/>00333 }
</programlisting></section>
