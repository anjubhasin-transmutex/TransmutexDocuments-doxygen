<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__extract_burnup_8_c_source" xml:lang="en-US">
<title>ExtractBurnup.C</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/tools/ExtractBurnup.C</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__extract_burnup_8_c_source_1l00001"/>00001 
<anchor xml:id="__extract_burnup_8_c_source_1l00002"/>00002 <emphasis role="comment">//&#32;\brief&#32;Implementation&#32;of&#32;the&#32;Burnup&#32;Graph&#32;Extractor</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00003"/>00003 <emphasis role="comment">//</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00004"/>00004 <emphasis role="comment">//</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00006"/>00006 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00007"/>00007 <emphasis role="comment">//&#32;ExtractBurnupDistributionZA</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00008"/>00008 <emphasis role="comment">//</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00009"/>00009 <emphasis role="comment">//&#32;Thomas&#32;Guilbaud,&#32;Transmutex,&#32;13/07/2021</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00010"/>00010 <emphasis role="comment">//</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00012"/>00012 <emphasis role="comment"></emphasis><emphasis role="comment">//&#32;Map&#32;of</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00014"/>00014 <emphasis role="comment"></emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00016"/>00016 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00020"/>00020 
<anchor xml:id="__extract_burnup_8_c_source_1l00021"/>00021 <emphasis role="keywordtype">int</emphasis>&#32;ExtractBurnupDistributionZA(std::string&#32;filename,&#32;std::string&#32;targetMaterial)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00022"/>00022 &#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="__extract_burnup_8_c_source_1l00023"/>00023 &#32;&#32;&#32;&#32;std::string&#32;word;
<anchor xml:id="__extract_burnup_8_c_source_1l00024"/>00024 &#32;&#32;&#32;&#32;std::ifstream&#32;infile(filename);
<anchor xml:id="__extract_burnup_8_c_source_1l00025"/>00025 &#32;&#32;&#32;&#32;std::istringstream&#32;iss;
<anchor xml:id="__extract_burnup_8_c_source_1l00026"/>00026 
<anchor xml:id="__extract_burnup_8_c_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos1,&#32;pos2,&#32;pos3;
<anchor xml:id="__extract_burnup_8_c_source_1l00028"/>00028 &#32;&#32;&#32;&#32;std::string&#32;materialName,&#32;IZA;
<anchor xml:id="__extract_burnup_8_c_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ZZ,&#32;AAA;
<anchor xml:id="__extract_burnup_8_c_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;concentration;
<anchor xml:id="__extract_burnup_8_c_source_1l00031"/>00031 
<anchor xml:id="__extract_burnup_8_c_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;delimiter1&#32;=&#32;<emphasis role="stringliteral">&quot;-&gt;AddElement(&quot;</emphasis>,
<anchor xml:id="__extract_burnup_8_c_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delimiter2&#32;=&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,
<anchor xml:id="__extract_burnup_8_c_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delimiter3&#32;=&#32;<emphasis role="stringliteral">&quot;);&quot;</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00035"/>00035 
<anchor xml:id="__extract_burnup_8_c_source_1l00036"/>00036 &#32;&#32;&#32;&#32;TCanvas*&#32;canvas&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TCanvas(<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00037"/>00037 &#32;&#32;&#32;&#32;std::string&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;Burnup&#32;Distribution&#32;in&#32;&quot;</emphasis>+targetMaterial;
<anchor xml:id="__extract_burnup_8_c_source_1l00038"/>00038 &#32;&#32;&#32;&#32;TH2D*&#32;BurnupDistribution&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TH2D(name.c_str(),&#32;name.c_str(),&#32;110,&#32;1.,&#32;110.,&#32;250,&#32;1.,&#32;250.);
<anchor xml:id="__extract_burnup_8_c_source_1l00039"/>00039 
<anchor xml:id="__extract_burnup_8_c_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(infile,&#32;line))&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(<emphasis role="stringliteral">&quot;TMXMaterial*&quot;</emphasis>)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::istringstream&#32;ss(line);
<anchor xml:id="__extract_burnup_8_c_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
<anchor xml:id="__extract_burnup_8_c_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ss&#32;&gt;&gt;&#32;word)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;1)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;materialName&#32;=&#32;word;
<anchor xml:id="__extract_burnup_8_c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="__extract_burnup_8_c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;&#32;&#32;line.find(materialName)&#32;!=&#32;std::string::npos
<anchor xml:id="__extract_burnup_8_c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;line.find(delimiter1)&#32;&#32;&#32;!=&#32;std::string::npos
<anchor xml:id="__extract_burnup_8_c_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;materialName&#32;==&#32;targetMaterial
<anchor xml:id="__extract_burnup_8_c_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos1&#32;=&#32;line.find(delimiter1);
<anchor xml:id="__extract_burnup_8_c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos2&#32;=&#32;line.find(delimiter2);
<anchor xml:id="__extract_burnup_8_c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos3&#32;=&#32;line.find(delimiter3);
<anchor xml:id="__extract_burnup_8_c_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IZA&#32;=&#32;line.substr(pos1+delimiter1.length(),&#32;pos2-(pos1+delimiter1.length()));
<anchor xml:id="__extract_burnup_8_c_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;concentration&#32;=&#32;std::stod(line.substr(pos2+delimiter2.length(),&#32;pos3-(pos2+delimiter2.length())));
<anchor xml:id="__extract_burnup_8_c_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IZA.pop_back();
<anchor xml:id="__extract_burnup_8_c_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ZZ&#32;&#32;=&#32;std::stod(IZA.substr(0,&#32;IZA.length()-3));
<anchor xml:id="__extract_burnup_8_c_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AAA&#32;=&#32;std::stod(IZA.substr(IZA.length()-3,&#32;IZA.length()));
<anchor xml:id="__extract_burnup_8_c_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;line&#32;&lt;&lt;&#32;&quot;&#32;-&#32;&quot;&#32;&lt;&lt;&#32;ZZ&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;AAA&#32;&lt;&lt;&#32;&quot;&#32;-&#32;&quot;&#32;&lt;&lt;&#32;concentration&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BurnupDistribution-&gt;Fill(ZZ,&#32;AAA,&#32;concentration);
<anchor xml:id="__extract_burnup_8_c_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00069"/>00069 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00070"/>00070 
<anchor xml:id="__extract_burnup_8_c_source_1l00071"/>00071 &#32;&#32;&#32;&#32;canvas-&gt;SetLogz();
<anchor xml:id="__extract_burnup_8_c_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BurnupDistribution-&gt;GetXaxis()-&gt;SetNdivisions(30);</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BurnupDistribution-&gt;GetYaxis()-&gt;SetNdivisions(20);</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00074"/>00074 &#32;&#32;&#32;&#32;gStyle-&gt;SetPadGridX(kTRUE);
<anchor xml:id="__extract_burnup_8_c_source_1l00075"/>00075 &#32;&#32;&#32;&#32;gStyle-&gt;SetPadGridY(kTRUE);
<anchor xml:id="__extract_burnup_8_c_source_1l00076"/>00076 &#32;&#32;&#32;&#32;BurnupDistribution-&gt;SetStats(kFALSE);
<anchor xml:id="__extract_burnup_8_c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;BurnupDistribution-&gt;GetXaxis()-&gt;SetTitle(<emphasis role="stringliteral">&quot;Z&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;BurnupDistribution-&gt;GetYaxis()-&gt;SetTitle(<emphasis role="stringliteral">&quot;A&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00079"/>00079 &#32;&#32;&#32;&#32;BurnupDistribution-&gt;GetZaxis()-&gt;SetTitle(<emphasis role="stringliteral">&quot;Fraction&#32;in&#32;Material&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;BurnupDistribution-&gt;SetAxisRange(1e-21,&#32;BurnupDistribution-&gt;GetMaximum(),&#32;<emphasis role="stringliteral">&quot;Z&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00081"/>00081 &#32;&#32;&#32;&#32;BurnupDistribution-&gt;Draw(<emphasis role="stringliteral">&quot;COLZ&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00082"/>00082 
<anchor xml:id="__extract_burnup_8_c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;canvas-&gt;SaveAs((name&#32;+&#32;<emphasis role="stringliteral">&quot;.png&quot;</emphasis>).c_str());
<anchor xml:id="__extract_burnup_8_c_source_1l00084"/>00084 
<anchor xml:id="__extract_burnup_8_c_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(0);
<anchor xml:id="__extract_burnup_8_c_source_1l00086"/>00086 }
<anchor xml:id="__extract_burnup_8_c_source_1l00087"/>00087 
<anchor xml:id="__extract_burnup_8_c_source_1l00088"/>00088 TGraph*&#32;ExtractBurnupEvolutionIZA(std::string&#32;filenameRoot,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nFile,&#32;std::string&#32;materialName,&#32;std::string&#32;IZA)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TH1D*&#32;BurnupEvolution&#32;=&#32;new&#32;TH1D(</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&quot;Burnup&#32;Evolution&quot;,&#32;IZA.c_str(),</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;nFile,&#32;0,&#32;nFile</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;);</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BurnupEvolution-&gt;SetStats(kFALSE);</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;Double_t&#32;time[nFile];
<anchor xml:id="__extract_burnup_8_c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;Double_t&#32;concentration[nFile];
<anchor xml:id="__extract_burnup_8_c_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nFile;&#32;i++)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time[i]&#32;=&#32;0.;
<anchor xml:id="__extract_burnup_8_c_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;concentration[i]&#32;=&#32;0.;
<anchor xml:id="__extract_burnup_8_c_source_1l00099"/>00099 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00100"/>00100 
<anchor xml:id="__extract_burnup_8_c_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nFile;&#32;i++)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="__extract_burnup_8_c_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;word;
<anchor xml:id="__extract_burnup_8_c_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;filename&#32;=&#32;filenameRoot+std::to_string(i);
<anchor xml:id="__extract_burnup_8_c_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ifstream&#32;infile(filename);
<anchor xml:id="__extract_burnup_8_c_source_1l00106"/>00106 
<anchor xml:id="__extract_burnup_8_c_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Extract&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;IZA&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;from&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;filename&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__extract_burnup_8_c_source_1l00108"/>00108 
<anchor xml:id="__extract_burnup_8_c_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos2,&#32;pos3;
<anchor xml:id="__extract_burnup_8_c_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;double&#32;concentration;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;delimiter2&#32;=&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;delimiter3&#32;=&#32;<emphasis role="stringliteral">&quot;);&quot;</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00112"/>00112 
<anchor xml:id="__extract_burnup_8_c_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;totalMass&#32;=&#32;0.;
<anchor xml:id="__extract_burnup_8_c_source_1l00114"/>00114 
<anchor xml:id="__extract_burnup_8_c_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(infile,&#32;line))&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::istringstream&#32;iss(line);
<anchor xml:id="__extract_burnup_8_c_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(<emphasis role="stringliteral">&quot;fuel&quot;</emphasis>)&#32;!=&#32;std::string::npos&#32;&amp;&amp;&#32;line.find(IZA)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos2&#32;=&#32;line.find(delimiter2);
<anchor xml:id="__extract_burnup_8_c_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos3&#32;=&#32;line.find(delimiter3);
<anchor xml:id="__extract_burnup_8_c_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;concentration[i]&#32;+=&#32;std::stod(line.substr(pos2+delimiter2.length(),&#32;pos3-(pos2+delimiter2.length())));
<anchor xml:id="__extract_burnup_8_c_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;concentration[i]&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;time[i]&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;concentration[i]&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;break;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concentration&#32;=&#32;std::stod(line.substr(pos2+delimiter2.length(),&#32;pos3-(pos2+delimiter2.length())));</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BurnupEvolution-&gt;Fill((double)i+1.,&#32;concentration);</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(materialName)&#32;!=&#32;std::string::npos&#32;&amp;&amp;&#32;line.find(<emphasis role="stringliteral">&quot;&#32;with&#32;mass:&#32;&quot;</emphasis>)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;mass;
<anchor xml:id="__extract_burnup_8_c_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;
<anchor xml:id="__extract_burnup_8_c_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(iss&#32;&gt;&gt;&#32;mass)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;==&#32;5)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j++;
<anchor xml:id="__extract_burnup_8_c_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;totalMass&#32;+=&#32;std::stod(mass);
<anchor xml:id="__extract_burnup_8_c_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(<emphasis role="stringliteral">&quot;//&#32;*&#32;Current&#32;irradiation&#32;time:&quot;</emphasis>)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;timeStep;
<anchor xml:id="__extract_burnup_8_c_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;
<anchor xml:id="__extract_burnup_8_c_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(iss&#32;&gt;&gt;&#32;timeStep)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;==&#32;5)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j++;
<anchor xml:id="__extract_burnup_8_c_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time[i]&#32;=&#32;std::stod(timeStep);
<anchor xml:id="__extract_burnup_8_c_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;&quot;Total&#32;mass:&#32;&quot;&#32;&lt;&lt;&#32;totalMass&#32;&lt;&lt;&#32;&quot;&#32;g&#32;&quot;&#32;&lt;&lt;&#32;concentration[i-1]&#32;&lt;&lt;&#32;&quot;\n&quot;;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;concentration[i]&#32;=&#32;concentration[i]&#32;*&#32;totalMass/1000./24.;
<anchor xml:id="__extract_burnup_8_c_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;concentration[i]&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00153"/>00153 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00154"/>00154 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__extract_burnup_8_c_source_1l00155"/>00155 
<anchor xml:id="__extract_burnup_8_c_source_1l00156"/>00156 &#32;&#32;&#32;&#32;TGraph*&#32;BurnupEvolution&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TGraph(nFile,&#32;time,&#32;concentration);
<anchor xml:id="__extract_burnup_8_c_source_1l00157"/>00157 &#32;&#32;&#32;&#32;BurnupEvolution-&gt;SetTitle(IZA.c_str());
<anchor xml:id="__extract_burnup_8_c_source_1l00158"/>00158 &#32;&#32;&#32;&#32;BurnupEvolution-&gt;SetName(IZA.c_str());
<anchor xml:id="__extract_burnup_8_c_source_1l00159"/>00159 
<anchor xml:id="__extract_burnup_8_c_source_1l00160"/>00160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(BurnupEvolution);
<anchor xml:id="__extract_burnup_8_c_source_1l00161"/>00161 }
<anchor xml:id="__extract_burnup_8_c_source_1l00162"/>00162 
<anchor xml:id="__extract_burnup_8_c_source_1l00163"/>00163 TGraph*&#32;ExtractBeamIntensityEvolution(std::string&#32;filenameRoot,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nFile)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00164"/>00164 &#32;&#32;&#32;&#32;Double_t&#32;time[nFile];
<anchor xml:id="__extract_burnup_8_c_source_1l00165"/>00165 &#32;&#32;&#32;&#32;Double_t&#32;beamIntensity[nFile];
<anchor xml:id="__extract_burnup_8_c_source_1l00166"/>00166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nFile;&#32;i++)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time[i]&#32;=&#32;0.;
<anchor xml:id="__extract_burnup_8_c_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;beamIntensity[i]&#32;=&#32;0.;
<anchor xml:id="__extract_burnup_8_c_source_1l00169"/>00169 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00170"/>00170 
<anchor xml:id="__extract_burnup_8_c_source_1l00171"/>00171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nFile;&#32;i++)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="__extract_burnup_8_c_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;word;
<anchor xml:id="__extract_burnup_8_c_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;filename&#32;=&#32;filenameRoot+std::to_string(i);
<anchor xml:id="__extract_burnup_8_c_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ifstream&#32;infile(filename);
<anchor xml:id="__extract_burnup_8_c_source_1l00176"/>00176 
<anchor xml:id="__extract_burnup_8_c_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Extract&#32;Beam&#32;Intensity&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__extract_burnup_8_c_source_1l00178"/>00178 
<anchor xml:id="__extract_burnup_8_c_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(infile,&#32;line))&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::istringstream&#32;iss(line);
<anchor xml:id="__extract_burnup_8_c_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(<emphasis role="stringliteral">&quot;//&#32;*&#32;Beam&#32;intensity:&quot;</emphasis>)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;intensity;
<anchor xml:id="__extract_burnup_8_c_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;
<anchor xml:id="__extract_burnup_8_c_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(iss&#32;&gt;&gt;&#32;intensity)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;==&#32;4)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j++;
<anchor xml:id="__extract_burnup_8_c_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;beamIntensity[i]&#32;=&#32;std::stod(intensity);
<anchor xml:id="__extract_burnup_8_c_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(<emphasis role="stringliteral">&quot;//&#32;*&#32;Current&#32;irradiation&#32;time:&quot;</emphasis>)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;timeStep;
<anchor xml:id="__extract_burnup_8_c_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;
<anchor xml:id="__extract_burnup_8_c_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(iss&#32;&gt;&gt;&#32;timeStep)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;==&#32;5)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j++;
<anchor xml:id="__extract_burnup_8_c_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time[i]&#32;=&#32;std::stod(timeStep);
<anchor xml:id="__extract_burnup_8_c_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00204"/>00204 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00205"/>00205 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__extract_burnup_8_c_source_1l00206"/>00206 
<anchor xml:id="__extract_burnup_8_c_source_1l00207"/>00207 &#32;&#32;&#32;&#32;TGraph*&#32;BeamIntensityEvolution&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TGraph(nFile,&#32;time,&#32;beamIntensity);
<anchor xml:id="__extract_burnup_8_c_source_1l00208"/>00208 &#32;&#32;&#32;&#32;BeamIntensityEvolution-&gt;SetTitle(<emphasis role="stringliteral">&quot;Beam&#32;Intensity&#32;Evolution&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00209"/>00209 &#32;&#32;&#32;&#32;BeamIntensityEvolution-&gt;SetName(<emphasis role="stringliteral">&quot;Beam&#32;Intensity&#32;Evolution&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00210"/>00210 
<anchor xml:id="__extract_burnup_8_c_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(BeamIntensityEvolution);
<anchor xml:id="__extract_burnup_8_c_source_1l00212"/>00212 }
<anchor xml:id="__extract_burnup_8_c_source_1l00213"/>00213 
<anchor xml:id="__extract_burnup_8_c_source_1l00214"/>00214 TGraph*&#32;ExtractCorePowerEvolution(std::string&#32;filenameRoot,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nFile)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00215"/>00215 &#32;&#32;&#32;&#32;Double_t&#32;time[nFile];
<anchor xml:id="__extract_burnup_8_c_source_1l00216"/>00216 &#32;&#32;&#32;&#32;Double_t&#32;corePower[nFile];
<anchor xml:id="__extract_burnup_8_c_source_1l00217"/>00217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nFile;&#32;i++)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time[i]&#32;=&#32;0.;
<anchor xml:id="__extract_burnup_8_c_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;corePower[i]&#32;=&#32;0.;
<anchor xml:id="__extract_burnup_8_c_source_1l00220"/>00220 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00221"/>00221 
<anchor xml:id="__extract_burnup_8_c_source_1l00222"/>00222 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nFile;&#32;i++)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;line;
<anchor xml:id="__extract_burnup_8_c_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;word;
<anchor xml:id="__extract_burnup_8_c_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;filename&#32;=&#32;filenameRoot+std::to_string(i);
<anchor xml:id="__extract_burnup_8_c_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ifstream&#32;infile(filename);
<anchor xml:id="__extract_burnup_8_c_source_1l00227"/>00227 
<anchor xml:id="__extract_burnup_8_c_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Extract&#32;Core&#32;Power&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__extract_burnup_8_c_source_1l00229"/>00229 
<anchor xml:id="__extract_burnup_8_c_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(infile,&#32;line))&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::istringstream&#32;iss(line);
<anchor xml:id="__extract_burnup_8_c_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(<emphasis role="stringliteral">&quot;//&#32;*&#32;Core&#32;power:&quot;</emphasis>)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;power;
<anchor xml:id="__extract_burnup_8_c_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;
<anchor xml:id="__extract_burnup_8_c_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(iss&#32;&gt;&gt;&#32;power)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;==&#32;4)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j++;
<anchor xml:id="__extract_burnup_8_c_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;corePower[i]&#32;=&#32;std::stod(power);
<anchor xml:id="__extract_burnup_8_c_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line.find(<emphasis role="stringliteral">&quot;//&#32;*&#32;Current&#32;irradiation&#32;time:&quot;</emphasis>)&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;timeStep;
<anchor xml:id="__extract_burnup_8_c_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;
<anchor xml:id="__extract_burnup_8_c_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(iss&#32;&gt;&gt;&#32;timeStep)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;==&#32;5)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j++;
<anchor xml:id="__extract_burnup_8_c_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time[i]&#32;=&#32;std::stod(timeStep);
<anchor xml:id="__extract_burnup_8_c_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00255"/>00255 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00256"/>00256 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__extract_burnup_8_c_source_1l00257"/>00257 
<anchor xml:id="__extract_burnup_8_c_source_1l00258"/>00258 &#32;&#32;&#32;&#32;TGraph*&#32;CorePowerEvolution&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TGraph(nFile,&#32;time,&#32;corePower);
<anchor xml:id="__extract_burnup_8_c_source_1l00259"/>00259 &#32;&#32;&#32;&#32;CorePowerEvolution-&gt;SetTitle(<emphasis role="stringliteral">&quot;Core&#32;Power&#32;Evolution&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00260"/>00260 &#32;&#32;&#32;&#32;CorePowerEvolution-&gt;SetName(<emphasis role="stringliteral">&quot;Core&#32;Power&#32;Evolution&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00261"/>00261 
<anchor xml:id="__extract_burnup_8_c_source_1l00262"/>00262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(CorePowerEvolution);
<anchor xml:id="__extract_burnup_8_c_source_1l00263"/>00263 }
<anchor xml:id="__extract_burnup_8_c_source_1l00264"/>00264 
<anchor xml:id="__extract_burnup_8_c_source_1l00265"/>00265 <emphasis role="keywordtype">int</emphasis>&#32;ExtractBurnupMultipleIZA(std::string&#32;filenameRoot,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nFile,&#32;std::string&#32;materialName)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00266"/>00266 &#32;&#32;&#32;&#32;TCanvas*&#32;canvasBurnup&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TCanvas(<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00267"/>00267 &#32;&#32;&#32;&#32;TMultiGraph&#32;*mg&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TMultiGraph();
<anchor xml:id="__extract_burnup_8_c_source_1l00268"/>00268 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isWriteInCSV&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00269"/>00269 
<anchor xml:id="__extract_burnup_8_c_source_1l00270"/>00270 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;IZA&#32;=&#32;{<emphasis role="stringliteral">&quot;932370&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;952410&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;952430&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;962440&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;942390&quot;</emphasis>};
<anchor xml:id="__extract_burnup_8_c_source_1l00271"/>00271 &#32;&#32;&#32;&#32;std::vector&lt;TGraph*&gt;&#32;BurnupEvolution;
<anchor xml:id="__extract_burnup_8_c_source_1l00272"/>00272 
<anchor xml:id="__extract_burnup_8_c_source_1l00273"/>00273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;IZA.size();&#32;i++)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TGraph*&#32;BunrupEvolTemp&#32;=&#32;ExtractBurnupEvolutionIZA(filenameRoot,&#32;nFile+1,&#32;materialName,&#32;IZA[i]);
<anchor xml:id="__extract_burnup_8_c_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BurnupEvolution.push_back(BunrupEvolTemp);
<anchor xml:id="__extract_burnup_8_c_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BurnupEvolution-&gt;Draw(&quot;AC*&#32;SAME&quot;);</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mg-&gt;Add(BunrupEvolTemp);
<anchor xml:id="__extract_burnup_8_c_source_1l00278"/>00278 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00279"/>00279 &#32;&#32;&#32;&#32;mg-&gt;Draw(<emphasis role="stringliteral">&quot;AL&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00280"/>00280 
<anchor xml:id="__extract_burnup_8_c_source_1l00281"/>00281 &#32;&#32;&#32;&#32;TCanvas*&#32;canvasBeamIntensity&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TCanvas(<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00282"/>00282 &#32;&#32;&#32;&#32;TGraph*&#32;BeamIntensityEvolution&#32;=&#32;ExtractBeamIntensityEvolution(filenameRoot,&#32;nFile+1);
<anchor xml:id="__extract_burnup_8_c_source_1l00283"/>00283 &#32;&#32;&#32;&#32;BeamIntensityEvolution-&gt;Draw();
<anchor xml:id="__extract_burnup_8_c_source_1l00284"/>00284 
<anchor xml:id="__extract_burnup_8_c_source_1l00285"/>00285 &#32;&#32;&#32;&#32;TCanvas*&#32;canvasCorePower&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TCanvas(<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00286"/>00286 &#32;&#32;&#32;&#32;TGraph*&#32;CorePowerEvolution&#32;=&#32;ExtractCorePowerEvolution(filenameRoot,&#32;nFile+1);
<anchor xml:id="__extract_burnup_8_c_source_1l00287"/>00287 &#32;&#32;&#32;&#32;CorePowerEvolution-&gt;Draw();
<anchor xml:id="__extract_burnup_8_c_source_1l00288"/>00288 
<anchor xml:id="__extract_burnup_8_c_source_1l00289"/>00289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isWriteInCSV)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ofstream&#32;outputFile;
<anchor xml:id="__extract_burnup_8_c_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile.open&#32;(<emphasis role="stringliteral">&quot;BurnupEvolution.csv&quot;</emphasis>);
<anchor xml:id="__extract_burnup_8_c_source_1l00292"/>00292 
<anchor xml:id="__extract_burnup_8_c_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Header</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Time&#32;(s),Intensity&#32;(mA),Core&#32;Power&#32;(MW),&quot;</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;IZA.size();&#32;i++)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;IZA[i]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00299"/>00299 
<anchor xml:id="__extract_burnup_8_c_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rows</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;BurnupEvolution.back()-&gt;GetN();&#32;i++)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;BurnupEvolution[0]-&gt;GetPointX(i)
<anchor xml:id="__extract_burnup_8_c_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;BeamIntensityEvolution-&gt;GetPointY(i)
<anchor xml:id="__extract_burnup_8_c_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;CorePowerEvolution-&gt;GetPointY(i)
<anchor xml:id="__extract_burnup_8_c_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00309"/>00309 
<anchor xml:id="__extract_burnup_8_c_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Concentration</emphasis>
<anchor xml:id="__extract_burnup_8_c_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;BurnupEvolution.size();&#32;j++)&#32;{
<anchor xml:id="__extract_burnup_8_c_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;BurnupEvolution[j]-&gt;GetPointY(i)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__extract_burnup_8_c_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputFile.close();
<anchor xml:id="__extract_burnup_8_c_source_1l00317"/>00317 &#32;&#32;&#32;&#32;}
<anchor xml:id="__extract_burnup_8_c_source_1l00318"/>00318 
<anchor xml:id="__extract_burnup_8_c_source_1l00319"/>00319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(0);
<anchor xml:id="__extract_burnup_8_c_source_1l00320"/>00320 }
</programlisting></section>
