<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__t_m_x_input_parameters_8cc_source" xml:lang="en-US">
<title>TMXInputParameters.cc</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/src/TMXInputParameters.cc</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00001"/>00001 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00003"/>00003 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00004"/>00004 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00006"/>00006 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00007"/>00007 <emphasis role="comment">//&#32;TMXInputParameters</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00008"/>00008 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00009"/>00009 <emphasis role="comment">//&#32;Donovan&#32;Maire,&#32;Transmutex,&#32;18/11/2019</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00010"/>00010 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00012"/>00012 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00013"/>00013 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00014"/>00014 <emphasis role="comment">//&#32;Class</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&quot;TMXInputParameters.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00016"/>00016 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00017"/>00017 <emphasis role="comment">//&#32;C++&#32;libraries</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00020"/>00020 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00021"/>00021 <emphasis role="comment">//&#32;#include&#32;&lt;numbers&gt;&#32;//&#32;C++20</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00022"/>00022 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00023"/>00023 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::find_if</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00024"/>00024 <emphasis role="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00025"/>00025 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00026"/><link linkend="_class_t_m_x_input_parameters_1acc70d379aea247900a68efa9669fd8db">00026</link> <link linkend="_class_t_m_x_input_parameters_1acc70d379aea247900a68efa9669fd8db">TMXInputParameters::TMXInputParameters</link>()
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00027"/>00027 {
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00028"/>00028 &#32;&#32;&#32;&#32;Initialize();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00029"/>00029 }
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00030"/>00030 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00031"/>00031 TMXInputParameters::~TMXInputParameters()
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00032"/>00032 {
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00033"/>00033 }
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00034"/>00034 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00035"/>00035 <emphasis role="keywordtype">void</emphasis>&#32;TMXInputParameters::read(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;strFileName)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00036"/>00036 &#32;&#32;&#32;&#32;std::ifstream&#32;myfile;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00037"/>00037 &#32;&#32;&#32;&#32;myfile.open&#32;(strFileName);
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00038"/>00038 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00039"/>00039 &#32;&#32;&#32;&#32;std::string&#32;strLine,&#32;separator&#32;=&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00040"/>00040 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;vTmp;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00041"/>00041 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(std::getline&#32;(myfile,strLine))&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00043"/>00043 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;lastPos&#32;=&#32;strLine.find(separator,&#32;0),&#32;previousPos=0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vTmp.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(lastPos&#32;!=&#32;std::string::npos)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00047"/>00047 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vTmp.push_back(&#32;strLine.substr(previousPos,&#32;lastPos-previousPos)&#32;);
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previousPos&#32;=&#32;lastPos+1;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastPos&#32;=&#32;strLine.find(separator,&#32;previousPos);
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vTmp.push_back(&#32;strLine.substr(previousPos,&#32;lastPos-previousPos)&#32;);
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00053"/>00053 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialization</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParameterInitialization(vTmp);
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00056"/>00056 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00057"/>00057 &#32;&#32;&#32;&#32;myfile.close();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00058"/>00058 }
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00059"/>00059 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00060"/>00060 <emphasis role="keywordtype">double</emphasis>&#32;TMXInputParameters::UnitConversion(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;strUnit)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00061"/>00061 <emphasis role="preprocessor">#ifndef&#32;M_PIl</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00062"/>00062 <emphasis role="preprocessor">#&#32;define&#32;M_PIl&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3.141592653589793238462643383279502884L&#32;</emphasis><emphasis role="comment">/*&#32;pi&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00063"/>00063 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;mW&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E-9;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(&#32;<emphasis role="stringliteral">&quot;W&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E-6;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;kW&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E-3;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;MW&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+0;}&#32;&#32;<emphasis role="comment">//&#32;Default&#32;unit&#32;is&#32;MW</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;GW&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+3;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;TW&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+6;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00070"/>00070 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;nm&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E-6;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;um&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E-3;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;mm&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+0;}&#32;&#32;<emphasis role="comment">//&#32;Default&#32;G4&#32;unit&#32;is&#32;mm</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;cm&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+1;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;dm&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+2;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;m&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+3;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00077"/>00077 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;ns&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E-9;}&#32;&#32;<emphasis role="comment">//&#32;WARNING&#32;Default&#32;unit&#32;in&#32;G4&#32;is&#32;ns,&#32;conversion&#32;is&#32;required&#32;if&#32;used&#32;in&#32;a&#32;G4&#32;class</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;us&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E-6;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;ms&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E-3;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;s&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+0;}&#32;&#32;<emphasis role="comment">//&#32;Default&#32;unit&#32;is&#32;s</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;mn&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+0*60;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;h&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+0*3600;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;d&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+0*3600*24;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;mo&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+0*3600*24*365.25/12.;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;y&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+0*3600*24*365.25;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00087"/>00087 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(&#32;<emphasis role="stringliteral">&quot;eV&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E-6;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;keV&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E-3;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;MeV&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+0;}&#32;&#32;<emphasis role="comment">//&#32;Default&#32;G4&#32;unit&#32;is&#32;MeV</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;GeV&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1E+3;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00092"/>00092 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;rad&quot;</emphasis>)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;180.&#32;/&#32;M_PIl&#32;<emphasis role="comment">/*C++20&#32;=&gt;&#32;std::numbers::pi*/</emphasis>;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00094"/>00094 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strUnit.compare(<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00097"/>00097 }
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00098"/>00098 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00099"/>00099 <emphasis role="keywordtype">void</emphasis>&#32;TMXInputParameters::ParameterInitialization(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;std::string&gt;&amp;&#32;vString)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vString.size()&#32;&gt;=&#32;3&#32;<emphasis role="comment">/*&amp;&amp;&#32;std::find_if(vString[1].begin(),&#32;vString[1].end(),&#32;::isdigit)&#32;!=&#32;vString[1].end()*/</emphasis>)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Geometry&#32;parameters</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;worldR&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{worldR&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;worldZ&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{worldZ&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;h0&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{h0&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;XtargetPosition&quot;</emphasis>)&#32;==&#32;0)&#32;{XtargetPosition&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;CheckGap&quot;</emphasis>)&#32;==&#32;0)&#32;{CheckGap&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;check1r&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{check1r&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;xTarget&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{xTarget&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;yTarget&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{yTarget&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;zTargetHeight&quot;</emphasis>)&#32;==&#32;0)&#32;{zTargetHeight&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;nT&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{nT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;targetgap&quot;</emphasis>)&#32;==&#32;0)&#32;{targetgap&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;xVariable&quot;</emphasis>)&#32;==&#32;0)&#32;{xVariable&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Target_Al_Xgap&quot;</emphasis>)&#32;==&#32;0)&#32;{Target_Al_Xgap&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Target_Al_Ygap&quot;</emphasis>)&#32;==&#32;0)&#32;{Target_Al_Ygap&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Al_thickness&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{Al_thickness&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Al_Tube_gap&quot;</emphasis>&#32;&#32;&#32;)&#32;==&#32;0)&#32;{Al_Tube_gap&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;airtopR&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{airtopR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;AirTopZdistanceFromBottomtoTop&quot;</emphasis>&#32;&#32;&#32;)&#32;==&#32;0)&#32;{AirTopZdistanceFromBottomtoTop&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;reflectorZdistanceFromBottomtoTop&quot;</emphasis>)&#32;==&#32;0)&#32;{reflectorZdistanceFromBottomtoTop&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Cool10ZdistanceFromBottomtoBottom&quot;</emphasis>)&#32;==&#32;0)&#32;{Cool10ZdistanceFromBottomtoBottom&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;fetopZ&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{fetopZ&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;cool10R&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{cool10R&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;cool10BottomGap&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{cool10BottomGap&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Rpos_fuel&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{Rpos_fuel&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00126"/>00126 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if(vString[0].compare(&quot;RodZ&quot;)&#32;==&#32;0)&#32;{RodZ&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;int_Nreplicate&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{int_Nreplicate&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;int_Nlayer&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{int_Nlayer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;dbl_rRodsGap&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{dbl_rRodsGap&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00130"/>00130 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if(vString[0].compare(&quot;CladdingWallThickness&quot;)&#32;==&#32;0)&#32;{CladdingWallThickness&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;GraphiteThickness&quot;</emphasis>)&#32;==&#32;0)&#32;{GraphiteThickness&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;AbsorberThickness&quot;</emphasis>)&#32;==&#32;0)&#32;{AbsorberThickness&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Lattice&#32;Configuration</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;PathToCoreLatticeFile&quot;</emphasis>)&#32;==&#32;0)&#32;{PathToCoreLatticeFile&#32;=&#32;vString[1];}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;PathToAssemblyLatticeFile&quot;</emphasis>)&#32;==&#32;0)&#32;{PathToAssemblyLatticeFile&#32;=&#32;vString[1];}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Simulation&#32;parameters</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;nThreads&quot;</emphasis>)&#32;&#32;&#32;&#32;==&#32;0)&#32;{nThreads&#32;&#32;&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Verbose&quot;</emphasis>)&#32;&#32;&#32;&#32;&#32;==&#32;0)&#32;{Verbose&#32;&#32;&#32;&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;BeamEnergy&quot;</emphasis>)&#32;&#32;==&#32;0)&#32;{BeamEnergy&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Nparticles&quot;</emphasis>)&#32;&#32;==&#32;0)&#32;{Nparticles&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;int_Option&quot;</emphasis>)&#32;&#32;==&#32;0)&#32;{int_Option&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Nrun&quot;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;0)&#32;{Nrun&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ncycle&quot;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;0)&#32;{Ncycle&#32;&#32;&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;TimeOfRun&quot;</emphasis>)&#32;&#32;&#32;==&#32;0)&#32;{TimeOfRun&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;CoolingTime&quot;</emphasis>)&#32;==&#32;0)&#32;{CoolingTime&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;P_beam&quot;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;==&#32;0)&#32;{P_beam&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;P_core&quot;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;==&#32;0)&#32;{P_core&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Geometry&quot;</emphasis>)&#32;&#32;&#32;&#32;==&#32;0)&#32;{Geometry&#32;&#32;&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;PrintModulo&quot;</emphasis>)&#32;==&#32;0)&#32;{PrintModulo&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;TemperatureWorld&quot;</emphasis>)&#32;==&#32;0)&#32;{TemperatureWorld&#32;=&#32;std::stod(vString[1]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;TemperatureFuel&quot;</emphasis>)&#32;&#32;==&#32;0)&#32;{TemperatureFuel&#32;&#32;=&#32;std::stod(vString[1]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;NbDiscardCycle&quot;</emphasis>)&#32;&#32;==&#32;0)&#32;{NbDiscardCycle&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;ErrorLimitMCCubicVolume&quot;</emphasis>)&#32;==&#32;0)&#32;{ErrorLimitMCCubicVolume&#32;=&#32;std::stod(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;MCCubicVolumeLVname&quot;</emphasis>)&#32;==&#32;0)&#32;{MCCubicVolumeLVname&#32;=&#32;vString[1].c_str();}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;ExtSourcePath&quot;</emphasis>)&#32;&#32;==&#32;0)&#32;{ExtSourcePath&#32;&#32;=&#32;vString[1].c_str();}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scoring&#32;mesh&#32;parameters</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;origin_PolarMesh&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin_PolarMesh.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&lt;4;&#32;++i)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin_PolarMesh.push_back(&#32;std::stod(vString[i])&#32;*&#32;UnitConversion(vString[4]));&#32;}&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;nbinsR&quot;</emphasis>)&#32;==&#32;0)&#32;{nbinsR&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;minR&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{minR&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;maxR&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{maxR&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;nbinsTheta&quot;</emphasis>)&#32;==&#32;0)&#32;{nbinsTheta&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;minTheta&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{minTheta&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;maxTheta&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{maxTheta&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;nbinsX&quot;</emphasis>)&#32;==&#32;0)&#32;{nbinsX&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;minX&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{minX&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;maxX&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{maxX&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;nbinsY&quot;</emphasis>)&#32;==&#32;0)&#32;{nbinsY&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;minY&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{minY&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;maxY&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{maxY&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;nbinsZ&quot;</emphasis>)&#32;==&#32;0)&#32;{nbinsZ&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;minZ&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{minZ&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;maxZ&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{maxZ&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00176"/>00176 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;hexPitch&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{hexPitch&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;nbinsHexMinX&quot;</emphasis>)&#32;==&#32;0)&#32;{nbinsHexMinX&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;nbinsHexMaxX&quot;</emphasis>)&#32;==&#32;0)&#32;{nbinsHexMaxX&#32;=&#32;std::stod(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;nbinsHexMinY&quot;</emphasis>)&#32;==&#32;0)&#32;{nbinsHexMinY&#32;=&#32;std::stod(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;nbinsHexMaxY&quot;</emphasis>)&#32;==&#32;0)&#32;{nbinsHexMaxY&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00182"/>00182 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vString[0].compare(0,&#32;3,&#32;<emphasis role="stringliteral">&quot;DPA&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DPA.push_back({vString[1],&#32;vString[2]});&#32;<emphasis role="comment">//&#32;Particles,&#32;list&#32;of&#32;scoring&#32;PV</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vString[0].compare(0,&#32;15,&#32;<emphasis role="stringliteral">&quot;EnergyDeposited&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EnergyDeposited.push_back({vString[1],&#32;vString[2]});&#32;<emphasis role="comment">//&#32;Particles,&#32;list&#32;of&#32;scoring&#32;PV</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vString[0].compare(0,&#32;16,&#32;<emphasis role="stringliteral">&quot;DetectionChamber&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DetectionChamber.push_back({vString[1],&#32;vString[2]});&#32;<emphasis role="comment">//&#32;Reaction,&#32;list&#32;of&#32;scoring&#32;PV</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vString[0].compare(0,&#32;22,&#32;<emphasis role="stringliteral">&quot;SurfaceCurrentSpectrum&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SurfaceCurrentSpectrum.push_back({vString[1],&#32;vString[2]});&#32;<emphasis role="comment">//&#32;Particles,&#32;list&#32;of&#32;scoring&#32;PV</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SurfaceCurrentSpectrum[vString[2]+&quot;___&quot;+vString[1]]&#32;=&#32;vString[1];</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vString[0].compare(0,&#32;22,&#32;<emphasis role="stringliteral">&quot;SurfaceFluenceSpectrum&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SurfaceFluenceSpectrum.push_back({vString[1],&#32;vString[2]});&#32;<emphasis role="comment">//&#32;Particles,&#32;list&#32;of&#32;scoring&#32;PV</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SurfaceFluenceSpectrum[vString[2]+&quot;___&quot;+vString[1]]&#32;=&#32;vString[1];</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vString[0].compare(0,&#32;21,&#32;<emphasis role="stringliteral">&quot;VolumeFluenceSpectrum&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VolumeFluenceSpectrum.push_back({vString[1],&#32;vString[2]});&#32;<emphasis role="comment">//&#32;Particles,&#32;list&#32;of&#32;scoring&#32;PV</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;VolumeFluenceSpectrum[vString[2]+&quot;___&quot;+vString[1]]&#32;=&#32;vString[1];</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vString[0].compare(0,&#32;10,&#32;<emphasis role="stringliteral">&quot;FluenceMap&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FluenceMap.push_back({vString[1],&#32;vString[2],&#32;vString[3]});&#32;<emphasis role="comment">//&#32;Particle,&#32;Type,&#32;PV,&#32;Binning</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;binning;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;6;&#32;i++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binning.push_back(std::stod(vString[i+4]));
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FluenceMapBinning.push_back(binning);
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;try&#32;{</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;for&#32;(size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScoringH2Binning[name].push_back(std::stod(vString[i+9]));</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;ScoringH2Unit[name]&#32;=&#32;vString[12];</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}&#32;catch(std::exception&amp;&#32;e)&#32;{</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;ScoringH2Unit[name]&#32;=&#32;vString[9];</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vString[0].compare(0,&#32;15,&#32;<emphasis role="stringliteral">&quot;PowerDensityMap&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PowerDensityMap.push_back({vString[1],&#32;vString[2],&#32;vString[3]});&#32;<emphasis role="comment">//&#32;Particle,&#32;Type,&#32;PV,&#32;Binning</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;binning;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;6;&#32;i++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binning.push_back(std::stod(vString[i+4]));
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PowerDensityMapBinning.push_back(binning);
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;try&#32;{</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;for&#32;(size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScoringH2Binning[name].push_back(std::stod(vString[i+9]));</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;ScoringH2Unit[name]&#32;=&#32;vString[12];</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}&#32;catch(std::exception&amp;&#32;e)&#32;{</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;ScoringH2Unit[name]&#32;=&#32;vString[9];</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vString[0].compare(<emphasis role="stringliteral">&quot;isEverythingNtuple&quot;</emphasis>)&#32;==&#32;0)&#32;{std::istringstream(vString[1])&#32;&gt;&gt;&#32;std::boolalpha&#32;&gt;&gt;&#32;isEverythingNtuple;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00237"/>00237 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00238"/>00238 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;keff&#32;mesh&#32;parameters</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;originKeff&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;originKeff.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&lt;4;&#32;++i)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;originKeff.push_back(&#32;std::stod(vString[i])&#32;*&#32;UnitConversion(vString[4]));
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;keff_nbinsR2&quot;</emphasis>&#32;&#32;&#32;)&#32;==&#32;0)&#32;{keff_nbinsR2&#32;&#32;&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;keff_nbinsTheta&quot;</emphasis>)&#32;==&#32;0)&#32;{keff_nbinsTheta&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;keff_nbinsZ&quot;</emphasis>&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{keff_nbinsZ&#32;&#32;&#32;&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Energy&#32;cutoff</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecutp_target&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{Ecutp_target&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecutg_target&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{Ecutg_target&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecute_target&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{Ecute_target&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecutp_lead&quot;</emphasis>&#32;&#32;&#32;)&#32;==&#32;0)&#32;{Ecutp_lead&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecutg_lead&quot;</emphasis>&#32;&#32;&#32;)&#32;==&#32;0)&#32;{Ecutg_lead&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecute_lead&quot;</emphasis>&#32;&#32;&#32;)&#32;==&#32;0)&#32;{Ecute_lead&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecutp_fuel&quot;</emphasis>&#32;&#32;&#32;)&#32;==&#32;0)&#32;{Ecutp_fuel&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecutg_fuel&quot;</emphasis>&#32;&#32;&#32;)&#32;==&#32;0)&#32;{Ecutg_fuel&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecute_fuel&quot;</emphasis>&#32;&#32;&#32;)&#32;==&#32;0)&#32;{Ecute_fuel&#32;&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecutp_world&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{Ecutp_world&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecutg_world&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{Ecutg_world&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;Ecute_world&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{Ecute_world&#32;&#32;=&#32;std::stod(vString[1])&#32;*&#32;UnitConversion(vString[2]);}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Source&#32;definition&#32;(new)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;SourceType&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{SourceType&#32;&#32;&#32;&#32;=&#32;vString[1];}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;SourceNumber&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceNumber&#32;&#32;=&#32;std::atoi(vString[1].c_str());}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;src_XYZdirection&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;SourceNumber;&#32;++i)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src_XYZdirection.push_back(&#32;{std::stod(vString[3*i+1]),&#32;std::stod(vString[3*i+2]),&#32;std::stod(vString[3*i+3])}&#32;)&#32;;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;src_XYZposition&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;SourceNumber;&#32;++i)&#32;{&#32;src_XYZposition.push_back(&#32;{std::stod(vString[3*i+1]),&#32;std::stod(vString[3*i+2]),&#32;std::stod(vString[3*i+3])}&#32;)&#32;;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;src_slabThicknesses&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&lt;vString.size();&#32;++i)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(std::find_if(vString[i].begin(),&#32;vString[i].end(),&#32;::isdigit)&#32;!=&#32;vString[i].end()&#32;)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src_slabThicknesses.push_back(&#32;std::stod(vString[i])&#32;);&#32;}}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00278"/>00278 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00279"/>00279 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00280"/>00280 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Simulation&#32;parameters</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;boolVisualization&quot;</emphasis>)&#32;==&#32;0)&#32;{std::istringstream(vString[1])&#32;&gt;&gt;&#32;std::boolalpha&#32;&gt;&gt;&#32;boolVisualization;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00282"/>00282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;str_ROOTFileName&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{str_ROOTFileName&#32;=&#32;vString[1];}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00283"/>00283 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;isThreadMerging&quot;</emphasis>&#32;&#32;)&#32;==&#32;0)&#32;{std::istringstream(vString[1])&#32;&gt;&gt;&#32;std::boolalpha&#32;&gt;&gt;&#32;isThreadMerging;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00284"/>00284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;physName&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{physName&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;vString[1];}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00285"/>00285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;isAbla&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{std::istringstream(vString[1])&#32;&gt;&gt;&#32;std::boolalpha&#32;&gt;&gt;&#32;isAbla;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00286"/>00286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;isRandomSeed&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{std::istringstream(vString[1])&#32;&gt;&gt;&#32;std::boolalpha&#32;&gt;&gt;&#32;isRandomSeed;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;isLEND&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{std::istringstream(vString[1])&#32;&gt;&gt;&#32;std::boolalpha&#32;&gt;&gt;&#32;isLEND;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00288"/>00288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;FuelName&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{FuelName&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;vString[1];}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00289"/>00289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;CoreShape&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{CoreShape&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;vString[1];}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00290"/>00290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;FuelPlacement&quot;</emphasis>&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{FuelPlacement&#32;&#32;&#32;&#32;=&#32;vString[1];}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00291"/>00291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;polarAxis&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{polarAxis&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;vString[1];}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;TypeOfMesh&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;==&#32;0)&#32;{TypeOfMesh&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;vString[1];}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00293"/>00293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(<emphasis role="stringliteral">&quot;PathToBurnupFile&quot;</emphasis>&#32;)&#32;==&#32;0)&#32;{PathToBurnupFile&#32;=&#32;vString[1];}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00294"/>00294 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(vString[0].compare(&#32;0,&#32;14,<emphasis role="stringliteral">&quot;CoreConfig_Raw&quot;</emphasis>)&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::string&#32;&gt;&#32;vec_raw;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;1;&#32;i&lt;vString.size();&#32;++i)&#32;{&#32;<emphasis role="keywordflow">if</emphasis>(vString[i]&#32;!=&#32;<emphasis role="stringliteral">&quot;\r&quot;</emphasis>&#32;&amp;&amp;&#32;vString[i]&#32;!=&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;&amp;&amp;&#32;vString[i]&#32;!=&#32;<emphasis role="stringliteral">&quot;\r\n&quot;</emphasis>&#32;&amp;&amp;&#32;vString[i]&#32;!=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{vec_raw.push_back(vString[i]);}&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CoreConfig.push_back(vec_raw);
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00298"/>00298 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00299"/>00299 }
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00300"/>00300 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00301"/>00301 <emphasis role="keywordtype">void</emphasis>&#32;TMXInputParameters::verbose()&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00302"/>00302 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00303"/>00303 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n***********************************\n&#32;***&#32;Input&#32;parameters&#32;***\n***********************************\n&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00304"/>00304 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;boolVisualization&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;boolVisualization&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00305"/>00305 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nThreads&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;nThreads&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00306"/>00306 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;isThreadMerging&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;isThreadMerging&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00307"/>00307 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Verbose&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Verbose&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00308"/>00308 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;BeamEnergy&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;BeamEnergy&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00309"/>00309 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Nparticles&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Nparticles&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00310"/>00310 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Nrun&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Nrun&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00311"/>00311 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ncycle&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Ncycle&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00312"/>00312 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;TimeOfRun&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&lt;&lt;&#32;TimeOfRun&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;s&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00313"/>00313 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;CoolingTime&#32;:&#32;&quot;</emphasis>&#32;&#32;&lt;&lt;&#32;CoolingTime&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;s&quot;</emphasis>&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00314"/>00314 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;P_beam&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;P_beam&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MW&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00315"/>00315 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;P_core&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;P_core&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MW&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00316"/>00316 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Geometry&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Geometry&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00317"/>00317 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;str_ROOTFileName&#32;:&#32;&quot;</emphasis>&#32;&#32;&lt;&lt;&#32;str_ROOTFileName&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00318"/>00318 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;int_Option&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;int_Option&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00319"/>00319 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;physName&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;physName&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00320"/>00320 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;isAbla&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;isAbla&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00321"/>00321 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;isRandomSeed&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;isRandomSeed&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00322"/>00322 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;isLEND&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;isLEND&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00323"/>00323 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;PrintModulo&#32;:&#32;&quot;</emphasis>&#32;&#32;&lt;&lt;&#32;PrintModulo&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00324"/>00324 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;TemperatureWorld&#32;:&#32;&quot;</emphasis>&#32;&#32;&lt;&lt;&#32;TemperatureWorld&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Kelvin&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00325"/>00325 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;TemperatureFuel&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;TemperatureFuel&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;Kelvin&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00326"/>00326 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;NbDiscardCycle&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;NbDiscardCycle&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00327"/>00327 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;ErrorLimitMCCubicVolume&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;ErrorLimitMCCubicVolume&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00328"/>00328 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;MCCubicVolumeLVname&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;MCCubicVolumeLVname&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00329"/>00329 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;ExtSourcePath&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;ExtSourcePath&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00330"/>00330 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;originKeff&#32;:&#32;(&#32;&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00331"/>00331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;i=0;&#32;i&lt;originKeff.size();&#32;++i)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;originKeff[i]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00332"/>00332 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00333"/>00333 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;worldR&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;worldR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00334"/>00334 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;worldZ&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;worldZ&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00335"/>00335 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;h0&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;h0&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00336"/>00336 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;XtargetPosition&#32;:&#32;&quot;</emphasis>&lt;&lt;&#32;XtargetPosition&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00337"/>00337 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;CheckGap&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;CheckGap&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00338"/>00338 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;check1r&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;check1r&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00339"/>00339 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;xTarget&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;xTarget&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00340"/>00340 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;yTarget&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;yTarget&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00341"/>00341 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;zTargetHeight&#32;:&#32;&quot;</emphasis>&lt;&lt;&#32;zTargetHeight&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00342"/>00342 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;targetgap&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&lt;&lt;&#32;targetgap&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00343"/>00343 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;xVariable&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&lt;&lt;&#32;xVariable&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00344"/>00344 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Target_Al_Xgap&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Target_Al_Xgap&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00345"/>00345 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Target_Al_Ygap&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Target_Al_Ygap&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00346"/>00346 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Al_thickness&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Al_thickness&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00347"/>00347 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Al_Tube_gap&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&lt;&lt;&#32;Al_Tube_gap&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00348"/>00348 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;airtopR&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;airtopR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00349"/>00349 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;AirTopZdistanceFromBottomtoTop&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&lt;&lt;&#32;AirTopZdistanceFromBottomtoTop&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00350"/>00350 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;reflectorZdistanceFromBottomtoTop&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;reflectorZdistanceFromBottomtoTop&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00351"/>00351 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;fetopZ&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;fetopZ&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00352"/>00352 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Cool10ZdistanceFromBottomtoBottom&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Cool10ZdistanceFromBottomtoBottom&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00353"/>00353 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;cool10R&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;cool10R&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00354"/>00354 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;cool10BottomGap&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;cool10BottomGap&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00355"/>00355 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;CoreShape&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;CoreShape&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00356"/>00356 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;FuelPlacement&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;FuelPlacement&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00357"/>00357 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Rpos_fuel&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Rpos_fuel&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00358"/>00358 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;FuelName&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;FuelName&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00359"/>00359 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;int_Nreplicate&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&lt;&lt;&#32;int_Nreplicate&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00360"/>00360 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;int_Nlayer&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;int_Nlayer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00361"/>00361 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;dbl_rRodsGap&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;dbl_rRodsGap&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00362"/>00362 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;GraphiteThickness&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;GraphiteThickness&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00363"/>00363 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;AbsorberThickness&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;AbsorberThickness&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00364"/>00364 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;PathToCoreLatticeFile&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;PathToCoreLatticeFile&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00365"/>00365 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;PathToAssemblyLatticeFile&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;PathToAssemblyLatticeFile&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00366"/>00366 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;TypeOfMesh&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;TypeOfMesh&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00367"/>00367 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;polarAxis&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;polarAxis&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00368"/>00368 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;origin_PolarMesh&#32;:&#32;(&#32;&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00369"/>00369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;i=0;&#32;i&lt;origin_PolarMesh.size();&#32;++i)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;origin_PolarMesh[i]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00370"/>00370 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00371"/>00371 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nbinsR&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;nbinsR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00372"/>00372 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;minR&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;minR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00373"/>00373 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;maxR&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;maxR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00374"/>00374 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nbinsTheta&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;nbinsTheta&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00375"/>00375 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;minTheta&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;minTheta&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;degree&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00376"/>00376 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;maxTheta&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;maxTheta&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;degree&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00377"/>00377 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nbinsX&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;nbinsX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00378"/>00378 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;minX&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;minX&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00379"/>00379 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;maxX&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;maxX&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00380"/>00380 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nbinsY&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;nbinsY&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00381"/>00381 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;minY&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;minY&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00382"/>00382 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;maxY&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;maxY&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00383"/>00383 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nbinsZ&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;nbinsZ&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00384"/>00384 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;minZ&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;minZ&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00385"/>00385 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;maxZ&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;maxZ&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00386"/>00386 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;hexPitch&#32;:&#32;&quot;</emphasis>&#32;&#32;&lt;&lt;&#32;hexPitch&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;mm&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00387"/>00387 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nbinsHexMinX&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;nbinsHexMinX&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00388"/>00388 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nbinsHexMaxX&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;nbinsHexMaxX&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00389"/>00389 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nbinsHexMinY&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;nbinsHexMinY&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00390"/>00390 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nbinsHexMaxY&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;nbinsHexMaxY&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00391"/>00391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;DPA.size();&#32;i++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;DPA&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;DPA[i][0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;DPA[i][1]&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00393"/>00393 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00394"/>00394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;EnergyDeposited.size();&#32;i++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Energy&#32;deposited&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;EnergyDeposited[i][0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;EnergyDeposited[i][1]&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00396"/>00396 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00397"/>00397 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;DetectionChamber.size();&#32;i++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Detection&#32;chamber&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;DetectionChamber[i][0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;DetectionChamber[i][1]&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00399"/>00399 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00400"/>00400 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;SurfaceCurrentSpectrum.size();&#32;i++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Neutron&#32;Surface&#32;Current&#32;Spectra&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;SurfaceCurrentSpectrum[i][0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;SurfaceCurrentSpectrum[i][1]&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00402"/>00402 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00403"/>00403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;SurfaceFluenceSpectrum.size();&#32;i++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Neutron&#32;Surface&#32;Fluence&#32;Spectra&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;SurfaceFluenceSpectrum[i][0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;SurfaceFluenceSpectrum[i][1]&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00405"/>00405 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00406"/>00406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;VolumeFluenceSpectrum.size();&#32;i++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Neutron&#32;Volume&#32;Fluence&#32;Spectra&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;VolumeFluenceSpectrum[i][0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;VolumeFluenceSpectrum[i][1]&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00408"/>00408 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00409"/>00409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;FluenceMap.size();&#32;i++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Fluence&#32;Map&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;FluenceMap[i][1]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&#32;in&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;FluenceMap[i][0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;in&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;FluenceMap[i][2]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;FluenceMapBinning[i].size();&#32;j++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;FluenceMapBinning[i][j]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00415"/>00415 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00416"/>00416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;PowerDensityMap.size();&#32;i++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Power&#32;Density&#32;Map&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;PowerDensityMap[i][1]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&#32;for&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;PowerDensityMap[i][0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;in&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;PowerDensityMap[i][2]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;PowerDensityMapBinning[i].size();&#32;j++)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;PowerDensityMapBinning[i][j]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00422"/>00422 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00423"/>00423 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;isEverythingNtuple:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;isEverythingNtuple&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00424"/>00424 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;keff_nbinsR2&#32;&#32;&#32;&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;keff_nbinsR2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00425"/>00425 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;keff_nbinsTheta&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;keff_nbinsTheta&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00426"/>00426 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;keff_nbinsZ&#32;&#32;&#32;&#32;&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;keff_nbinsZ&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00427"/>00427 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecutp_target&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecutp_target&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00428"/>00428 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecutg_target&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecutg_target&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00429"/>00429 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecute_target&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecute_target&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00430"/>00430 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecutp_lead&#32;&#32;&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecutp_lead&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00431"/>00431 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecutg_lead&#32;&#32;&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecutg_lead&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00432"/>00432 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecute_lead&#32;&#32;&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecute_lead&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00433"/>00433 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecutp_fuel&#32;&#32;&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecutp_fuel&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00434"/>00434 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecutg_fuel&#32;&#32;&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecutg_fuel&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00435"/>00435 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecute_fuel&#32;&#32;&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecute_fuel&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00436"/>00436 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecutp_world&#32;&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecutp_world&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00437"/>00437 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecutg_world&#32;&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecutg_world&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00438"/>00438 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ecute_world&#32;&#32;:&#32;&quot;</emphasis>&#32;&#32;&#32;&lt;&lt;&#32;Ecute_world&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;MeV&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00439"/>00439 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;SourceType&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;SourceType&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00440"/>00440 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;SourceNumber&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;SourceNumber&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00441"/>00441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;SourceNumber;&#32;++i)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Direction&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;src_XYZdirection[i][0]&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&#32;&lt;&lt;&#32;src_XYZdirection[i][1]&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&#32;&lt;&lt;&#32;src_XYZdirection[i][2]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Position&#32;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;src_XYZposition[i][0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&#32;&lt;&lt;&#32;src_XYZposition[i][1]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&#32;&lt;&lt;&#32;src_XYZposition[i][2]&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00444"/>00444 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00445"/>00445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;src_slabThicknesses.size();&#32;++i)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;i&#32;==&#32;0&#32;)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Slabs&#32;thicknesses&#32;:&#32;(&quot;</emphasis>&#32;;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;src_slabThicknesses[i];
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;i+1&#32;==&#32;src_slabThicknesses.size()&#32;)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00450"/>00450 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00451"/>00451 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00452"/>00452 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;PathToBurnupFile&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;PathToBurnupFile&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00453"/>00453 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;MaxRawSize&#32;=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00454"/>00454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;raw&#32;=&#32;0;&#32;raw&lt;CoreConfig.size();&#32;++raw)&#32;{&#32;<emphasis role="keywordflow">if</emphasis>(MaxRawSize&#32;&lt;&#32;(<emphasis role="keywordtype">int</emphasis>)CoreConfig[raw].size())&#32;{&#32;MaxRawSize&#32;=&#32;CoreConfig[raw].size();&#32;}&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00455"/>00455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;raw&#32;=&#32;0;&#32;raw&lt;CoreConfig.size();&#32;++raw)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(raw&#32;==&#32;0)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Core&#32;configuration&#32;:&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;column&#32;=&#32;0;&#32;column&lt;CoreConfig[raw].size();&#32;++column)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;(int)((MaxRawSize-CoreConfig[raw].size())/2);&#32;++i)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>;&#32;}&#32;<emphasis role="comment">//&#32;Empty&#32;position</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;CoreConfig[raw][column];&#32;&#32;&#32;<emphasis role="comment">//&#32;Rod&#32;to&#32;be&#32;placed</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;(int)(8-CoreConfig[raw][column].size());&#32;++i)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;&#32;}&#32;<emphasis role="comment">//&#32;To&#32;keep&#32;the&#32;same&#32;size&#32;for&#32;each&#32;string</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;(int)((MaxRawSize-CoreConfig[raw].size())/2);&#32;++i)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>;&#32;}&#32;<emphasis role="comment">//&#32;Empty&#32;position</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00464"/>00464 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00465"/>00465 }
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00466"/>00466 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00467"/>00467 <emphasis role="keywordtype">void</emphasis>&#32;TMXInputParameters::Initialize()&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00468"/>00468 &#32;&#32;&#32;&#32;boolVisualization=&#32;0;<emphasis role="comment">//&#32;Activation&#32;of&#32;the&#32;visualization&#32;(True&#32;or&#32;False)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00469"/>00469 &#32;&#32;&#32;&#32;nThreads=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;Threads&#32;if&#32;multithreading&#32;is&#32;activated</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00470"/>00470 &#32;&#32;&#32;&#32;isThreadMerging&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;Activation&#32;of&#32;thread&#32;merging&#32;into&#32;a&#32;ROOT&#32;file&#32;per&#32;run</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00471"/>00471 &#32;&#32;&#32;&#32;Verbose=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Verbose&#32;of&#32;the&#32;scoring&#32;manager</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00472"/>00472 &#32;&#32;&#32;&#32;BeamEnergy=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Energy&#32;of&#32;the&#32;beam&#32;particles</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00473"/>00473 &#32;&#32;&#32;&#32;Nparticles=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;particles&#32;to&#32;simulate</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00474"/>00474 &#32;&#32;&#32;&#32;Nrun=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;run&#32;to&#32;consider&#32;burn-up</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00475"/>00475 &#32;&#32;&#32;&#32;Ncycle=&#32;1;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;cycles&#32;to&#32;consider&#32;for&#32;keff&#32;computation&#32;with&#32;iteration&#32;power&#32;method&#32;option&#32;20</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00476"/>00476 &#32;&#32;&#32;&#32;TimeOfRun=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Real&#32;time&#32;of&#32;1&#32;run&#32;[s]</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00477"/>00477 &#32;&#32;&#32;&#32;CoolingTime=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Cooling&#32;time&#32;to&#32;consider&#32;at&#32;the&#32;end&#32;of&#32;the&#32;runs&#32;[s]</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00478"/>00478 &#32;&#32;&#32;&#32;P_beam=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Beam&#32;power&#32;[MW]</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00479"/>00479 &#32;&#32;&#32;&#32;P_core=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Core&#32;power&#32;[MW]</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00480"/>00480 &#32;&#32;&#32;&#32;Geometry=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Geometry&#32;to&#32;be&#32;used&#32;in&#32;the&#32;calculation&#32;(&#32;0&#32;=&#32;INR&#32;Troïtsk&#32;|&#32;1&#32;=&#32;Rez)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00481"/>00481 &#32;&#32;&#32;&#32;str_ROOTFileName=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;&#32;<emphasis role="comment">//&#32;Name&#32;of&#32;the&#32;output&#32;ROOT&#32;file</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00482"/>00482 &#32;&#32;&#32;&#32;int_Option=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Simulation&#32;of&#32;a&#32;part&#32;of&#32;the&#32;geometry&#32;(0&#32;=&#32;all&#32;|&#32;1&#32;=&#32;target&#32;only&#32;|&#32;2&#32;=&#32;target+lead&#32;)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00483"/>00483 &#32;&#32;&#32;&#32;physName=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Name&#32;of&#32;the&#32;physical&#32;model&#32;to&#32;use</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00484"/>00484 &#32;&#32;&#32;&#32;isAbla=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;of&#32;ABLA&#32;de-excitation&#32;model</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00485"/>00485 &#32;&#32;&#32;&#32;isRandomSeed=&#32;0;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;of&#32;Random&#32;seed&#32;for&#32;the&#32;calculation</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00486"/>00486 &#32;&#32;&#32;&#32;isLEND=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;of&#32;LEND&#32;for&#32;photonuclear&#32;process&#32;(needs&#32;LEND&#32;database&#32;with&#32;G4LENDDATA=&quot;pathToLendData&quot;</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00487"/>00487 &#32;&#32;&#32;&#32;PrintModulo=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;the&#32;calculation&#32;status&#32;every&#32;PrintModulo&#32;events</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00488"/>00488 &#32;&#32;&#32;&#32;TemperatureWorld=&#32;0;&#32;<emphasis role="comment">//&#32;Temperature&#32;of&#32;every&#32;material&#32;except&#32;the&#32;fuel</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00489"/>00489 &#32;&#32;&#32;&#32;TemperatureFuel=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;Temperature&#32;of&#32;the&#32;fuel</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00490"/>00490 &#32;&#32;&#32;&#32;NbDiscardCycle=&#32;0;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;cycle&#32;to&#32;discard&#32;from&#32;the&#32;keff&#32;calculation&#32;with&#32;option&#32;20</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00491"/>00491 &#32;&#32;&#32;&#32;ErrorLimitMCCubicVolume&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;Error&#32;upper&#32;limit&#32;on&#32;the&#32;estimation&#32;of&#32;the&#32;volume&#32;with&#32;the&#32;Monte&#32;Carlo&#32;method&#32;with&#32;option&#32;30</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00492"/>00492 &#32;&#32;&#32;&#32;MCCubicVolumeLVname&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;&#32;<emphasis role="comment">//&#32;Logical&#32;Volume&#32;cubic&#32;volume&#32;estimation&#32;by&#32;slice&#32;along&#32;Z&#32;axis&#32;using&#32;parallelWorld&#32;definition&#32;option&#32;30&#32;with&#32;a&#32;logical&#32;volume&#32;name</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00493"/>00493 &#32;&#32;&#32;&#32;ExtSourcePath=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Path&#32;to&#32;the&#32;external&#32;source.&#32;If&#32;filled,&#32;an&#32;external&#32;source&#32;will&#32;be&#32;used.</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00494"/>00494 &#32;&#32;&#32;&#32;worldR=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Radius&#32;of&#32;the&#32;concrete&#32;volume</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00495"/>00495 &#32;&#32;&#32;&#32;worldZ=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Half&#32;height&#32;of&#32;the&#32;concrete&#32;volume&#32;//&#32;5665.</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00496"/>00496 &#32;&#32;&#32;&#32;h0=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Height&#32;between&#32;the&#32;bottom&#32;of&#32;the&#32;pit&#32;and&#32;the&#32;center&#32;of&#32;the&#32;world&#32;volume&#32;(concrete)&#32;//&#32;1964.5*mm</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00497"/>00497 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;target&#32;tube</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00498"/>00498 &#32;&#32;&#32;&#32;XtargetPosition=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;Position&#32;along&#32;the&#32;beam&#32;axis&#32;(0&#32;=&#32;center&#32;of&#32;the&#32;driver&#32;fuel)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00499"/>00499 &#32;&#32;&#32;&#32;CheckGap=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Target&#32;tube&#32;thickness</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00500"/>00500 &#32;&#32;&#32;&#32;check1r=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Tube&#32;internal&#32;radius</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00501"/>00501 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;target&#32;plates</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00502"/>00502 &#32;&#32;&#32;&#32;xTarget=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;half&#32;Target&#32;thickness&#32;&#32;//&#32;initial&#32;=&#32;10&#32;mm</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00503"/>00503 &#32;&#32;&#32;&#32;yTarget=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;half&#32;Target&#32;width&#32;//&#32;initial&#32;=&#32;48&#32;mm</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00504"/>00504 &#32;&#32;&#32;&#32;zTargetHeight=&#32;0;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;half&#32;Target&#32;height&#32;(Oz)&#32;//&#32;initial&#32;=&#32;252&#32;mm</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00505"/>00505 &#32;&#32;&#32;&#32;nT=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;nT+1&#32;number&#32;of&#32;the&#32;target&#32;placing</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00506"/>00506 &#32;&#32;&#32;&#32;targetgap=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Distance&#32;between&#32;2&#32;target&#32;plates&#32;//&#32;initial&#32;=&#32;1&#32;mm</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00507"/>00507 &#32;&#32;&#32;&#32;xVariable=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;is&#32;the&#32;variable&#32;for&#32;the&#32;target&#32;thickness&#32;(left&#32;parts)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00508"/>00508 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;Al&#32;parts&#32;of&#32;the&#32;target</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00509"/>00509 &#32;&#32;&#32;&#32;Target_Al_Xgap=&#32;0;&#32;&#32;&#32;<emphasis role="comment">//&#32;Gap&#32;between&#32;target&#32;plates&#32;and&#32;Aluminium&#32;parts&#32;along&#32;X-axis,&#32;Initial&#32;=&#32;5&#32;mm</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00510"/>00510 &#32;&#32;&#32;&#32;Target_Al_Ygap=&#32;0;&#32;&#32;&#32;<emphasis role="comment">//&#32;Gap&#32;between&#32;target&#32;plates&#32;and&#32;Aluminium&#32;parts&#32;along&#32;Y-axis,&#32;Initial&#32;=&#32;1&#32;mm,&#32;5&#32;mm&#32;a&#32;mettre</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00511"/>00511 &#32;&#32;&#32;&#32;Al_thickness=&#32;0;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Thickness&#32;of&#32;Aluminium&#32;part&#32;(empty&#32;structure),&#32;Initial&#32;=&#32;1&#32;mm</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00512"/>00512 &#32;&#32;&#32;&#32;Al_Tube_gap=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Gap&#32;between&#32;Aluminium&#32;parts&#32;and&#32;the&#32;tube&#32;containing&#32;the&#32;target&#32;(fLogicCheck1U),&#32;Initial&#32;=&#32;1.5&#32;mm</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00513"/>00513 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Air&#32;on&#32;the&#32;top&#32;of&#32;the&#32;pit</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00514"/>00514 &#32;&#32;&#32;&#32;airtopR=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Radius&#32;of&#32;the&#32;air&#32;cylinder</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00515"/>00515 &#32;&#32;&#32;&#32;AirTopZdistanceFromBottomtoTop=&#32;0;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;distance&#32;between&#32;the&#32;bottom&#32;of&#32;the&#32;pit&#32;and&#32;the&#32;top&#32;of&#32;the&#32;air&#32;cylinder</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00516"/>00516 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Water-cooled&#32;heat&#32;shield&#32;(reflector&#32;in&#32;the&#32;pit)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00517"/>00517 &#32;&#32;&#32;&#32;reflectorZdistanceFromBottomtoTop=&#32;0;&#32;<emphasis role="comment">//&#32;distance&#32;between&#32;the&#32;bottom&#32;of&#32;the&#32;pit&#32;and&#32;the&#32;top&#32;of&#32;the&#32;water-cooled&#32;heat&#32;shield&#32;(reflector)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00518"/>00518 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iron&#32;top</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00519"/>00519 &#32;&#32;&#32;&#32;fetopZ=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;half&#32;Height&#32;(thickness)&#32;of&#32;the&#32;iron&#32;part&#32;on&#32;the&#32;top&#32;of&#32;the&#32;water-cooled&#32;heat&#32;shield&#32;(reflector)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00520"/>00520 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Experimental&#32;area&#32;surrounded&#32;by&#32;the&#32;reflector</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00521"/>00521 &#32;&#32;&#32;&#32;Cool10ZdistanceFromBottomtoBottom=&#32;0;&#32;<emphasis role="comment">//&#32;distance&#32;between&#32;the&#32;bottom&#32;of&#32;the&#32;pit&#32;and&#32;the&#32;bottom&#32;of&#32;the&#32;experimental&#32;area&#32;(~reflector&#32;bottom&#32;thickness)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00522"/>00522 &#32;&#32;&#32;&#32;cool10R=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Radius&#32;of&#32;the&#32;experimental&#32;area</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00523"/>00523 &#32;&#32;&#32;&#32;cool10BottomGap=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;air&#32;gap&#32;at&#32;the&#32;bottom&#32;between&#32;the&#32;water-cooled&#32;heat&#32;shield&#32;(reflector)&#32;and&#32;the&#32;lead&#32;volume</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00524"/>00524 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fuel&#32;in&#32;the&#32;driver&#32;area</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00525"/>00525 &#32;&#32;&#32;&#32;CoreShape=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Shape&#32;of&#32;sub-critical&#32;core&#32;(Hexagonal&#32;or&#32;Cylindrical)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00526"/>00526 &#32;&#32;&#32;&#32;FuelPlacement=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Hexagonal&#32;or&#32;Cylindrical&#32;placement&#32;of&#32;the&#32;fuel</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00527"/>00527 &#32;&#32;&#32;&#32;Rpos_fuel=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Radial&#32;position&#32;of&#32;the&#32;first&#32;rod&#32;in&#32;the&#32;fuel&#32;assembly&#32;(from&#32;0&#32;to&#32;external&#32;rod&#32;side)</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00528"/>00528 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;RodZ=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;half&#32;Height&#32;of&#32;the&#32;fuel&#32;rods</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00529"/>00529 &#32;&#32;&#32;&#32;CladdingZ=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;half&#32;Height&#32;of&#32;the&#32;cladding</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00530"/>00530 &#32;&#32;&#32;&#32;FuelZ=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;half&#32;Height&#32;of&#32;the&#32;fuel</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00531"/>00531 &#32;&#32;&#32;&#32;dbl_PolygoneWidth=&#32;0;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;width&#32;between&#32;2&#32;opposite&#32;sides&#32;of&#32;a&#32;fuel&#32;rod,&#32;not&#32;the&#32;maximum&#32;of&#32;of&#32;the&#32;polygon</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00532"/>00532 &#32;&#32;&#32;&#32;FuelName=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Name&#32;of&#32;the&#32;fuel&#32;rod&#32;to&#32;use</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00533"/>00533 &#32;&#32;&#32;&#32;int_Nreplicate=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;fuel&#32;elements&#32;per&#32;layer</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00534"/>00534 &#32;&#32;&#32;&#32;int_Nlayer=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;layer&#32;for&#32;fuel&#32;assembly</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00535"/>00535 &#32;&#32;&#32;&#32;dbl_rRodsGap=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Gap&#32;between&#32;2&#32;fuel&#32;rods</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00536"/>00536 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;CladdingWallThickness=&#32;0;//&#32;Thickness&#32;of&#32;the&#32;cladding&#32;wall&#32;surrounding&#32;the&#32;fuel</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00537"/>00537 &#32;&#32;&#32;&#32;GraphiteThickness=&#32;0;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Thickness&#32;of&#32;the&#32;graphite&#32;reflector&#32;by&#32;the&#32;lead</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00538"/>00538 &#32;&#32;&#32;&#32;AbsorberThickness=&#32;0;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Thickness&#32;of&#32;the&#32;neutron&#32;absorber&#32;between&#32;the&#32;lead&#32;and&#32;the&#32;Fuel&#32;driver</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00539"/>00539 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00540"/>00540 &#32;&#32;&#32;&#32;PathToCoreLatticeFile&#32;=&#32;<emphasis role="stringliteral">&quot;/home/&quot;</emphasis>&#32;+&#32;(std::string)(getenv(<emphasis role="stringliteral">&quot;USER&quot;</emphasis>))&#32;+&#32;<emphasis role="stringliteral">&quot;/Simulation/ADS_SimulationCode/G4-NeutronTransport/src/geometry/SVBR100/latticeMap/HexagonalLat_FuelCore.txt&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00541"/>00541 &#32;&#32;&#32;&#32;PathToAssemblyLatticeFile&#32;=&#32;<emphasis role="stringliteral">&quot;/home/&quot;</emphasis>&#32;+&#32;(std::string)(getenv(<emphasis role="stringliteral">&quot;USER&quot;</emphasis>))&#32;+&#32;<emphasis role="stringliteral">&quot;/Simulation/ADS_SimulationCode/G4-NeutronTransport/src/geometry/SVBR100/latticeMap/HexagonalLat_FuelAssembly.txt&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00542"/>00542 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00543"/>00543 &#32;&#32;&#32;&#32;TypeOfMesh=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00544"/>00544 &#32;&#32;&#32;&#32;polarAxis=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00545"/>00545 &#32;&#32;&#32;&#32;nbinsR=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00546"/>00546 &#32;&#32;&#32;&#32;minR=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00547"/>00547 &#32;&#32;&#32;&#32;maxR=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00548"/>00548 &#32;&#32;&#32;&#32;nbinsTheta=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00549"/>00549 &#32;&#32;&#32;&#32;minTheta=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00550"/>00550 &#32;&#32;&#32;&#32;maxTheta=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00551"/>00551 &#32;&#32;&#32;&#32;nbinsX=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00552"/>00552 &#32;&#32;&#32;&#32;minX=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00553"/>00553 &#32;&#32;&#32;&#32;maxX=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00554"/>00554 &#32;&#32;&#32;&#32;nbinsY=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00555"/>00555 &#32;&#32;&#32;&#32;minY=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00556"/>00556 &#32;&#32;&#32;&#32;maxY=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00557"/>00557 &#32;&#32;&#32;&#32;nbinsZ=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00558"/>00558 &#32;&#32;&#32;&#32;minZ=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00559"/>00559 &#32;&#32;&#32;&#32;maxZ=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00560"/>00560 &#32;&#32;&#32;&#32;hexPitch=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00561"/>00561 &#32;&#32;&#32;&#32;nbinsHexMinX=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00562"/>00562 &#32;&#32;&#32;&#32;nbinsHexMaxX=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00563"/>00563 &#32;&#32;&#32;&#32;nbinsHexMinY=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00564"/>00564 &#32;&#32;&#32;&#32;nbinsHexMaxY=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00565"/>00565 &#32;&#32;&#32;&#32;DPA.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00566"/>00566 &#32;&#32;&#32;&#32;EnergyDeposited.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00567"/>00567 &#32;&#32;&#32;&#32;DetectionChamber.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00568"/>00568 &#32;&#32;&#32;&#32;SurfaceCurrentSpectrum.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00569"/>00569 &#32;&#32;&#32;&#32;SurfaceFluenceSpectrum.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00570"/>00570 &#32;&#32;&#32;&#32;VolumeFluenceSpectrum.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00571"/>00571 &#32;&#32;&#32;&#32;FluenceMap.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00572"/>00572 &#32;&#32;&#32;&#32;FluenceMapBinning.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00573"/>00573 &#32;&#32;&#32;&#32;PowerDensityMap.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00574"/>00574 &#32;&#32;&#32;&#32;PowerDensityMapBinning.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00575"/>00575 &#32;&#32;&#32;&#32;isEverythingNtuple&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00576"/>00576 &#32;&#32;&#32;&#32;keff_nbinsR2=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00577"/>00577 &#32;&#32;&#32;&#32;keff_nbinsTheta=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00578"/>00578 &#32;&#32;&#32;&#32;keff_nbinsZ=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00579"/>00579 &#32;&#32;&#32;&#32;Ecutp_target=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00580"/>00580 &#32;&#32;&#32;&#32;Ecutg_target=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00581"/>00581 &#32;&#32;&#32;&#32;Ecute_target=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00582"/>00582 &#32;&#32;&#32;&#32;Ecutp_lead=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00583"/>00583 &#32;&#32;&#32;&#32;Ecutg_lead=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00584"/>00584 &#32;&#32;&#32;&#32;Ecute_lead=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00585"/>00585 &#32;&#32;&#32;&#32;Ecutp_fuel=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00586"/>00586 &#32;&#32;&#32;&#32;Ecutg_fuel=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00587"/>00587 &#32;&#32;&#32;&#32;Ecute_fuel=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00588"/>00588 &#32;&#32;&#32;&#32;Ecutp_world=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00589"/>00589 &#32;&#32;&#32;&#32;Ecutg_world=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00590"/>00590 &#32;&#32;&#32;&#32;Ecute_world=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00591"/>00591 &#32;&#32;&#32;&#32;SourceType&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00592"/>00592 &#32;&#32;&#32;&#32;SourceNumber=&#32;0;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00593"/>00593 &#32;&#32;&#32;&#32;src_XYZdirection.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00594"/>00594 &#32;&#32;&#32;&#32;src_XYZposition.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00595"/>00595 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00596"/>00596 &#32;&#32;&#32;&#32;PathToBurnupFile&#32;=&#32;<emphasis role="stringliteral">&quot;/home/&quot;</emphasis>&#32;+&#32;(std::string)(getenv(<emphasis role="stringliteral">&quot;USER&quot;</emphasis>))&#32;+&#32;<emphasis role="stringliteral">&quot;/Simulation/ADS_SimulationCode/LVR15fuel_with_burnup&quot;</emphasis>;
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00597"/>00597 <emphasis role="comment">//&#32;&#32;&#32;&#32;PathToBurnupFile&#32;=&#32;&quot;/home/tfrosio/Desktop/ads_transmutex/ADS_SimulationCode/ADS_SimulationCode/LVR15fuel_with_burnup&quot;;</emphasis>
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00598"/>00598 &#32;&#32;&#32;&#32;CoreConfig.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00599"/>00599 
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00600"/>00600 &#32;&#32;&#32;&#32;originKeff.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00601"/>00601 &#32;&#32;&#32;&#32;origin_PolarMesh.clear();
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00602"/>00602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;i=0;&#32;i&lt;3;&#32;++i)&#32;{
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00603"/>00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin_PolarMesh.push_back(0);
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00604"/>00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;originKeff.push_back(0);
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00605"/>00605 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_input_parameters_8cc_source_1l00606"/>00606 }
</programlisting></section>
