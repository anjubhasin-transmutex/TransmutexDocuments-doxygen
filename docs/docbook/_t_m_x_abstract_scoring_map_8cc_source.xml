<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__t_m_x_abstract_scoring_map_8cc_source" xml:lang="en-US">
<title>TMXAbstractScoringMap.cc</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/src/scoring/TMXAbstractScoringMap.cc</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00001"/>00001 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00002"/>00002 <emphasis role="comment">//&#32;\brief&#32;Implementation&#32;of&#32;the&#32;Abstract&#32;Scoring&#32;of&#32;Map</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00003"/>00003 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00004"/>00004 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00006"/>00006 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00007"/>00007 <emphasis role="comment">//&#32;TMXAbstractScoringMap</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00008"/>00008 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00009"/>00009 <emphasis role="comment">//&#32;Thomas&#32;Guilbaud,&#32;Transmutex,&#32;15/07/2021</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00010"/>00010 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00012"/>00012 <emphasis role="comment"></emphasis><emphasis role="comment">//&#32;Scoring&#32;in&#32;Map</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00014"/>00014 <emphasis role="comment"></emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&quot;TMXAbstractScoringMap.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00016"/>00016 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00017"/>00017 <emphasis role="comment">//&#32;GEANT4&#32;libraries</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&quot;Analysis.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&quot;G4Threading.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00020"/>00020 <emphasis role="preprocessor">#include&#32;&quot;G4VProcess.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00021"/>00021 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00022"/>00022 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00023"/>00023 TMXAbstractScoringMap::TMXAbstractScoringMap(<link linkend="_class_t_m_x_input_parameters">TMXInputParameters</link>*&#32;parameter,&#32;std::string&#32;name)
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00024"/>00024 :&#32;&#32;&#32;<link linkend="_class_t_m_x_abstract_scoring">TMXAbstractScoring</link>(parameter,&#32;name),
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00025"/>00025 &#32;&#32;&#32;&#32;m_p(parameter),
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00026"/>00026 &#32;&#32;&#32;&#32;m_meshType(<emphasis role="stringliteral">&quot;&quot;</emphasis>)
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00027"/>00027 {
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(G4Threading::G4GetThreadId()&#32;&lt;&#32;0)&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;G4cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;TMXScoringMap&#32;not&#32;yet&#32;fully&#32;implemented&#32;(if&#32;you&#32;want&#32;to&#32;use&#32;it,&#32;the&#32;binning&#32;must&#32;be&#32;same&#32;as&#32;the&#32;ParallelScoringWorld&apos;s&#32;binning)&quot;</emphasis>&#32;&lt;&lt;&#32;G4endl;
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00030"/>00030 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00031"/>00031 }
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00032"/>00032 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00033"/>00033 TMXAbstractScoringMap::~TMXAbstractScoringMap()
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00034"/>00034 {}
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00035"/>00035 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00036"/>00036 <emphasis role="comment">//------------------------------------------------------------------------------*</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00037"/>00037 <emphasis role="comment">//&#32;Scorer</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00038"/>00038 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00039"/>00039 <emphasis role="keywordtype">void</emphasis>&#32;TMXAbstractScoringMap::scoreMap(<emphasis role="keyword">const</emphasis>&#32;G4Step*&#32;theStep,&#32;G4double&#32;value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isPerCubicVolume)&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IsInParticleAndPVconditions(theStep))&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scorePerMesh(theStep,&#32;value,&#32;isPerCubicVolume);
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00042"/>00042 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00043"/>00043 }
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00044"/>00044 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00045"/>00045 <emphasis role="keywordtype">void</emphasis>&#32;TMXAbstractScoringMap::scorePerMesh(<emphasis role="keyword">const</emphasis>&#32;G4Step*&#32;theStep,&#32;G4double&#32;value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isPerCubicVolume)&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00046"/>00046 &#32;&#32;&#32;&#32;G4ThreeVector&#32;position&#32;=&#32;theStep-&gt;GetPreStepPoint()-&gt;GetPosition();
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Position&#32;in&#32;mm</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00048"/>00048 &#32;&#32;&#32;&#32;G4double&#32;x&#32;=&#32;position.x()/mm,&#32;y&#32;=&#32;position.y()/mm,&#32;z&#32;=&#32;position.z()/mm;
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00049"/>00049 &#32;&#32;&#32;&#32;G4double&#32;r&#32;=&#32;sqrt(x*x+y*y);&#32;<emphasis role="comment">//&#32;,&#32;theta&#32;=&#32;atan(y/x)*deg;</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::vector&lt;double&gt;&#32;m_binning&#32;=&#32;mapPVHisto2DBinning[PVScorer];</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00051"/>00051 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!!!&#32;Normalization&#32;by&#32;volume&#32;in&#32;cm3&#32;(ex:&#32;W/cm3,&#32;eV/cm3,&#32;...)&#32;!!!</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00053"/>00053 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Type&#32;of&#32;projection</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_meshType&#32;==&#32;<emphasis role="stringliteral">&quot;RZ&quot;</emphasis>)&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;rBin&#32;=&#32;m_binning[0],&#32;rMin&#32;=&#32;m_binning[1],&#32;rMax&#32;=&#32;m_binning[2],
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zBin&#32;=&#32;m_binning[3],&#32;zMin&#32;=&#32;m_binning[4],&#32;zMax&#32;=&#32;m_binning[5];
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rMin&#32;&lt;=&#32;r&#32;&amp;&amp;&#32;r&#32;&lt;=&#32;rMax&#32;&amp;&amp;&#32;zMin&#32;&lt;=&#32;z&#32;&amp;&amp;&#32;z&#32;&lt;=&#32;zMax)&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_TH2D-&gt;Fill(
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r,&#32;z,
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isPerCubicVolume&#32;?&#32;value/getRingVolume(r,&#32;rBin,&#32;rMin,&#32;rMax,&#32;zBin,&#32;zMin,&#32;zMax)&#32;:&#32;value
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00064"/>00064 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_meshType&#32;==&#32;<emphasis role="stringliteral">&quot;XY&quot;</emphasis>)&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;xBin&#32;=&#32;m_binning[0],&#32;xMin&#32;=&#32;m_binning[1],&#32;xMax&#32;=&#32;m_binning[2],
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yBin&#32;=&#32;m_binning[3],&#32;yMin&#32;=&#32;m_binning[4],&#32;yMax&#32;=&#32;m_binning[5],
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zBin&#32;=&#32;m_binning[6],&#32;zMin&#32;=&#32;m_binning[7],&#32;zMax&#32;=&#32;m_binning[8];
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((xMin&#32;&lt;&#32;x&#32;&amp;&amp;&#32;x&#32;&lt;=&#32;xMax)&#32;&amp;&amp;&#32;(yMin&#32;&lt;&#32;y&#32;&amp;&amp;&#32;y&#32;&lt;=&#32;yMax)&#32;&amp;&amp;&#32;(zMin&#32;&lt;&#32;z&#32;&amp;&amp;&#32;z&#32;&lt;=&#32;zMax))&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;(theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep())&#32;{</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::string&#32;processName&#32;=&#32;theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep()-&gt;GetProcessName();</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;(processName&#32;!=&#32;&quot;ParallelScoringWorld&quot;)&#32;{</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_TH2D-&gt;Fill(
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x,&#32;y,
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isPerCubicVolume&#32;?&#32;value/getCubicVolume(xBin,&#32;xMin,&#32;xMax,&#32;yBin,&#32;yMin,&#32;yMax,&#32;zBin,&#32;zMin,&#32;zMax)&#32;:&#32;value
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00080"/>00080 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_meshType&#32;==&#32;<emphasis role="stringliteral">&quot;XZ&quot;</emphasis>)&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;xBin&#32;=&#32;m_binning[0],&#32;xMin&#32;=&#32;m_binning[1],&#32;xMax&#32;=&#32;m_binning[2],
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yBin&#32;=&#32;m_binning[3],&#32;yMin&#32;=&#32;m_binning[4],&#32;yMax&#32;=&#32;m_binning[5],
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zBin&#32;=&#32;m_binning[6],&#32;zMin&#32;=&#32;m_binning[7],&#32;zMax&#32;=&#32;m_binning[8];
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((xMin&#32;&lt;=&#32;x&#32;&amp;&amp;&#32;x&#32;&lt;=&#32;xMax)&#32;&amp;&amp;&#32;(yMin&#32;&lt;=&#32;y&#32;&amp;&amp;&#32;y&#32;&lt;=&#32;yMax)&#32;&amp;&amp;&#32;(zMin&#32;&lt;=&#32;z&#32;&amp;&amp;&#32;z&#32;&lt;=&#32;zMax))&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_TH2D-&gt;Fill(
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x,&#32;z,
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isPerCubicVolume&#32;?&#32;value/getCubicVolume(xBin,&#32;xMin,&#32;xMax,&#32;yBin,&#32;yMin,&#32;yMax,&#32;zBin,&#32;zMin,&#32;zMax)&#32;:&#32;value
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00091"/>00091 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_meshType&#32;==&#32;<emphasis role="stringliteral">&quot;YZ&quot;</emphasis>)&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;xBin&#32;=&#32;m_binning[0],&#32;xMin&#32;=&#32;m_binning[1],&#32;xMax&#32;=&#32;m_binning[2],
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yBin&#32;=&#32;m_binning[3],&#32;yMin&#32;=&#32;m_binning[4],&#32;yMax&#32;=&#32;m_binning[5],
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zBin&#32;=&#32;m_binning[6],&#32;zMin&#32;=&#32;m_binning[7],&#32;zMax&#32;=&#32;m_binning[8];
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((xMin&#32;&lt;=&#32;x&#32;&amp;&amp;&#32;x&#32;&lt;=&#32;xMax)&#32;&amp;&amp;&#32;(yMin&#32;&lt;=&#32;y&#32;&amp;&amp;&#32;y&#32;&lt;=&#32;yMax)&#32;&amp;&amp;&#32;(zMin&#32;&lt;=&#32;z&#32;&amp;&amp;&#32;z&#32;&lt;=&#32;zMax))&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_TH2D-&gt;Fill(
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y,&#32;z,
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isPerCubicVolume&#32;?&#32;value/getCubicVolume(xBin,&#32;xMin,&#32;xMax,&#32;yBin,&#32;yMin,&#32;yMax,&#32;zBin,&#32;zMin,&#32;zMax)&#32;:&#32;value
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00102"/>00102 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;if&#32;(mapPVHisto2DType[PVScorer].find(&quot;Polar&quot;)&#32;!=&#32;std::string::npos)&#32;{</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00104"/>00104 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;double&#32;rBin&#32;=&#32;m_binning[0],&#32;rMin&#32;=&#32;m_binning[1],&#32;rMax&#32;=&#32;m_binning[2],</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tBin&#32;=&#32;m_binning[3],&#32;tMin&#32;=&#32;m_binning[4],&#32;tMax&#32;=&#32;m_binning[5],</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zBin&#32;=&#32;m_binning[6],&#32;zMin&#32;=&#32;m_binning[7],&#32;zMax&#32;=&#32;m_binning[8];</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;if&#32;((rMin&#32;&lt;=&#32;r&#32;&amp;&amp;&#32;r&#32;&lt;=&#32;rMax)&#32;&amp;&amp;&#32;(tMin&#32;&lt;=&#32;theta&#32;&amp;&amp;&#32;theta&#32;&lt;=&#32;tMax)&#32;&amp;&amp;&#32;(zMin&#32;&lt;=&#32;z&#32;&amp;&amp;&#32;z&#32;&lt;=&#32;zMax))&#32;{</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;analysisManager-&gt;FillH2(</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mapPVHisto2DId[PVScorer],</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r,&#32;theta,</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isPerCubicVolume&#32;?&#32;value/getRingVolume(r,&#32;rBin,&#32;rMin,&#32;rMax,&#32;zBin,&#32;zMin,&#32;zMax)/tBin&#32;:&#32;value</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00115"/>00115 }
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00116"/>00116 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00117"/>00117 <emphasis role="comment">//------------------------------------------------------------------------------*</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00118"/>00118 <emphasis role="comment">//&#32;Setter</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00119"/>00119 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00120"/>00120 <emphasis role="keywordtype">void</emphasis>&#32;TMXAbstractScoringMap::SetMeshType(std::string&#32;meshType)&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00121"/>00121 &#32;&#32;&#32;&#32;m_meshType&#32;=&#32;meshType;
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00122"/>00122 }
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00123"/>00123 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00124"/>00124 <emphasis role="comment">//------------------------------------------------------------------------------*</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00125"/>00125 <emphasis role="comment">//&#32;Getter</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00126"/>00126 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00127"/>00127 <emphasis role="keywordtype">double</emphasis>&#32;TMXAbstractScoringMap::getRingVolume(G4double&#32;rPosition,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rBin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rMin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rMax,&#32;<emphasis role="keywordtype">double</emphasis>&#32;zBin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;zMin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;zMax)&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00128"/>00128 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dz&#32;=&#32;(zMax-zMin)/zBin,
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dr&#32;=&#32;(rMax-rMin)/rBin;
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00130"/>00130 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;rStep&#32;=&#32;(double)((<emphasis role="keywordtype">int</emphasis>)(rPosition/dr))*dr;
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00131"/>00131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(M_PI*((rStep+dr)*(rStep+dr)-rStep*rStep)*dz&#32;*&#32;1e-3);&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;volume&#32;in&#32;cm3</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00132"/>00132 }
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00133"/>00133 
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00134"/>00134 <emphasis role="keywordtype">double</emphasis>&#32;TMXAbstractScoringMap::getCubicVolume(
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;xBin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;xMin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;xMax,
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00136"/>00136 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;yBin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;yMin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;yMax,
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;zBin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;zMin,&#32;<emphasis role="keywordtype">double</emphasis>&#32;zMax
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00138"/>00138 )&#32;{
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;dx&#32;=&#32;(xMax-xMin)/xBin,&#32;dy&#32;=&#32;(yMax-yMin)/yBin,&#32;dz&#32;=&#32;(zMax-zMin)/zBin;
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(dx*dy*dz&#32;*&#32;1e-3);&#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;volume&#32;in&#32;cm3</emphasis>
<anchor xml:id="__t_m_x_abstract_scoring_map_8cc_source_1l00141"/>00141 }
</programlisting></section>
