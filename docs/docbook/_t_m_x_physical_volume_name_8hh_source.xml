<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__t_m_x_physical_volume_name_8hh_source" xml:lang="en-US">
<title>TMXPhysicalVolumeName.hh</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/include/TMXPhysicalVolumeName.hh</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00001"/>00001 
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00002"/>00002 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00003"/>00003 <emphasis role="comment">//&#32;&#32;To&#32;get&#32;a&#32;volume&#32;number&#32;automatically&#32;when&#32;defining&#32;the&#32;geometry.</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00004"/>00004 <emphasis role="comment">//&#32;&#32;It&#32;will&#32;serve&#32;to&#32;fill&#32;histograms&#32;with&#32;a&#32;volume&#32;number&#32;corresponding&#32;to&#32;its&#32;physical&#32;volume.</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00005"/>00005 <emphasis role="comment">//&#32;&#32;For&#32;this&#32;purpose,&#32;it&#32;is&#32;necessary&#32;to&#32;instanciate&#32;this&#32;class&#32;in&#32;steppingAction&#32;and&#32;DetectorConstruction&#32;or&#32;its&#32;subclass.</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00006"/>00006 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00008"/>00008 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00009"/>00009 <emphasis role="comment">//&#32;TMXPhysicalVolumeName</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00010"/>00010 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00011"/>00011 <emphasis role="comment">//&#32;Donovan&#32;Maire,&#32;Transmutex,&#32;04/09/2020</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00012"/>00012 <emphasis role="comment">//&#32;Copyright&#32;2020&#32;Transmutex&#32;SA&#32;--&#32;all&#32;rights&#32;reserved</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00014"/>00014 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00015"/>00015 
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00016"/>00016 <emphasis role="preprocessor">#ifndef&#32;TMXPhysicalVolumeName_H</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00017"/>00017 <emphasis role="preprocessor">#define&#32;TMXPhysicalVolumeName_H&#32;1</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00018"/>00018 
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00019"/>00019 <emphasis role="comment">//&#32;Transmutex&#32;class</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00020"/>00020 
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00021"/>00021 <emphasis role="comment">//&#32;C++&#32;class</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00022"/>00022 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00023"/>00023 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00024"/>00024 
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00025"/><link linkend="_class_t_m_x_physical_volume_name">00025</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_t_m_x_physical_volume_name">TMXPhysicalVolumeName</link>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00026"/>00026 {
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00027"/>00027 &#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_m_x_physical_volume_name_1a27ae3e1c1ecb5d31099f462893a7afe6">TMXPhysicalVolumeName</link>();
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_m_x_physical_volume_name">~TMXPhysicalVolumeName</link>();
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Initialize();
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Register&#32;physical&#32;volume&#32;name&#32;in&#32;a&#32;map</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeInTargetRegion&#32;(std::string&#32;PhysicalVolumeName);&#32;&#32;&#32;<emphasis role="comment">//&#32;Beam&#32;pipe,&#32;beam&#32;window,&#32;target&#32;slabs,&#32;target&#32;coolant,&#32;target&#32;tube</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeInLeadRegion&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);&#32;&#32;&#32;<emphasis role="comment">//&#32;Lead&#32;around&#32;target&#32;or&#32;in&#32;fast&#32;neutron&#32;flux&#32;region,&#32;sensors&#32;inside&#32;lead,&#32;samples,&#32;etc.</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeInCoreRegion&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);&#32;&#32;&#32;<emphasis role="comment">//&#32;Fuel,&#32;cladding,&#32;coolant&#32;insideand&#32;between&#32;fuel&#32;rods,&#32;etc.</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeInVesselRegion&#32;(std::string&#32;PhysicalVolumeName);&#32;&#32;&#32;<emphasis role="comment">//&#32;Vessel,&#32;coolant,&#32;moderator,&#32;sensors,&#32;etc.</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeInWorldRegion&#32;&#32;(std::string&#32;PhysicalVolumeName);&#32;&#32;&#32;<emphasis role="comment">//&#32;Outside&#32;vessel</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsTarget&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);&#32;&#32;<emphasis role="comment">//&#32;Target&#32;slabs</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsTargetCoolant(std::string&#32;PhysicalVolumeName);&#32;&#32;<emphasis role="comment">//&#32;Target&#32;coolant</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsTargetTub&#32;&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);&#32;&#32;<emphasis role="comment">//&#32;Target&#32;tube&#32;surrounding&#32;the&#32;target&#32;coolant</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsLead&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsFuel&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsWorld&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsBeamPipe&#32;&#32;&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsBeamWindow&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsModerator&#32;&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsVessel&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsSample&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetNewVolumeAsSensor&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::string&#32;PhysicalVolumeName);
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;and&#32;Set&#32;volume&#32;number</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;GetVolumeNumber(std::string&#32;PhysicalVolumeName)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fMap_PhysicalVolume[PhysicalVolumeName];&#32;}
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetVolumeNumber(<emphasis role="keywordtype">int</emphasis>&#32;VolumeNumber,&#32;std::string&#32;PhysicalVolumeName)&#32;{&#32;fMap_PhysicalVolume[PhysicalVolumeName]&#32;=&#32;VolumeNumber;&#32;}
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;of&#32;the&#32;physical&#32;volume</emphasis>
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsTarget(std::string&#32;PhysicalVolumeName)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(fMap_PhysicalVolume[PhysicalVolumeName]&#32;==&#32;targetNbr);&#32;}
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsLead&#32;&#32;(std::string&#32;PhysicalVolumeName)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(fMap_PhysicalVolume[PhysicalVolumeName]&#32;==&#32;leadNbr&#32;&#32;);&#32;}
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00060"/>00060 &#32;&#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;&#32;std::string,&#32;int&gt;&#32;fMap_PhysicalVolume;
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;targetNbr;
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;leadNbr;
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00064"/>00064 
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00065"/>00065 };
<anchor xml:id="__t_m_x_physical_volume_name_8hh_source_1l00066"/>00066 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
