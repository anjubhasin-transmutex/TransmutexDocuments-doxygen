<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__t_m_x_merge_threads_results_8cc_source" xml:lang="en-US">
<title>TMXMergeThreadsResults.cc</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/src/TMXMergeThreadsResults.cc</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00001"/>00001 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00003"/>00003 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00004"/>00004 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00006"/>00006 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00007"/>00007 <emphasis role="comment">//&#32;TMXMergeThreadsResults</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00008"/>00008 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00009"/>00009 <emphasis role="comment">//&#32;Donovan&#32;Maire,&#32;Transmutex,&#32;06/04/2020</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00010"/>00010 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00012"/>00012 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00013"/>00013 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00014"/>00014 <emphasis role="comment">//&#32;Class</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&quot;TMXMergeThreadsResults.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00016"/>00016 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00017"/>00017 <emphasis role="comment">//&#32;GEANT4&#32;libraries</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00018"/>00018 <emphasis role="comment">//&#32;#include&#32;&quot;G4ios.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00019"/>00019 <emphasis role="comment">//&#32;#include&#32;&quot;G4SystemOfUnits.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00020"/>00020 <emphasis role="comment">//&#32;#include&#32;&quot;G4Threading.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00021"/>00021 <emphasis role="comment">//&#32;#include&#32;&quot;globals.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00022"/>00022 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00023"/>00023 <emphasis role="comment">//&#32;C++&#32;Class</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00024"/>00024 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00025"/>00025 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00026"/>00026 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00027"/>00027 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00028"/>00028 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00029"/>00029 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00030"/>00030 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00031"/>00031 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00032"/><link linkend="_class_t_m_x_merge_threads_results_1a2e5a3f80616a82897a998b9d72f14362">00032</link> <link linkend="_class_t_m_x_merge_threads_results_1a2e5a3f80616a82897a998b9d72f14362">TMXMergeThreadsResults::TMXMergeThreadsResults</link>(<emphasis role="keywordtype">int</emphasis>&#32;Nb_Threads)
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00033"/>00033 &#32;:&#32;MergedOutputVariables{0}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00034"/>00034 {
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00035"/>00035 &#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;double&#32;&gt;&#32;OutputVariables(38,&#32;0);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;Nb_Threads;&#32;++i)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MergedOutputVariables.push_back(OutputVariables);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vect_k.push_back(OutputVariables);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vect_sigma_k.push_back(OutputVariables);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00040"/>00040 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00041"/>00041 }
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00042"/>00042 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00043"/>00043 TMXMergeThreadsResults::~TMXMergeThreadsResults(){
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00044"/>00044 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00045"/>00045 }
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00046"/>00046 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00047"/>00047 <emphasis role="keywordtype">void</emphasis>&#32;TMXMergeThreadsResults::AddNewValues(<emphasis role="keywordtype">int</emphasis>&#32;Thread_Numb,&#32;<emphasis role="keywordtype">double</emphasis>&#32;N0,&#32;<emphasis role="keywordtype">double</emphasis>&#32;Ntot,&#32;<emphasis role="keywordtype">double</emphasis>&#32;FissionByN0,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_FissionByN0,&#32;<emphasis role="keywordtype">double</emphasis>&#32;NeutronFromFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;NeutronFromInelastic,
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;AbsorptionInU235,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_AbsorptionInU235,&#32;<emphasis role="keywordtype">double</emphasis>&#32;CaptureInU238,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_CaptureInU238,&#32;<emphasis role="keywordtype">double</emphasis>&#32;k_src,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_ksrc,
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;k_eff,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_keff,&#32;<emphasis role="keywordtype">double</emphasis>&#32;nu,&#32;<emphasis role="keywordtype">double</emphasis>&#32;eta,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_eta,&#32;<emphasis role="keywordtype">double</emphasis>&#32;epsilon,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_eps,
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;Cap_abs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_Cap_Abs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;EtotEbeam_perFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_EtotEbeam_perFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;Edep_perFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_Edep_perFission,&#32;<emphasis role="keywordtype">double</emphasis>&#32;G0,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_G0,&#32;<emphasis role="keywordtype">double</emphasis>&#32;G_G0k,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_G_G0k,&#32;<emphasis role="keywordtype">double</emphasis>&#32;G_Pth,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_G_Pth,&#32;<emphasis role="keywordtype">double</emphasis>&#32;Chi2,&#32;<emphasis role="keywordtype">double</emphasis>&#32;sigma_Chi2)
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00051"/>00051 {
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00052"/>00052 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][&#32;0]&#32;=&#32;N0;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00053"/>00053 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][&#32;1]&#32;=&#32;0.;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00054"/>00054 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][&#32;2]&#32;=&#32;Ntot;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00055"/>00055 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][&#32;3]&#32;=&#32;0.;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00056"/>00056 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][&#32;4]&#32;=&#32;FissionByN0;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00057"/>00057 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][&#32;5]&#32;=&#32;sigma_FissionByN0;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00058"/>00058 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][&#32;6]&#32;=&#32;NeutronFromFission;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00059"/>00059 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][&#32;7]&#32;=&#32;0.;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00060"/>00060 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][&#32;8]&#32;=&#32;NeutronFromInelastic;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00061"/>00061 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][&#32;9]&#32;=&#32;0.;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00062"/>00062 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][10]&#32;=&#32;AbsorptionInU235;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00063"/>00063 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][11]&#32;=&#32;sigma_AbsorptionInU235;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00064"/>00064 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][12]&#32;=&#32;CaptureInU238;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00065"/>00065 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][13]&#32;=&#32;sigma_CaptureInU238;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00066"/>00066 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][14]&#32;=&#32;k_src;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00067"/>00067 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][15]&#32;=&#32;sigma_ksrc;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00068"/>00068 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][16]&#32;=&#32;k_eff;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00069"/>00069 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][17]&#32;=&#32;sigma_keff;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00070"/>00070 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][18]&#32;=&#32;nu;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00071"/>00071 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][19]&#32;=&#32;0;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00072"/>00072 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][20]&#32;=&#32;eta;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00073"/>00073 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][21]&#32;=&#32;sigma_eta;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00074"/>00074 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][22]&#32;=&#32;epsilon;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00075"/>00075 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][23]&#32;=&#32;sigma_eps;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00076"/>00076 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][24]&#32;=&#32;Cap_abs;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00077"/>00077 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][25]&#32;=&#32;sigma_Cap_Abs;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00078"/>00078 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][26]&#32;=&#32;EtotEbeam_perFission;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00079"/>00079 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][27]&#32;=&#32;sigma_EtotEbeam_perFission;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00080"/>00080 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][28]&#32;=&#32;Edep_perFission;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00081"/>00081 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][29]&#32;=&#32;sigma_Edep_perFission;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00082"/>00082 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][30]&#32;=&#32;G0;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00083"/>00083 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][31]&#32;=&#32;sigma_G0;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00084"/>00084 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][32]&#32;=&#32;G_G0k;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00085"/>00085 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][33]&#32;=&#32;sigma_G_G0k;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00086"/>00086 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][34]&#32;=&#32;G_Pth;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00087"/>00087 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][35]&#32;=&#32;sigma_G_Pth;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00088"/>00088 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][36]&#32;=&#32;Chi2;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00089"/>00089 &#32;&#32;&#32;&#32;MergedOutputVariables[Thread_Numb][37]&#32;=&#32;sigma_Chi2;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00090"/>00090 }
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00091"/>00091 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00092"/>00092 <emphasis role="keywordtype">void</emphasis>&#32;TMXMergeThreadsResults::AddNew_k_values(<emphasis role="keywordtype">int</emphasis>&#32;Thread_Numb,&#32;std::vector&lt;double&gt;&#32;k,&#32;std::vector&lt;double&gt;&#32;sigma_k)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00093"/>00093 &#32;&#32;&#32;&#32;vect_k[Thread_Numb]&#32;=&#32;k;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00094"/>00094 &#32;&#32;&#32;&#32;vect_sigma_k[Thread_Numb]&#32;=&#32;sigma_k;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00095"/>00095 }
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00096"/>00096 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00097"/>00097 <emphasis role="keywordtype">void</emphasis>&#32;TMXMergeThreadsResults::WriteResults(std::string&#32;str_ROOTFileName,&#32;<emphasis role="keywordtype">int</emphasis>&#32;int_Option,&#32;<emphasis role="keywordtype">int</emphasis>&#32;RunNumber)
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00098"/>00098 {
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00099"/>00099 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&gt;&gt;&#32;Write&#32;results&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00100"/>00100 &#32;&#32;&#32;&#32;std::string&#32;ResultsFileName&#32;=&#32;<emphasis role="stringliteral">&quot;results&quot;</emphasis>;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Name&#32;of&#32;the&#32;text&#32;file&#32;to&#32;fill&#32;with&#32;parameters&#32;value&#32;from&#32;every&#32;threads</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00101"/>00101 &#32;&#32;&#32;&#32;std::size_t&#32;pos&#32;=&#32;str_ROOTFileName.find(<emphasis role="stringliteral">&quot;.root&quot;</emphasis>);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;!=&#32;std::string::npos)
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultsFileName&#32;=&#32;str_ROOTFileName.substr(0,pos)&#32;+&#32;<emphasis role="stringliteral">&quot;_results&quot;</emphasis>;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00104"/>00104 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Results&#32;file&#32;is&#32;used&#32;to&#32;record&#32;each&#32;following&#32;parameters&#32;from&#32;every&#32;every&#32;threads</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;gapTab&#32;=&#32;24;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00107"/>00107 &#32;&#32;&#32;&#32;std::ofstream&#32;ResultsFile;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(RunNumber&#32;==&#32;0)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultsFile.open((ResultsFileName&#32;+&#32;(std::string)<emphasis role="stringliteral">&quot;.txt&quot;</emphasis>).c_str(),&#32;std::ios::out);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultsFile&#32;&lt;&lt;&#32;std::left&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;N0&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_N0&quot;</emphasis>&#32;<emphasis role="comment">//&#32;σ</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ntot&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_Ntot&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;FissionByN0&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_N0fiss&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;NeutronFromFission&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_NeutronFromFission&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;NeutronFromInelastic&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_NeutronFromInelastic&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;AbsorptionInU235&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_AbsorptionInU235&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;CaptureInU238&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_CaptureInU238&quot;</emphasis>;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(int_Option&#32;!=&#32;4)
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultsFile&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;k_src&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;σk_src&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;k_eff&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;σk_eff&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nu&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;σ_nu&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;eta&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;σ_eta&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;epsilon&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;σ_epsilon&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;cap(U-238)/abs(U-235)&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;σ_cap(U-238)/abs(U-235)&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Etot-Ebeam_perFission&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;σ_Etot-Ebeam_perFission&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Edep_perFission&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;σ_Edep_perFission&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;G0&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;σ_G0&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;G_G0k&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;σ_G&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;G_Pth&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;σ_G_Pth&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultsFile&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;k_eff&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_k_eff&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;k_eff_direct&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_k_eff_dir&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;nu&quot;</emphasis>&#32;<emphasis role="comment">//&#32;nu</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_nu&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;G_Pth&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_G_Pth&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Chi2&quot;</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_Chi2&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00158"/>00158 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00159"/>00159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultsFile.open((ResultsFileName&#32;+&#32;(std::string)<emphasis role="stringliteral">&quot;.txt&quot;</emphasis>).c_str(),&#32;std::ios::app);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultsFile&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&#32;*****************&#32;Run&#32;number&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;RunNumber&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;*****************&#32;\n&quot;</emphasis>;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00162"/>00162 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00163"/>00163 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00164"/>00164 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00165"/>00165 &#32;&#32;&#32;&#32;ResultsFile&#32;&lt;&lt;&#32;std::left;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00166"/>00166 &#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;double&#32;&gt;&#32;OutputVariables(MergedOutputVariables[0].size(),&#32;0);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00167"/>00167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=0;&#32;j&#32;&lt;&#32;(int)&#32;MergedOutputVariables[0].size();&#32;++j)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;(int)&#32;MergedOutputVariables.size();&#32;++i)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(j&gt;9)&#32;{&#32;<emphasis role="comment">//&#32;Average&#32;value</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(j%2&#32;==&#32;0)&#32;<emphasis role="comment">//&#32;pair</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputVariables[j]&#32;+=&#32;MergedOutputVariables[i][j]&#32;/(double)&#32;MergedOutputVariables.size();
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;odd</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputVariables[j]&#32;+=&#32;MergedOutputVariables[i][j]*MergedOutputVariables[i][j]&#32;/(double)&#32;(MergedOutputVariables.size()&#32;*&#32;MergedOutputVariables.size());
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">//&#32;Total&#32;sum</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(j%2&#32;==&#32;0)&#32;<emphasis role="comment">//&#32;pair</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputVariables[j]&#32;+=&#32;MergedOutputVariables[i][j];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;odd</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputVariables[j]&#32;+=&#32;MergedOutputVariables[i][j]*MergedOutputVariables[i][j];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(j%2&#32;!=&#32;0)
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputVariables[j]&#32;=&#32;std::sqrt(OutputVariables[j]);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((&#32;int_Option&#32;!=&#32;4&#32;&amp;&amp;&#32;j&lt;36)&#32;||&#32;(&#32;(j&lt;22&#32;||&#32;j&gt;35)&#32;&amp;&amp;&#32;int_Option&#32;==&#32;4&#32;)&#32;)
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultsFile&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;OutputVariables[j];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00186"/>00186 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00187"/>00187 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00188"/>00188 &#32;&#32;&#32;&#32;ResultsFile&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n&quot;</emphasis>;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00189"/>00189 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00190"/>00190 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Merge&#32;of&#32;k&#32;+-&#32;sigma&#32;as&#32;a&#32;function&#32;of&#32;neutron&#32;generation</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00191"/>00191 &#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;double&#32;&gt;&#32;k,&#32;sigma_k;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00192"/>00192 &#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;int&gt;&#32;counter;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00193"/>00193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;(int)&#32;vect_k.size();&#32;++i)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=0;&#32;j&#32;&lt;&#32;(int)&#32;vect_k[i].size();&#32;++j)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(j&#32;&gt;=&#32;(<emphasis role="keywordtype">int</emphasis>)&#32;k.size())&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k.push_back(&#32;vect_k[i][j]&#32;);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vect_sigma_k[i][j]&#32;&gt;&#32;0)
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigma_k.push_back(&#32;vect_sigma_k[i][j]&#32;*&#32;vect_sigma_k[i][j]&#32;);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigma_k.push_back(&#32;0&#32;);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;counter.push_back(1);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k[j]&#32;+=&#32;vect_k[i][j];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vect_sigma_k[i][j]&#32;&gt;&#32;0)
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigma_k[j]&#32;+=&#32;vect_sigma_k[i][j]&#32;*&#32;vect_sigma_k[i][j];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++counter[j];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00210"/>00210 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00211"/>00211 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00212"/>00212 &#32;&#32;&#32;&#32;ResultsFile&#32;&lt;&lt;&#32;std::left&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;k&quot;</emphasis>&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sig_k&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00213"/>00213 &#32;&#32;&#32;&#32;ResultsFile&#32;&lt;&lt;&#32;std::left;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00214"/>00214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;(int)&#32;k.size();&#32;++i)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k[i]&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k[i]&#32;/&#32;counter[i];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigma_k[i]&#32;=&#32;std::sqrt(sigma_k[i])/&#32;counter[i];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00217"/>00217 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultsFile&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;k[i]&#32;&lt;&lt;&#32;std::setw(gapTab)&#32;&lt;&lt;&#32;sigma_k[i]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00219"/>00219 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00220"/>00220 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00221"/>00221 &#32;&#32;&#32;&#32;ResultsFile.close();
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00222"/>00222 }
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00223"/>00223 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00224"/>00224 std::vector&#32;&lt;&#32;double&#32;&gt;&#32;TMXMergeThreadsResults::GetKeffMerged()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00226"/>00226 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;k_eff&#32;factor</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00227"/>00227 &#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;double&#32;&gt;&#32;OutputVariables(2,&#32;0);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00228"/>00228 &#32;&#32;&#32;&#32;<emphasis role="comment">/*int&#32;j=16;&#32;//&#32;k_eff&#32;variable</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00229"/>00229 <emphasis role="comment">&#32;&#32;&#32;&#32;for(int&#32;i=0;&#32;i&#32;&lt;&#32;(int)&#32;MergedOutputVariables.size();&#32;++i)&#32;{</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00230"/>00230 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputVariables[0]&#32;+=&#32;MergedOutputVariables[i][j]&#32;/(double)&#32;MergedOutputVariables.size();</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00231"/>00231 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputVariables[1]&#32;+=&#32;MergedOutputVariables[i][j+1]*MergedOutputVariables[i][j+1]&#32;/(double)&#32;(MergedOutputVariables.size()&#32;*&#32;MergedOutputVariables.size());</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00232"/>00232 <emphasis role="comment">&#32;&#32;&#32;&#32;}*/</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00233"/>00233 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Merge&#32;of&#32;k&#32;+-&#32;sigma&#32;as&#32;a&#32;function&#32;of&#32;neutron&#32;generation</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00234"/>00234 &#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;double&#32;&gt;&#32;k,&#32;sigma_k;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00235"/>00235 &#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;int&gt;&#32;counter;
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00236"/>00236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;(int)&#32;vect_k.size();&#32;++i)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=0;&#32;j&#32;&lt;&#32;(int)&#32;vect_k[i].size();&#32;++j)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(j&#32;&gt;=&#32;(<emphasis role="keywordtype">int</emphasis>)&#32;k.size())&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k.push_back(&#32;vect_k[i][j]&#32;);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vect_sigma_k[i][j]&#32;&gt;&#32;0)
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigma_k.push_back(&#32;vect_sigma_k[i][j]&#32;*&#32;vect_sigma_k[i][j]&#32;);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigma_k.push_back(&#32;0&#32;);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;counter.push_back(1);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k[j]&#32;+=&#32;vect_k[i][j];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vect_sigma_k[i][j]&#32;&gt;&#32;0)
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigma_k[j]&#32;+=&#32;vect_sigma_k[i][j]&#32;*&#32;vect_sigma_k[i][j];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++counter[j];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00253"/>00253 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00254"/>00254 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00255"/>00255 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;(int)&#32;k.size();&#32;++i)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputVariables[0]&#32;+=&#32;k[i]&#32;/&#32;counter[i];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputVariables[1]&#32;+=&#32;std::sqrt(sigma_k[i])/&#32;counter[i];
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00258"/>00258 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00259"/>00259 &#32;&#32;&#32;&#32;OutputVariables[0]&#32;/=&#32;k.size();
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00260"/>00260 &#32;&#32;&#32;&#32;OutputVariables[1]&#32;/=&#32;k.size();
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00261"/>00261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(OutputVariables);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00262"/>00262 }
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00263"/>00263 
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00264"/>00264 <emphasis role="keywordtype">void</emphasis>&#32;TMXMergeThreadsResults::Initialize(<emphasis role="keywordtype">int</emphasis>&#32;Nb_Threads)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00265"/>00265 &#32;&#32;&#32;&#32;MergedOutputVariables.clear();
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00266"/>00266 &#32;&#32;&#32;&#32;vect_k.clear();
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00267"/>00267 &#32;&#32;&#32;&#32;vect_sigma_k.clear();
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00268"/>00268 &#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;double&#32;&gt;&#32;OutputVariables(38,&#32;0);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00269"/>00269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&lt;Nb_Threads;&#32;++i)&#32;{
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MergedOutputVariables.push_back(OutputVariables);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vect_k.push_back(OutputVariables);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vect_sigma_k.push_back(OutputVariables);
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00273"/>00273 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_merge_threads_results_8cc_source_1l00274"/>00274 }
</programlisting></section>
