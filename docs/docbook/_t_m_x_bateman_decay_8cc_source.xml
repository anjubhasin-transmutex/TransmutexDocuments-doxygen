<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__t_m_x_bateman_decay_8cc_source" xml:lang="en-US">
<title>TMXBatemanDecay.cc</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/src/TMXBatemanDecay.cc</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00001"/>00001 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00002"/>00002 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00003"/>00003 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00005"/>00005 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00006"/>00006 <emphasis role="comment">//&#32;TMXBatemanDecay</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00007"/>00007 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00008"/>00008 <emphasis role="comment">//&#32;Donovan&#32;Maire,&#32;Transmutex,&#32;19/06/2020</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00009"/>00009 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00011"/>00011 <emphasis role="comment"></emphasis><emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00012"/>00012 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00013"/>00013 <emphasis role="comment">//&#32;WARNING&#32;TO&#32;DO&#32;:&#32;Calculation&#32;of&#32;Lambda_j&#32;anf&#32;bj&#32;as&#32;Lambda_j*&#32;and&#32;bj*</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00014"/>00014 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00015"/>00015 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00016"/>00016 <emphasis role="comment">//&#32;Class</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&quot;TMXBatemanDecay.hh&quot;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&quot;cmath&quot;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00019"/>00019 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00020"/><link linkend="_class_t_m_x_bateman_decay_1af27499141bdb57c425ab32519240d129">00020</link> <link linkend="_class_t_m_x_bateman_decay_1af27499141bdb57c425ab32519240d129">TMXBatemanDecay::TMXBatemanDecay</link>()
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00021"/>00021 {
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00022"/>00022 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00023"/>00023 <emphasis role="comment">//&#32;Build&#32;the&#32;database</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00024"/>00024 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;TMXElementStore::BuildElementDB();</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00025"/>00025 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00026"/>00026 <emphasis role="comment">//&#32;Initialize&#32;variables</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00027"/>00027 &#32;&#32;&#32;&#32;Initialize();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00028"/>00028 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00029"/>00029 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00030"/>00030 TMXBatemanDecay::~TMXBatemanDecay()&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00031"/>00031 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00032"/>00032 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00033"/>00033 <emphasis role="keywordtype">void</emphasis>&#32;&#32;TMXBatemanDecay::Initialize()&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00034"/>00034 &#32;&#32;&#32;&#32;fMapLVMotherDaughter_transm[0].clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00035"/>00035 &#32;&#32;&#32;&#32;fMapLVMotherDaughter_transm[1].clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00036"/>00036 &#32;&#32;&#32;&#32;fMapN_0.clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00037"/>00037 &#32;&#32;&#32;&#32;fMapS_0.clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00038"/>00038 &#32;&#32;&#32;&#32;fMapNt.clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00039"/>00039 &#32;&#32;&#32;&#32;fMapChains.clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00040"/>00040 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00041"/>00041 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00042"/>00042 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::ClearMapChains()&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00043"/>00043 &#32;&#32;&#32;&#32;fMapChains.clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00044"/>00044 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00045"/>00045 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00046"/>00046 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::AddTransmutedElement(std::vector&#32;&lt;TMXBatemanDecay::TransmutedElement&gt;&amp;&#32;vectorTransmutedElement)&#32;{&#32;<emphasis role="comment">//&#32;Addition&#32;of&#32;a&#32;nuclide&#32;to&#32;the&#32;list&#32;of&#32;transmuted&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00047"/>00047 &#32;&#32;&#32;&#32;AddElement(0,&#32;vectorTransmutedElement);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00048"/>00048 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00049"/>00049 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00050"/>00050 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::AddTransmutedSrcElem(std::vector&#32;&lt;TMXBatemanDecay::TransmutedElement&gt;&amp;&#32;vectorSourceElement)&#32;{&#32;<emphasis role="comment">//&#32;Addition&#32;of&#32;a&#32;nuclide&#32;to&#32;the&#32;list&#32;of&#32;transmuted&#32;elements&#32;considered&#32;as&#32;a&#32;source&#32;term</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00051"/>00051 &#32;&#32;&#32;&#32;AddElement(1,&#32;vectorSourceElement);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00052"/>00052 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00053"/>00053 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00054"/>00054 <emphasis role="comment">//&#32;Add&#32;transmuted&#32;elements&#32;due&#32;to&#32;irradiation&#32;in&#32;a&#32;specific&#32;logical&#32;volume</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00055"/>00055 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::AddElement(<emphasis role="keywordtype">int</emphasis>&#32;index,&#32;std::vector&#32;&lt;TMXBatemanDecay::TransmutedElement&gt;&amp;&#32;vectorElement)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00056"/>00056 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00057"/>00057 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;index&#32;:&#32;&quot;&#32;&lt;&lt;&#32;index&#32;&lt;&lt;&#32;&quot;&#32;sizeVec&#32;:&#32;&quot;&#32;&lt;&lt;&#32;vectorElement.size()&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00058"/>00058 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;if(index&#32;==&#32;0)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;&quot;*********&#32;Begin&#32;of&#32;AddElement&#32;*********&#32;&quot;&#32;&lt;&lt;&#32;vectorElement.size()&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;element&#32;:&#32;vectorElement)&#32;{<emphasis role="comment">//&#32;access&#32;by&#32;value,&#32;the&#32;type&#32;of&#32;element&#32;is&#32;TMXBatemanDecay::TransmutedElement</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;fMapLVMotherDaughter_transm[index][element.LogicVolumeName].empty()&#32;)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapLVMotherDaughter_transm[index][element.LogicVolumeName]&#32;=&#32;&#32;&#32;{&#32;{element.IZAmother,&#32;{{element.IZAdaughter,&#32;1}}&#32;}&#32;};
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00062"/>00062 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(index&#32;==&#32;0)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;&quot;1element.IZAmother&#32;:&#32;&quot;&#32;&lt;&lt;&#32;element.IZAmother&#32;&lt;&lt;&#32;&quot;&#32;element.IZAdaughter&#32;:&#32;&quot;&#32;&lt;&lt;&#32;element.IZAdaughter&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;fMapLVMotherDaughter_transm[index][element.LogicVolumeName][element.IZAmother].empty()&#32;)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapLVMotherDaughter_transm[index][element.LogicVolumeName][element.IZAmother]&#32;=&#32;{&#32;{&#32;{element.IZAdaughter,&#32;1}&#32;}&#32;};
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00066"/>00066 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(index&#32;==&#32;0)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;&quot;2element.IZAmother&#32;:&#32;&quot;&#32;&lt;&lt;&#32;element.IZAmother&#32;&lt;&lt;&#32;&quot;&#32;element.IZAdaughter&#32;:&#32;&quot;&#32;&lt;&lt;&#32;element.IZAdaughter&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(&#32;fMapLVMotherDaughter_transm[index][element.LogicVolumeName][element.IZAmother][element.IZAdaughter]&#32;==&#32;0&#32;)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapLVMotherDaughter_transm[index][element.LogicVolumeName][element.IZAmother][element.IZAdaughter]&#32;=&#32;1;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00070"/>00070 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(index&#32;==&#32;0)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;&quot;3element.IZAmother&#32;:&#32;&quot;&#32;&lt;&lt;&#32;element.IZAmother&#32;&lt;&lt;&#32;&quot;&#32;element.IZAdaughter&#32;:&#32;&quot;&#32;&lt;&lt;&#32;element.IZAdaughter&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++fMapLVMotherDaughter_transm[index][element.LogicVolumeName][element.IZAmother][element.IZAdaughter];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00074"/>00074 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(index&#32;==&#32;0)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;&quot;4element.IZAmother&#32;:&#32;&quot;&#32;&lt;&lt;&#32;element.IZAmother&#32;&lt;&lt;&#32;&quot;&#32;element.IZAdaughter&#32;:&#32;&quot;&#32;&lt;&lt;&#32;element.IZAdaughter&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00076"/>00076 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;element.IZAmother&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;element.IZAdaughter&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;element.LogicVolumeName&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sum&#32;of&#32;every&#32;components&#32;in&#32;1&#32;map</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++fMapLVElem_transm[element.LogicVolumeName][element.IZAdaughter];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--fMapLVElem_transm[element.LogicVolumeName][element.IZAmother];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00080"/>00080 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00081"/>00081 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;if(index&#32;==&#32;0)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;&quot;*********&#32;End&#32;of&#32;AddElement&#32;*********&quot;&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00082"/>00082 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00083"/>00083 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00084"/>00084 <emphasis role="comment">//&#32;Erase&#32;content&#32;of&#32;map&#32;fMapLVMotherDaughter_transm[1]</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00085"/>00085 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::ClearMapTransmutedElement()&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00086"/>00086 &#32;&#32;&#32;&#32;fMapLVMotherDaughter_transm[0].clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00087"/>00087 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00088"/>00088 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00089"/>00089 <emphasis role="comment">//&#32;Erase&#32;content&#32;of&#32;map&#32;fMapLVMotherDaughter_transm[0]</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00090"/>00090 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::ClearMapTransmutedSrcElem()&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00091"/>00091 &#32;&#32;&#32;&#32;fMapLVMotherDaughter_transm[1].clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00092"/>00092 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00093"/>00093 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00094"/>00094 <emphasis role="comment">//&#32;Print&#32;the&#32;number&#32;of&#32;transmuted&#32;elements&#32;due&#32;to&#32;irradiation</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00095"/>00095 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::DumpTransmutedElements()&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;index=0;&#32;index&lt;2;&#32;++index){
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;index&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;std::string,&#32;std::unordered_map&lt;<emphasis role="keywordtype">int</emphasis>,&#32;std::unordered_map&lt;int,long&#32;double&gt;&gt;&gt;::iterator&#32;it=fMapLVMotherDaughter_transm[index].begin();&#32;it!=fMapLVMotherDaughter_transm[index].end();&#32;++it)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;it-&gt;first&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;<emphasis role="keywordtype">int</emphasis>,&#32;std::unordered_map&lt;int,long&#32;double&gt;&gt;::iterator&#32;it1=fMapLVMotherDaughter_transm[index][it-&gt;first].begin();&#32;it1!=fMapLVMotherDaughter_transm[index][it-&gt;first].end();&#32;++it1)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t\t&quot;</emphasis>&#32;&lt;&lt;&#32;it1-&gt;first&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,long&#32;double&gt;::iterator&#32;it2=fMapLVMotherDaughter_transm[index][it-&gt;first][it1-&gt;first].begin();&#32;it2!=fMapLVMotherDaughter_transm[index][it-&gt;first][it1-&gt;first].end();&#32;++it2)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t\t\t&quot;</emphasis>&#32;&lt;&lt;&#32;it2-&gt;first&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;it2-&gt;second&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00107"/>00107 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00108"/>00108 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00109"/>00109 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00110"/>00110 <emphasis role="comment">//&#32;Set&#32;the&#32;amount&#32;of&#32;element&#32;IZA&#32;at&#32;t=0</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00111"/>00111 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::ConstructMapN_0(<emphasis role="keywordtype">int</emphasis>&#32;IZA,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;N_0)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;fMapN_0[IZA]&#32;==&#32;0)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapN_0[IZA]&#32;=&#32;N_0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00114"/>00114 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00115"/>00115 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00116"/>00116 <emphasis role="comment">//&#32;Get&#32;the&#32;amount&#32;of&#32;element&#32;IZA&#32;at&#32;t=0</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00117"/>00117 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXBatemanDecay::GetN_0(<emphasis role="keywordtype">int</emphasis>&#32;IZA)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00118"/>00118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fMapN_0[IZA];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00119"/>00119 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00120"/>00120 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00121"/>00121 std::unordered_map&lt;int,&#32;long&#32;double&gt;&#32;TMXBatemanDecay::GetMapNt()&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00122"/>00122 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it=fMapNt.begin();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00123"/>00123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(&#32;it!=fMapNt.end())&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(it-&gt;second&#32;&lt;&#32;1e-200&#32;||&#32;it-&gt;first&#32;==&#32;000000)&#32;{&#32;<emphasis role="comment">//||&#32;std::log10(std::abs(fMapNt[IZA_i]))&#32;&lt;=&#32;-100)&#32;{&#32;&#32;//&#32;If&#32;amount&#32;is&#32;very&#32;low&#32;or&#32;if&#32;it&#32;is&#32;the&#32;ad&#32;hoc&#32;element&#32;used&#32;for&#32;fission</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;fMapNt.erase(it);&#32;<emphasis role="comment">//&#32;WARNING&#32;not&#32;sure&#32;of&#32;1e-200</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++it;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00129"/>00129 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00130"/>00130 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00131"/>00131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fMapNt;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00132"/>00132 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00133"/>00133 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00134"/>00134 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00135"/>00135 <emphasis role="comment">//&#32;std::unordered_map&lt;int,&#32;long&#32;double&gt;&#32;TMXBatemanDecay::GetMapNt()&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00136"/>00136 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;std::unordered_map&lt;int,&#32;long&#32;double&gt;&#32;MapNt&#32;=&#32;fMapNt;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00137"/>00137 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00138"/>00138 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;auto&#32;it_verysmall=fMapNt_verysmall.begin();</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00139"/>00139 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;while&#32;(&#32;it_verysmall!=fMapNt_verysmall.end())&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00140"/>00140 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(it_verysmall-&gt;first&#32;==&#32;000000)&#32;{&#32;//&#32;if&#32;it_verysmall&#32;is&#32;the&#32;ad&#32;hoc&#32;element&#32;used&#32;for&#32;fission</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00141"/>00141 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it_verysmall&#32;=&#32;fMapNt_verysmall.erase(it_verysmall);</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00142"/>00142 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00143"/>00143 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00144"/>00144 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MapNt[it_verysmall-&gt;first]&#32;+=&#32;it_verysmall-&gt;second;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00145"/>00145 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++it_verysmall;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00146"/>00146 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00147"/>00147 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00148"/>00148 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00149"/>00149 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;auto&#32;it_small=fMapNt_small.begin();</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00150"/>00150 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;while&#32;(&#32;it_small!=fMapNt_small.end())&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00151"/>00151 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(it_small-&gt;first&#32;==&#32;000000)&#32;{&#32;//&#32;if&#32;it_small&#32;is&#32;the&#32;ad&#32;hoc&#32;element&#32;used&#32;for&#32;fission</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00152"/>00152 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it_small&#32;=&#32;fMapNt_small.erase(it_small);</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00153"/>00153 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00154"/>00154 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00155"/>00155 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MapNt[it_small-&gt;first]&#32;+=&#32;it_small-&gt;second;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00156"/>00156 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++it_small;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00157"/>00157 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00158"/>00158 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00159"/>00159 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00160"/>00160 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;auto&#32;it=MapNt.begin();</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00161"/>00161 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;while&#32;(&#32;it!=MapNt.end())&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00162"/>00162 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(it-&gt;second&#32;&lt;&#32;1e-200&#32;||&#32;it-&gt;first&#32;==&#32;000000)&#32;{&#32;//||&#32;std::log10(std::abs(MapNt[IZA_i]))&#32;&lt;=&#32;-100)&#32;{&#32;&#32;//&#32;If&#32;amount&#32;is&#32;very&#32;low&#32;or&#32;if&#32;it&#32;is&#32;the&#32;ad&#32;hoc&#32;element&#32;used&#32;for&#32;fission</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00163"/>00163 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;MapNt.erase(it);&#32;//&#32;WARNING&#32;not&#32;sure&#32;of&#32;1e-200</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00164"/>00164 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00165"/>00165 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00166"/>00166 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++it;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00167"/>00167 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00168"/>00168 <emphasis role="comment">//</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00169"/>00169 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;return&#32;MapNt;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00170"/>00170 <emphasis role="comment">//&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00171"/>00171 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00172"/>00172 <emphasis role="comment">//&#32;Erase&#32;content&#32;of&#32;map&#32;N_0</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00173"/>00173 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::ClearMapN_0()&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00174"/>00174 &#32;&#32;&#32;&#32;fMapN_0.clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00175"/>00175 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00176"/>00176 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00177"/>00177 <emphasis role="comment">//&#32;Erase&#32;content&#32;of&#32;map&#32;S_0</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00178"/>00178 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::ClearMapS_0()&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00179"/>00179 &#32;&#32;&#32;&#32;fMapS_0.clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00180"/>00180 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00181"/>00181 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00182"/>00182 <emphasis role="comment">//&#32;Add&#32;an&#32;amount&#32;of&#32;element&#32;IZA&#32;for&#32;N(t)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00183"/>00183 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::ConstructMapNt(<emphasis role="keywordtype">int</emphasis>&#32;IZA,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;Nt)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00184"/>00184 &#32;&#32;&#32;&#32;fMapNt[IZA]&#32;+=&#32;Nt;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00185"/>00185 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00186"/>00186 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00187"/>00187 <emphasis role="comment">//&#32;Erase&#32;content&#32;of&#32;map&#32;N(t)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00188"/>00188 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::ClearMapNt()&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00189"/>00189 &#32;&#32;&#32;&#32;fMapNt.clear();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00190"/>00190 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;fMapNt_small.clear();</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00191"/>00191 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;fMapNt_verysmall.clear();</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00192"/>00192 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00193"/>00193 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00194"/>00194 <emphasis role="comment">//&#32;Construct&#32;linear&#32;decay&#32;paths&#32;of&#32;element&#32;IZA&#32;due&#32;to&#32;decay&#32;or&#32;transmutation&#32;and&#32;update&#32;the&#32;map&#32;of&#32;decay&#32;paths</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00195"/>00195 <emphasis role="comment">//&#32;WARNING&#32;:&#32;Fissions&#32;or&#32;reaction&#32;with&#32;multiple&#32;products&#32;are&#32;not&#32;taken&#32;into&#32;account&#32;yet</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00196"/>00196 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::ConstructChain(<emphasis role="keywordtype">int</emphasis>&#32;IZA,&#32;std::string&#32;LogicVolumeName=<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00197"/>00197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fMapChains.find(IZA)&#32;==&#32;fMapChains.end())&#32;{&#32;<emphasis role="comment">//&#32;if&#32;element&#32;is&#32;not&#32;already&#32;in&#32;the&#32;map</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00198"/>00198 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;\n&#32;***&#32;IZA&#32;found&#32;:&#32;&quot;&#32;&lt;&lt;&#32;IZA&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00199"/>00199 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;if&#32;(fMapChains[IZA].size()&#32;==&#32;0)&#32;{&#32;//&#32;if&#32;element&#32;is&#32;not&#32;already&#32;in&#32;the&#32;map</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;int,&#32;TMXElement*&gt;&#32;mapStoreElem&#32;=&#32;TMXElementStore::Store();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;mapStoreElem[IZA])&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_m_x_element">TMXElement</link>*&#32;elem&#32;=&#32;mapStoreElem[IZA];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambda_star&#32;=&#32;lambdaStar(elem,&#32;LogicVolumeName);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00204"/>00204 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&#32;vectorChain;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(lambda_star&#32;!=&#32;0)&#32;{&#32;<emphasis role="comment">//&#32;if&#32;element&#32;is&#32;unstable&#32;or&#32;transmuted&#32;:&#32;implementation&#32;of&#32;the&#32;decay&#32;channel</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;vectorElement;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorChain.push_back(vectorElement);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00209"/>00209 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RecursiveChain(elem,&#32;vectorChain,&#32;LogicVolumeName,&#32;lambda_star);&#32;&#32;<emphasis role="comment">//&#32;Construct&#32;the&#32;chain&#32;recursively</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;vectorChain.push_back({{(double)IZA,&#32;0,&#32;0,&#32;1,&#32;0}});&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapChains[IZA]&#32;=&#32;vectorChain;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Store&#32;the&#32;vector&#32;of&#32;chains&#32;in&#32;a&#32;map[key&#32;=&#32;IZA]</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Element&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;IZA&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;not&#32;found&#32;in&#32;the&#32;database.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00217"/>00217 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00218"/>00218 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00219"/>00219 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00220"/>00220 <emphasis role="comment">//&#32;Recursive&#32;construction&#32;of&#32;linear&#32;chains&#32;following&#32;each&#32;decay&#32;path&#32;successively</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00221"/>00221 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::RecursiveChain(<link linkend="_class_t_m_x_element">TMXElement</link>*&#32;MotherElem,&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&amp;&#32;vectorChain,&#32;std::string&#32;LogicVolumeName,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambda_star)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00222"/>00222 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00223"/>00223 &#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;vectorElement&#32;=&#32;vectorChain[vectorChain.size()-1];&#32;<emphasis role="comment">//&#32;Read&#32;the&#32;last&#32;chain&#32;of&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00224"/>00224 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;TMXElement*&gt;&#32;mapStoreElem&#32;=&#32;TMXElementStore::Store();&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;new&#32;element&#32;in&#32;the&#32;DB</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00225"/>00225 &#32;&#32;&#32;&#32;vector&lt;TMXDecayChannel*&gt;&#32;vectorDecays&#32;=&#32;MotherElem-&gt;DecayChannels();&#32;<emphasis role="comment">//&#32;Decay&#32;channels&#32;of&#32;the&#32;new&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00226"/>00226 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00227"/>00227 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Loop&#32;over&#32;decay&#32;channels&#32;of&#32;the&#32;new&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00228"/>00228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;(int)vectorDecays.size();&#32;++i&#32;)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddMotherAndProgeny(vectorChain,&#32;vectorElement,&#32;MotherElem,&#32;lambda_star,&#32;vectorDecays[i]-&gt;BranchingRatio()*lambda(MotherElem),&#32;0.,&#32;vectorDecays[i]-&gt;IZA(),&#32;i,&#32;LogicVolumeName,&#32;vectorDecays[i]-&gt;Decay(),&#32;0);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00230"/>00230 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00231"/>00231 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00232"/>00232 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;WARNING&#32;possibility&#32;of&#32;an&#32;Infinite&#32;loop</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00233"/>00233 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Loop&#32;over&#32;transmutation&#32;channels&#32;of&#32;the&#32;mother&#32;element&#32;to&#32;check&#32;if&#32;there&#32;is&#32;a&#32;transmutation&#32;of&#32;this&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00234"/>00234 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZA_mother&#32;=&#32;MotherElem-&gt;IZA();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00235"/>00235 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00236"/>00236 &#32;&#32;&#32;&#32;std::string&#32;strDecay&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00237"/>00237 &#32;&#32;&#32;&#32;<emphasis role="comment">/*const&#32;std::size_t*/</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;FissionRatePerN0&#32;=&#32;0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;index=0;&#32;index&lt;2;&#32;++index){
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(index&#32;==&#32;1)&#32;{&#32;<emphasis role="comment">//&#32;In&#32;the&#32;map&#32;reserved&#32;for&#32;fissions</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strDecay&#32;=&#32;<emphasis role="stringliteral">&quot;Fission&quot;</emphasis>;&#32;<emphasis role="comment">//&#32;It&#32;is&#32;a&#32;fission</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;the&#32;fission&#32;rate&#32;per&#32;N0&#32;for&#32;the&#32;mother&#32;element&#32;=&#32;the&#32;sum&#32;of&#32;fission&#32;rates&#32;of&#32;every&#32;daughter&#32;elements&#32;divided&#32;by&#32;2&#32;because&#32;of&#32;the&#32;2&#32;fission&#32;products</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FissionRatePerN0&#32;=&#32;std::accumulate(std::begin(fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA_mother]),&#32;std::end(fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA_mother]),&#32;0,
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;previous,&#32;<emphasis role="keyword">decltype</emphasis>(*fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA_mother].begin())&#32;p)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;previous+p.second;&#32;})
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/2.;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00245"/>00245 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;fission&#32;&quot;&#32;&lt;&lt;&#32;FissionRatePerN0&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00247"/>00247 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,&#32;long&#32;double&gt;::iterator&#32;it2=fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA_mother].begin();&#32;it2!=fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA_mother].end();&#32;++it2)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZA_daughter&#32;=&#32;it2-&gt;first;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ReactionRate_perN0&#32;=&#32;it2-&gt;second;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00251"/>00251 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddMotherAndProgeny(vectorChain,&#32;vectorElement,&#32;MotherElem,&#32;lambda_star,&#32;0.,&#32;ReactionRate_perN0,&#32;IZA_daughter,&#32;i,&#32;LogicVolumeName,&#32;strDecay,&#32;FissionRatePerN0);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++i;&#32;<emphasis role="comment">//&#32;counter&#32;of&#32;transmutation&#32;channels</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00255"/>00255 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00256"/>00256 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00257"/>00257 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00258"/>00258 <emphasis role="comment">//&#32;Add&#32;the&#32;decay&#32;channel&#32;the&#32;mother&#32;element&#32;and&#32;its&#32;progeny</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00259"/>00259 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::AddMotherAndProgeny(std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&amp;&#32;vectorChain,&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&amp;&#32;vectorElement,&#32;<link linkend="_class_t_m_x_element">TMXElement</link>*&#32;MotherElem,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambda_star,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;BranchingRatio,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ReactionRate_perN0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZA_daughter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;std::string&#32;LogicVolumeName,&#32;std::string&#32;strDecay=<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;FissionRatePerN0=0)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00260"/>00260 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00261"/>00261 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;TMXElement*&gt;&#32;mapStoreElem&#32;=&#32;TMXElementStore::Store();&#32;<emphasis role="comment">//&#32;Instance&#32;the&#32;TMXElement&#32;DB</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00262"/>00262 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00263"/>00263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(FissionRatePerN0&#32;==&#32;0)&#32;{vectorElement.push_back(&#32;{(double)MotherElem-&gt;IZA(),&#32;lambda_star,&#32;std::log(BranchingRatio&#32;+&#32;ReactionRate_perN0)&#32;-&#32;std::log(lambda_star),&#32;1,&#32;0}&#32;);}&#32;<emphasis role="comment">//&#32;Add&#32;new&#32;element&#32;to&#32;the&#32;vector&#32;of&#32;elements&#32;in&#32;case&#32;of&#32;decay&#32;or&#32;transmutation</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00264"/>00264 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{vectorElement.push_back(&#32;{(double)MotherElem-&gt;IZA(),&#32;lambda_star,&#32;std::log(FissionRatePerN0)&#32;-&#32;std::log(lambda_star),&#32;1,&#32;0}&#32;);}&#32;<emphasis role="comment">//&#32;Add&#32;new&#32;element&#32;to&#32;the&#32;vector&#32;of&#32;elements&#32;in&#32;case&#32;of&#32;fission</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00265"/>00265 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&gt;0)&#32;vectorChain.push_back(vectorElement);&#32;&#32;<emphasis role="comment">//&#32;Add&#32;new&#32;chain&#32;of&#32;elements&#32;in&#32;case&#32;of&#32;several&#32;decay&#32;paths</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00266"/>00266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;vectorChain[vectorChain.size()-1]&#32;=&#32;vectorElement;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;last&#32;chain&#32;of&#32;elements&#32;for&#32;the&#32;first&#32;decay&#32;path</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00267"/>00267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_VectorElement&#32;=&#32;vectorChain.size()-1;&#32;&#32;<emphasis role="comment">//&#32;Position&#32;of&#32;the&#32;vector&#32;of&#32;elements&#32;in&#32;the&#32;vector&#32;of&#32;chains</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00268"/>00268 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_element&#32;=&#32;vectorElement.size()-1;&#32;&#32;<emphasis role="comment">//&#32;Position&#32;of&#32;the&#32;element&#32;in&#32;the&#32;vector&#32;of&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00269"/>00269 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00270"/>00270 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(strDecay&#32;==&#32;<emphasis role="stringliteral">&quot;SF&quot;</emphasis>)&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!!!&#32;WARNING&#32;!!!</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00272"/>00272 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;How&#32;to&#32;manage&#32;spontaneous&#32;fission&#32;?</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00273"/>00273 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Rechercher&#32;Fission&#32;products&#32;dans&#32;DB&#32;GEANT4&#32;pour&#32;même&#32;RN&#32;avec&#32;un&#32;neutron&#32;en&#32;moins&#32;(car&#32;fission&#32;spontannée&#32;ici)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00274"/>00274 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00275"/>00275 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;a&#32;hadoc&#32;daugther&#32;element&#32;with&#32;the&#32;corresponding&#32;fission&#32;rate&#32;and&#32;a&#32;decay&#32;constant&#32;=&#32;+Infinity&#32;(immediate&#32;decay)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00276"/>00276 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Following&#32;this&#32;element&#32;add&#32;new&#32;chains&#32;for&#32;each&#32;fission&#32;product&#32;with&#32;its&#32;probability&#32;included&#32;in&#32;the&#32;branching&#32;ratio&#32;and&#32;call&#32;this&#32;method&#32;for&#32;each&#32;fission&#32;product</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IZA_daughter&#32;=&#32;430990;&#32;<emphasis role="comment">//&#32;Tc-99&#32;at&#32;each&#32;fission</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00278"/>00278 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00279"/>00279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(strDecay&#32;==&#32;<emphasis role="stringliteral">&quot;Fission&quot;</emphasis>)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00280"/>00280 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;FissionRatePerN0&#32;&quot;&#32;&lt;&lt;&#32;FissionRatePerN0&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;ReactionRate_perN0&#32;of&#32;each&#32;fission&#32;product&#32;as&#32;the&#32;branching&#32;ratio&#32;from&#32;X&#32;to&#32;the&#32;daugther&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;sum&#32;of&#32;branching&#32;ratios&#32;should&#32;be&#32;2,&#32;hence&#32;the&#32;branching&#32;ratio&#32;is&#32;calculated&#32;as&#32;ReactionRate_perN0/FissionRatePerN0&#32;and&#32;FissionRatePerN0&#32;is&#32;the&#32;sum&#32;of&#32;ReactionRate_perN0&#32;divided&#32;by&#32;2</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorElement.push_back(&#32;{000000,&#32;1E+38,&#32;std::log(ReactionRate_perN0)&#32;-&#32;std::log(FissionRatePerN0),&#32;1,&#32;0}&#32;);&#32;<emphasis role="comment">//&#32;Add&#32;new&#32;element&#32;to&#32;the&#32;vector&#32;of&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorChain[vectorChain.size()-1]&#32;=&#32;vectorElement;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;last&#32;chain&#32;of&#32;elements&#32;for&#32;the&#32;first&#32;decay&#32;path</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_element&#32;=&#32;vectorElement.size()-1;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;position&#32;of&#32;the&#32;element&#32;in&#32;the&#32;vector&#32;of&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00286"/>00286 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;And&#32;continue&#32;with&#32;the&#32;next&#32;if</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00288"/>00288 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00289"/>00289 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00290"/>00290 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Manage&#32;the&#32;decay/transmutation&#32;product</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00291"/>00291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;mapStoreElem[IZA_daughter])&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;product&#32;found&#32;and&#32;unstable&#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;Add&#32;decay&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;channels&#32;to&#32;the&#32;decay&#32;chain</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;product&#32;found&#32;and&#32;transmutation&#32;-&gt;&#32;Add&#32;transmutation&#32;channels&#32;to&#32;the&#32;decay&#32;chain</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;product&#32;found&#32;and&#32;stable&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;Add&#32;element&#32;to&#32;the&#32;vector&#32;of&#32;elements&#32;and&#32;update&#32;last&#32;chain&#32;of&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;product&#32;not&#32;found&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;Print&#32;an&#32;error&#32;and&#32;continue&#32;with&#32;the&#32;next&#32;decay</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_m_x_element">TMXElement</link>*&#32;DaughterElem&#32;=&#32;mapStoreElem[IZA_daughter];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambda_star_daughter&#32;=&#32;lambdaStar(DaughterElem,&#32;LogicVolumeName);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00297"/>00297 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!DaughterElem-&gt;Stable()&#32;||&#32;lambda_star_daughter&#32;!=&#32;0)&#32;{&#32;<emphasis role="comment">//&#32;if&#32;daughter&#32;element&#32;is&#32;unstable&#32;or&#32;transmuted&#32;:&#32;implementation&#32;of&#32;the&#32;decay&#32;channel</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RecursiveChain(DaughterElem,&#32;vectorChain,&#32;LogicVolumeName,&#32;lambda_star_daughter);&#32;<emphasis role="comment">//&#32;Call&#32;this&#32;method:&#32;Construct&#32;the&#32;chain&#32;recursively&#32;for&#32;the&#32;daughter</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">//&#32;if&#32;no&#32;decay&#32;and&#32;no&#32;transmutation&#32;:&#32;Add&#32;last&#32;(stable)&#32;element&#32;in&#32;the&#32;chain</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorElement.push_back(&#32;{(double)DaughterElem-&gt;IZA(),&#32;0,&#32;0,&#32;1,&#32;0}&#32;);&#32;<emphasis role="comment">//&#32;Add&#32;stable&#32;daughter&#32;element&#32;to&#32;the&#32;chain&#32;of&#32;elements&#32;only&#32;if&#32;no&#32;transmutation</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorChain[index_VectorElement]&#32;=&#32;vectorElement;&#32;<emphasis role="comment">//&#32;Update&#32;this&#32;chain&#32;of&#32;elements&#32;in&#32;the&#32;vector&#32;of&#32;chains&#32;of&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorElement.pop_back();&#32;<emphasis role="comment">//&#32;Remove&#32;last&#32;(stable)&#32;element&#32;to&#32;the&#32;chain&#32;of&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00306"/>00306 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorElement.pop_back();&#32;<emphasis role="comment">//&#32;Remove&#32;last&#32;element&#32;to&#32;the&#32;chain&#32;of&#32;elements&#32;(because&#32;every&#32;chain&#32;of&#32;this&#32;element&#32;have&#32;been&#32;implemented</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00308"/>00308 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Normalization&#32;of&#32;branching&#32;ratios&#32;by&#32;the&#32;number&#32;of&#32;same&#32;linear&#32;chain&#32;(&#32;normalization&#32;of&#32;new&#32;variable&#32;?&#32;-&gt;&#32;it&#32;should&#32;be&#32;new&#32;variables)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=index_VectorElement;&#32;j&#32;&lt;&#32;(int)vectorChain.size();&#32;++j)&#32;{&#32;vectorChain[j][index_element][3]&#32;=&#32;vectorChain.size()&#32;-&#32;index_VectorElement;}&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;occurence&#32;of&#32;this&#32;decay&#32;path&#32;in&#32;the&#32;list&#32;of&#32;linear&#32;chains</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00311"/>00311 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00312"/>00312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n\n\n\n\n\n\nDaugther&#32;element&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;IZA_daughter&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;not&#32;found&#32;in&#32;TMXElement&#32;database.\n\n\n\n\n\n\n\n&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00314"/>00314 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00315"/>00315 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00316"/>00316 <emphasis role="comment">//&#32;Construct&#32;linear&#32;decay&#32;paths&#32;of&#32;element&#32;IZA&#32;due&#32;to&#32;decay&#32;or&#32;transmutation&#32;and&#32;update&#32;the&#32;map&#32;of&#32;decay&#32;paths</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00317"/>00317 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::ConstructChainNoTransmutation(<emphasis role="keywordtype">int</emphasis>&#32;IZA)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00318"/>00318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fMapChains.find(IZA)&#32;==&#32;fMapChains.end())&#32;{&#32;<emphasis role="comment">//&#32;if&#32;element&#32;is&#32;not&#32;already&#32;in&#32;the&#32;map</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00319"/>00319 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;\n&#32;***&#32;IZA&#32;found&#32;:&#32;&quot;&#32;&lt;&lt;&#32;IZA&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00320"/>00320 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;if&#32;(fMapChains[IZA].size()&#32;==&#32;0)&#32;{&#32;//&#32;if&#32;element&#32;is&#32;not&#32;already&#32;in&#32;the&#32;map</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::map&lt;int,&#32;TMXElement*&gt;&#32;mapStoreElem&#32;=&#32;TMXElementStore::Store();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;mapStoreElem[IZA])&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_m_x_element">TMXElement</link>*&#32;elem&#32;=&#32;mapStoreElem[IZA];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambda_mother&#32;=&#32;lambda(elem);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00325"/>00325 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&#32;vectorChain;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(lambda_mother&#32;!=&#32;0)&#32;{&#32;<emphasis role="comment">//&#32;if&#32;element&#32;is&#32;unstable&#32;or&#32;transmuted&#32;:&#32;implementation&#32;of&#32;the&#32;decay&#32;channel</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;vectorElement;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorChain.push_back(vectorElement);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00330"/>00330 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RecursiveChainNoTransmutation(elem,&#32;vectorChain,&#32;lambda_mother);&#32;&#32;<emphasis role="comment">//&#32;Construct&#32;the&#32;chain&#32;recursively</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;vectorChain.push_back({{(double)IZA,&#32;0,&#32;0,&#32;1,&#32;0}});&#32;}&#32;<emphasis role="comment">//&#32;{IZA,&#32;DecayConstant*,&#32;ln(BranchingRatio*),&#32;Number&#32;of&#32;occurence,&#32;??}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapChains[IZA]&#32;=&#32;vectorChain;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Store&#32;the&#32;vector&#32;of&#32;chains&#32;in&#32;a&#32;map[key&#32;=&#32;IZA]</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Element&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;IZA&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;not&#32;found&#32;in&#32;the&#32;database.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00338"/>00338 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00339"/>00339 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00340"/>00340 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00341"/>00341 <emphasis role="comment">//&#32;Recursive&#32;construction&#32;of&#32;linear&#32;chains&#32;following&#32;each&#32;decay&#32;path&#32;successively</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00342"/>00342 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::RecursiveChainNoTransmutation(<link linkend="_class_t_m_x_element">TMXElement</link>*&#32;MotherElem,&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&amp;&#32;vectorChain,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambda_mother)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00343"/>00343 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00344"/>00344 &#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;vectorElement&#32;=&#32;vectorChain[vectorChain.size()-1];&#32;<emphasis role="comment">//&#32;Read&#32;the&#32;last&#32;chain&#32;of&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00345"/>00345 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;TMXElement*&gt;&#32;mapStoreElem&#32;=&#32;TMXElementStore::Store();&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;new&#32;element&#32;in&#32;the&#32;DB</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00346"/>00346 &#32;&#32;&#32;&#32;vector&lt;TMXDecayChannel*&gt;&#32;vectorDecays&#32;=&#32;MotherElem-&gt;DecayChannels();&#32;<emphasis role="comment">//&#32;Decay&#32;channels&#32;of&#32;the&#32;new&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00347"/>00347 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00348"/>00348 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Loop&#32;over&#32;decay&#32;channels&#32;of&#32;the&#32;new&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00349"/>00349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;(int)vectorDecays.size();&#32;++i&#32;)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddMotherAndProgenyNoTransmutation(vectorChain,&#32;vectorElement,&#32;MotherElem,&#32;lambda_mother,&#32;vectorDecays[i]-&gt;BranchingRatio(),&#32;vectorDecays[i]-&gt;IZA(),&#32;i,&#32;vectorDecays[i]-&gt;Decay());
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00351"/>00351 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00352"/>00352 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00353"/>00353 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00354"/>00354 <emphasis role="comment">//&#32;Add&#32;the&#32;decay&#32;channel&#32;the&#32;mother&#32;element&#32;and&#32;its&#32;progeny</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00355"/>00355 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::AddMotherAndProgenyNoTransmutation(std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&amp;&#32;vectorChain,&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&amp;&#32;vectorElement,&#32;<link linkend="_class_t_m_x_element">TMXElement</link>*&#32;MotherElem,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambda_mother,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;BranchingRatio,&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZA_daughter,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;std::string&#32;strDecay=<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00356"/>00356 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00357"/>00357 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;TMXElement*&gt;&#32;mapStoreElem&#32;=&#32;TMXElementStore::Store();&#32;<emphasis role="comment">//&#32;Instance&#32;the&#32;TMXElement&#32;DB</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00358"/>00358 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00359"/>00359 &#32;&#32;&#32;&#32;vectorElement.push_back(&#32;{(double)MotherElem-&gt;IZA(),&#32;lambda_mother,&#32;std::log(BranchingRatio),&#32;1,&#32;0}&#32;);&#32;<emphasis role="comment">//&#32;Add&#32;new&#32;element&#32;to&#32;the&#32;vector&#32;of&#32;elements&#32;in&#32;case&#32;of&#32;decay&#32;or&#32;transmutation</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00360"/>00360 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&gt;0)&#32;vectorChain.push_back(vectorElement);&#32;&#32;<emphasis role="comment">//&#32;Add&#32;new&#32;chain&#32;of&#32;elements&#32;in&#32;case&#32;of&#32;several&#32;decay&#32;paths</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00361"/>00361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;vectorChain[vectorChain.size()-1]&#32;=&#32;vectorElement;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;last&#32;chain&#32;of&#32;elements&#32;for&#32;the&#32;first&#32;decay&#32;path</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00362"/>00362 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_VectorElement&#32;=&#32;vectorChain.size()-1;&#32;&#32;<emphasis role="comment">//&#32;Position&#32;of&#32;the&#32;vector&#32;of&#32;elements&#32;in&#32;the&#32;vector&#32;of&#32;chains</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00363"/>00363 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_element&#32;=&#32;vectorElement.size()-1;&#32;&#32;<emphasis role="comment">//&#32;Position&#32;of&#32;the&#32;element&#32;in&#32;the&#32;vector&#32;of&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00364"/>00364 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00365"/>00365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(strDecay&#32;==&#32;<emphasis role="stringliteral">&quot;SF&quot;</emphasis>)&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00366"/>00366 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!!!&#32;WARNING&#32;!!!</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00367"/>00367 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;How&#32;to&#32;manage&#32;spontaneous&#32;fission&#32;?</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00368"/>00368 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Rechercher&#32;Fission&#32;products&#32;dans&#32;DB&#32;GEANT4&#32;pour&#32;même&#32;RN&#32;avec&#32;un&#32;neutron&#32;en&#32;moins&#32;(car&#32;fission&#32;spontannée&#32;ici)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00369"/>00369 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00370"/>00370 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;a&#32;hadoc&#32;daugther&#32;element&#32;with&#32;the&#32;corresponding&#32;fission&#32;rate&#32;and&#32;a&#32;decay&#32;constant&#32;=&#32;+Infinity&#32;(immediate&#32;decay)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00371"/>00371 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Following&#32;this&#32;element&#32;add&#32;new&#32;chains&#32;for&#32;each&#32;fission&#32;product&#32;with&#32;its&#32;probability&#32;included&#32;in&#32;the&#32;branching&#32;ratio&#32;and&#32;call&#32;this&#32;method&#32;for&#32;each&#32;fission&#32;product</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IZA_daughter&#32;=&#32;430990;&#32;<emphasis role="comment">//&#32;Tc-99&#32;at&#32;each&#32;fission</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00373"/>00373 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00374"/>00374 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00375"/>00375 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Manage&#32;the&#32;decay/transmutation&#32;product</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00376"/>00376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;mapStoreElem[IZA_daughter])&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;product&#32;found&#32;and&#32;unstable&#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;Add&#32;decay&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;channels&#32;to&#32;the&#32;decay&#32;chain</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;product&#32;found&#32;and&#32;transmutation&#32;-&gt;&#32;Add&#32;transmutation&#32;channels&#32;to&#32;the&#32;decay&#32;chain</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;product&#32;found&#32;and&#32;stable&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;Add&#32;element&#32;to&#32;the&#32;vector&#32;of&#32;elements&#32;and&#32;update&#32;last&#32;chain&#32;of&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;product&#32;not&#32;found&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;Print&#32;an&#32;error&#32;and&#32;continue&#32;with&#32;the&#32;next&#32;decay</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_m_x_element">TMXElement</link>*&#32;DaughterElem&#32;=&#32;mapStoreElem[IZA_daughter];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambda_daughter&#32;=&#32;lambda(DaughterElem);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00382"/>00382 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!DaughterElem-&gt;Stable()&#32;||&#32;lambda_daughter&#32;!=&#32;0)&#32;{&#32;<emphasis role="comment">//&#32;if&#32;daughter&#32;element&#32;is&#32;unstable&#32;or&#32;transmuted&#32;:&#32;implementation&#32;of&#32;the&#32;decay&#32;channel</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RecursiveChainNoTransmutation(DaughterElem,&#32;vectorChain,&#32;lambda_daughter);&#32;<emphasis role="comment">//&#32;Call&#32;this&#32;method:&#32;Construct&#32;the&#32;chain&#32;recursively&#32;for&#32;the&#32;daughter</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">//&#32;if&#32;no&#32;decay&#32;and&#32;no&#32;transmutation&#32;:&#32;Add&#32;last&#32;(stable)&#32;element&#32;in&#32;the&#32;chain</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorElement.push_back(&#32;{(double)DaughterElem-&gt;IZA(),&#32;0,&#32;0,&#32;1,&#32;0}&#32;);&#32;<emphasis role="comment">//&#32;Add&#32;stable&#32;daughter&#32;element&#32;to&#32;the&#32;chain&#32;of&#32;elements&#32;only&#32;if&#32;no&#32;transmutation</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorChain[index_VectorElement]&#32;=&#32;vectorElement;&#32;<emphasis role="comment">//&#32;Update&#32;this&#32;chain&#32;of&#32;elements&#32;in&#32;the&#32;vector&#32;of&#32;chains&#32;of&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorElement.pop_back();&#32;<emphasis role="comment">//&#32;Remove&#32;last&#32;(stable)&#32;element&#32;to&#32;the&#32;chain&#32;of&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00391"/>00391 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vectorElement.pop_back();&#32;<emphasis role="comment">//&#32;Remove&#32;last&#32;element&#32;to&#32;the&#32;chain&#32;of&#32;elements&#32;(because&#32;every&#32;chain&#32;of&#32;this&#32;element&#32;have&#32;been&#32;implemented</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00393"/>00393 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Normalization&#32;of&#32;branching&#32;ratios&#32;by&#32;the&#32;number&#32;of&#32;same&#32;linear&#32;chain&#32;(&#32;normalization&#32;of&#32;new&#32;variable&#32;?&#32;-&gt;&#32;it&#32;should&#32;be&#32;new&#32;variables)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=index_VectorElement;&#32;j&#32;&lt;&#32;(int)vectorChain.size();&#32;++j)&#32;{&#32;vectorChain[j][index_element][3]&#32;=&#32;vectorChain.size()&#32;-&#32;index_VectorElement;}&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;occurence&#32;of&#32;this&#32;decay&#32;path&#32;in&#32;the&#32;list&#32;of&#32;linear&#32;chains</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00396"/>00396 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00397"/>00397 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\n\n\n\n\n\n\nDaugther&#32;element&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;IZA_daughter&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;not&#32;found&#32;in&#32;TMXElement&#32;database.\n\n\n\n\n\n\n\n&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00399"/>00399 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00400"/>00400 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00401"/>00401 <emphasis role="comment">//&#32;Print&#32;stored&#32;linear&#32;chains&#32;for&#32;every&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00402"/>00402 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::DumpStoredChains()&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00403"/>00403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;vectorChain&#32;:&#32;fMapChains)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vectorChain.second.size()&#32;&gt;&#32;0)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\nElement&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;vectorChain.second[0][0][0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;vectorElement&#32;:&#32;vectorChain.second)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n\t\t&quot;</emphasis>;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;element&#32;:&#32;vectorElement)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(element[1]&#32;!=&#32;0)&#32;{std::cout&#32;&lt;&lt;&#32;(int)element[0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;--(T=&quot;</emphasis>&#32;&lt;&lt;&#32;1./element[1]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;b=&quot;</emphasis>&#32;&lt;&lt;&#32;std::exp(element[2])&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;n=&quot;</emphasis>&#32;&lt;&lt;&#32;element[3]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)--&gt;&#32;&quot;</emphasis>;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{std::cout&#32;&lt;&lt;&#32;(int)element[0]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;--(T=+Inf,&#32;b=&quot;</emphasis>&#32;&lt;&lt;&#32;std::exp(element[2])&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;n=&quot;</emphasis>&#32;&lt;&lt;&#32;element[3]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)--&gt;&#32;&quot;</emphasis>;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;the&#32;end&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;No&#32;radioactive&#32;element&#32;in&#32;store&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00417"/>00417 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00418"/>00418 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00419"/>00419 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00420"/>00420 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::CalculateDecayNt(<emphasis role="keywordtype">double</emphasis>&#32;t)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00421"/>00421 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Beginning&#32;of&#32;decay&#32;of&#32;N0&#32;to&#32;calculate&#32;Nt&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00422"/>00422 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00423"/>00423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,&#32;long&#32;double&gt;::iterator&#32;it=fMapN_0.begin();&#32;it!=fMapN_0.end();&#32;++it)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;IZA_0&#32;=&#32;it-&gt;first;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;N0&#32;=&#32;it-&gt;second;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&#32;vectorChains&#32;=&#32;fMapChains[IZA_0];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;vectorElem&#32;:&#32;vectorChains)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00428"/>00428 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00429"/>00429 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;if(IZA_0&#32;==&#32;922380)&#32;{&#32;&#32;std::cout&#32;&#32;&lt;&lt;&#32;&quot;&#32;vectorChain&#32;:&#32;&quot;&lt;&lt;&#32;vectorChains.size()&#32;&lt;&lt;&#32;&quot;&#32;vectorElem&#32;:&#32;&quot;&#32;&lt;&lt;&#32;vectorChains.size()&#32;&lt;&lt;&#32;std::endl;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00430"/>00430 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;(int)vectorElem.size();&#32;++i)&#32;{&#32;<emphasis role="comment">//&#32;i&#32;=&#32;the&#32;ith&#32;element&#32;in&#32;the&#32;decay&#32;chain</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZA_i&#32;=&#32;(int)vectorElem[i][0];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m&#32;=&#32;contribution&#32;of&#32;m&#32;previous&#32;element&#32;in&#32;the&#32;chain&#32;to&#32;N_i</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m=0;&#32;<emphasis role="comment">//&#32;only&#32;N0&#32;=&#32;N0[m=0]&#32;!=&#32;0&#32;because&#32;we&#32;do&#32;the&#32;Calculation&#32;for&#32;every&#32;elements&#32;in&#32;fMapN_0.&#32;Index&#32;m=0&#32;instead&#32;of&#32;a&#32;for&#32;loop&#32;with&#32;(int&#32;m=0;&#32;m&lt;=i;&#32;++m)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_BranchingRatioStar_product&#32;=&#32;ln_branchingProduct(vectorElem,&#32;i,&#32;m);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=m;&#32;j&lt;=i;&#32;++j)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambdaStar_j&#32;=&#32;vectorElem[j][1];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lambdaStar_j&#32;&lt;=&#32;2.e-38)&#32;{&#32;<emphasis role="comment">//&#32;If&#32;stable&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00439"/>00439 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00440"/>00440 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(IZA_i&#32;==&#32;822060)&#32;{&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Stable&#32;IZA_i&#32;:&#32;&quot;&#32;&lt;&lt;&#32;IZA_i&#32;&lt;&lt;&#32;&quot;;&#32;i&#32;:&#32;&quot;&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;&quot;&#32;BranchingRatioStar_product&#32;:&#32;&quot;&#32;&lt;&lt;&#32;std::exp(ln_BranchingRatioStar_product)&#32;&lt;&lt;&#32;&quot;&#32;Add&#32;:&#32;&quot;&#32;&lt;&lt;&#32;std::exp(ln_BranchingRatioStar_product&#32;+&#32;std::log(N0))&#32;&lt;&lt;&#32;&quot;\tfMapNt[IZA_i]&#32;:&#32;&quot;&#32;&lt;&lt;&#32;fMapNt[IZA_i]&#32;+&#32;fMapNt_small[IZA_i]&#32;+&#32;fMapNt_verysmall[IZA_i]&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00441"/>00441 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00442"/>00442 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(fMapNt[IZA_i]&#32;+&#32;std::exp(ln_BranchingRatioStar_product&#32;+&#32;std::log(N0))&#32;!=&#32;fMapNt[IZA_i])</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt[IZA_i]&#32;+=&#32;std::exp(ln_BranchingRatioStar_product&#32;+&#32;std::log(N0))&#32;;&#32;<emphasis role="comment">//&#32;if&#32;stable,&#32;Calculation&#32;N_i&#32;+=&#32;ln_BranchingRatioStar_product&#32;*&#32;dijm(=1)&#32;*&#32;N_0&#32;*&#32;exp(-&#32;0&#32;*&#32;t)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00444"/>00444 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00445"/>00445 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt_small[IZA_i]&#32;+=&#32;std::exp(ln_BranchingRatioStar_product&#32;+&#32;std::log(N0));</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sign&#32;=&#32;1;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_d_ijm&#32;=&#32;ln_dijm_decay(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;t,&#32;sign);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00450"/>00450 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00451"/>00451 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(IZA_i&#32;==&#32;822060)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Decay&#32;IZA_i&#32;:&#32;&quot;&#32;&lt;&lt;&#32;IZA_i&#32;&lt;&lt;&#32;&quot;;&#32;i&#32;:&#32;&quot;&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;&quot;;&#32;IZA_j&#32;:&#32;&quot;&#32;&lt;&lt;&#32;vectorElem[j][0]&#32;&lt;&lt;&#32;&quot;\tBR_product:&#32;&quot;&#32;&lt;&lt;&#32;&#32;std::exp(ln_BranchingRatioStar_product)&#32;&lt;&lt;&#32;&quot;\td_ijm:&#32;&quot;&#32;&lt;&lt;&#32;&#32;sign*std::exp(ln_d_ijm)&#32;&lt;&lt;&#32;&quot;\tlambda_j:&#32;&quot;&#32;&lt;&lt;&#32;lambdaStar_j&#32;&lt;&lt;&#32;&quot;\texp:&#32;&quot;&#32;&lt;&lt;&#32;std::exp(-lambdaStar_j&#32;*&#32;t)&#32;&#32;&lt;&lt;&#32;&quot;\tAdd:&#32;&quot;&#32;&lt;&lt;&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t)&#32;&lt;&lt;&#32;&quot;\tfMapNt[IZA_i]&#32;:&#32;&quot;&#32;&lt;&lt;&#32;fMapNt[IZA_i]&#32;&#32;+&#32;fMapNt_small[IZA_i]+&#32;fMapNt_verysmall[IZA_i]&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00452"/>00452 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(IZA_i&#32;==&#32;000000&#32;&amp;&amp;&#32;sign&#32;&lt;&#32;0)&#32;{fMapNt[IZA_i]&#32;+=&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t&#32;-&#32;std::log(2.));}&#32;<emphasis role="comment">//&#32;Calculation&#32;N_i&#32;+=&#32;ln_BranchingRatioStar_product&#32;*&#32;dijm(=1)&#32;*&#32;N_0&#32;exp(-&#32;Lambda_j&#32;*&#32;t)&#32;/&#32;2.&#32;&#32;&#32;=&gt;&#32;in&#32;case&#32;of&#32;IZA_i&#32;==&#32;000000,&#32;it&#32;is&#32;a&#32;had&#32;oc&#32;element&#32;introduced&#32;to&#32;manage&#32;fission.&#32;As&#32;the&#32;quantity&#32;of&#32;this&#32;element&#32;is&#32;half&#32;the&#32;quantity&#32;of&#32;fission&#32;product,&#32;it&apos;s&#32;decay&#32;is&#32;divided&#32;by&#32;2</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00455"/>00455 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(fMapNt[IZA_i]&#32;+&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t)&#32;!=&#32;fMapNt[IZA_i])</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00456"/>00456 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt[IZA_i]&#32;+=&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t);&#32;//&#32;Calculation&#32;N_i&#32;+=&#32;ln_BranchingRatioStar_product&#32;*&#32;dijm(=1)&#32;*&#32;N_0&#32;exp(-&#32;Lambda_j&#32;*&#32;t)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00457"/>00457 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00458"/>00458 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt_small[IZA_i]&#32;+=&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t);</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00459"/>00459 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00460"/>00460 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(std::log10(std::abs(fMapNt[IZA_i]))&#32;-&#32;std::log10(std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t))&#32;&gt;&#32;15)&#32;//&#32;New&#32;value&#32;is&#32;very&#32;small</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00461"/>00461 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt_verysmall[IZA_i]&#32;+=&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t);</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00462"/>00462 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if(std::log10(std::abs(fMapNt[IZA_i]))&#32;-&#32;std::log10(std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t))&#32;&gt;&#32;10)&#32;//&#32;New&#32;value&#32;is&#32;small</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00463"/>00463 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt_small[IZA_i]&#32;+=&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t);</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00464"/>00464 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if(std::log10(std::abs(fMapNt[IZA_i]))&#32;-&#32;std::log10(std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t))&#32;&lt;&#32;-10)&#32;{&#32;//&#32;New&#32;value&#32;is&#32;very&#32;high</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00465"/>00465 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(std::log10(std::abs(fMapNt[IZA_i]))&#32;-&#32;std::log10(std::abs(fMapNt_verysmall[IZA_i]))&#32;&lt;&#32;5)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00466"/>00466 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt_verysmall[IZA_i]&#32;+=&#32;fMapNt[IZA_i];</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00467"/>00467 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00468"/>00468 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt_small[IZA_i]&#32;+=&#32;fMapNt[IZA_i];</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00469"/>00469 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt[IZA_i]&#32;=&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t);</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00470"/>00470 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00471"/>00471 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;//&#32;New&#32;value&#32;is&#32;in&#32;the&#32;same&#32;order&#32;of&#32;magnitude</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt[IZA_i]&#32;+=&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatioStar_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambdaStar_j&#32;*&#32;t);&#32;<emphasis role="comment">//&#32;Calculation&#32;N_i&#32;+=&#32;ln_BranchingRatioStar_product&#32;*&#32;dijm(=1)&#32;*&#32;N_0&#32;exp(-&#32;Lambda_j&#32;*&#32;t)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00474"/>00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00476"/>00476 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00477"/>00477 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(IZA_i&#32;==&#32;822060)&#32;{&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;\n&quot;&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00480"/>00480 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00481"/>00481 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;End&#32;of&#32;decay&#32;of&#32;N0&#32;to&#32;calculate&#32;Nt&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00482"/>00482 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00483"/>00483 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00484"/>00484 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::decayNuclideVector(std::map&lt;int,&#32;double&gt;&amp;&#32;nuclideVector,&#32;std::map&lt;int,&#32;int&gt;&#32;sourceTerm,&#32;<emphasis role="keywordtype">double</emphasis>&#32;irradiationPeriod,&#32;<emphasis role="keywordtype">double</emphasis>&#32;scalingFactor)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00485"/>00485 {
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00486"/>00486 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;avoidDecay&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00487"/>00487 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;double&gt;&#32;nuclideVectorUpdated;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00488"/>00488 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00489"/>00489 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::vector&lt;long&#32;double&gt;&gt;&#32;forAccumulator;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00490"/>00490 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::map&lt;int,&#32;double&gt;::iterator&#32;it=nuclideVector.begin();&#32;it!=nuclideVector.end();&#32;++it)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00491"/>00491 &#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;IZA_0&#32;=&#32;it-&gt;first;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;N0&#32;=&#32;it-&gt;second;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(avoidDecay)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nuclideVectorUpdated[IZA_0]&#32;=&#32;nuclideVector[IZA_0];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConstructChainNoTransmutation(IZA_0);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&#32;vectorChains&#32;=&#32;fMapChains[IZA_0];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00502"/>00502 <emphasis role="comment">/*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(vectorChains[0][0][1]&#32;&lt;&#32;2.e-38)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00503"/>00503 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00504"/>00504 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forAccumulator[IZA_0]&#32;=&#32;{nuclideVector[IZA_0]};</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00505"/>00505 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00506"/>00506 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;forAccumulator[IZA_0]&#32;=&#32;{0.};</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00507"/>00507 <emphasis role="comment">*/</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;vectorElem&#32;:&#32;vectorChains)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;(int)vectorElem.size();&#32;++i)&#32;{&#32;<emphasis role="comment">//&#32;i&#32;=&#32;the&#32;ith&#32;element&#32;in&#32;the&#32;decay&#32;chain</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00510"/>00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZA_i&#32;=&#32;(int)vectorElem[i][0];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m=0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_BranchingRatio_product&#32;=&#32;ln_branchingProduct(vectorElem,&#32;i,&#32;m);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(forAccumulator.find(IZA_i)&#32;==&#32;forAccumulator.end())&#32;forAccumulator[IZA_i]&#32;=&#32;{};
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=m;&#32;j&lt;=i;&#32;++j)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambda_j&#32;=&#32;vectorElem[j][1];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sign&#32;=&#32;1;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_d_ijm&#32;=&#32;ln_dijm_decay(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;irradiationPeriod,&#32;sign);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00518"/>00518 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lambda_j&#32;&gt;&#32;2.e-38){
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forAccumulator[IZA_i].push_back(sign&#32;*&#32;std::exp(&#32;ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;irradiationPeriod));
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(std::exp(ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;irradiationPeriod)&#32;==&#32;1&#32;&amp;&amp;&#32;ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;irradiationPeriod&#32;!=&#32;0)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;WARNING,&#32;NOT&#32;ENOUGH&#32;PRECISION&#32;NUMBER&#32;FOR&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;IZA_i&lt;&lt;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lambda_j&#32;&lt;=&#32;2.e-38&#32;)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forAccumulator[IZA_i].push_back(std::exp(ln_BranchingRatio_product&#32;+&#32;std::log(N0)));
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00526"/>00526 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00527"/>00527 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nuclideVectorUpdated[IZA_i]&#32;+=&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;std::log(N0))&#32;;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00528"/>00528 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;StableDecay&#32;&quot;&#32;&lt;&lt;&#32;IZA_0&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;IZA_i&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;std::log(N0))&#32;&lt;&lt;&#32;&quot;&#32;lambda&#32;&quot;&#32;&lt;&lt;&#32;lambda_j&#32;&lt;&lt;&#32;&quot;&#32;brprod&#32;&quot;&lt;&lt;ln_BranchingRatio_product&#32;&lt;&lt;&#32;&quot;&#32;dijm&#32;&quot;&#32;&lt;&lt;&#32;ln_d_ijm&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00530"/>00530 <emphasis role="comment">/*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00531"/>00531 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nuclideVectorUpdated[IZA_i]&#32;+=&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;irradiationPeriod);</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00532"/>00532 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;UnStableDecay&#32;&quot;&#32;&lt;&lt;&#32;IZA_0&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;IZA_i&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;irradiationPeriod)&#32;&lt;&lt;&#32;&quot;&#32;lambda&#32;&quot;&#32;&lt;&lt;&#32;lambda_j&#32;&lt;&lt;&#32;&quot;&#32;brprod&#32;&quot;&lt;&lt;ln_BranchingRatio_product&lt;&lt;&#32;&quot;&#32;dijm&#32;&quot;&#32;&lt;&lt;&#32;ln_d_ijm&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00533"/>00533 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(std::exp(ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;irradiationPeriod)&#32;==&#32;1&#32;&amp;&amp;&#32;ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;irradiationPeriod&#32;!=&#32;0)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00534"/>00534 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;&#32;WARNING,&#32;NOT&#32;ENOUGH&#32;PRECISION&#32;NUMBER&#32;FOR&#32;&quot;&#32;&lt;&lt;&#32;IZA_i&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00535"/>00535 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}*/</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00540"/>00540 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00541"/>00541 <emphasis role="comment">//&#32;&#32;&#32;&#32;std::cout&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00542"/>00542 <emphasis role="comment">//&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Decayed&#32;initial&#32;term&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00543"/>00543 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;double&gt;&#32;decayedInitialTerm;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00544"/>00544 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;key:&#32;forAccumulator)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00545"/>00545 &#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decayedInitialTerm[key.first]&#32;=&#32;neumaier_sum(key.second);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00547"/>00547 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00548"/>00548 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(nuclideVector.find(key.first)&#32;==&#32;nuclideVector.end())&#32;std::cout&#32;&lt;&lt;&#32;key.first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;&quot;0&quot;&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;decayedInitialTerm[key.first]&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00549"/>00549 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;std::cout&#32;&lt;&lt;&#32;key.first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;nuclideVector[key.first]&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;decayedInitialTerm[key.first]&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nuclideVectorUpdated[key.first]&#32;+=&#32;decayedInitialTerm[key.first];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00551"/>00551 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00552"/>00552 <emphasis role="comment">//&#32;&#32;&#32;&#32;std::cout&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00553"/>00553 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00554"/>00554 &#32;&#32;&#32;&#32;CalculateSourceNtNoTransmutation2(sourceTerm,&#32;irradiationPeriod,&#32;scalingFactor,&#32;nuclideVectorUpdated,&#32;avoidDecay);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00555"/>00555 &#32;&#32;&#32;&#32;nuclideVector&#32;=&#32;std::move(nuclideVectorUpdated);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00556"/>00556 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00557"/>00557 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00558"/>00558 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00559"/>00559 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::CalculateSourceNtNoTransmutation2(std::map&lt;int,&#32;int&gt;&#32;sourceTerm,&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;irradiationPeriod,&#32;<emphasis role="keywordtype">double</emphasis>&#32;scalingFactor,&#32;std::map&lt;int,&#32;double&gt;&amp;&#32;nuclideVectorUpdated,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;avoidDecay)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00560"/>00560 {
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00561"/>00561 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;std::vector&lt;long&#32;double&gt;&gt;&#32;forAccumulator;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00562"/>00562 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00563"/>00563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::map&lt;int,&#32;int&gt;::iterator&#32;it_isotope=sourceTerm.begin();&#32;it_isotope!=sourceTerm.end();&#32;++it_isotope)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;IZA&#32;=&#32;it_isotope-&gt;first;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;Nelem&#32;=&#32;(<emphasis role="keywordtype">long</emphasis>&#32;double)it_isotope-&gt;second&#32;*&#32;scalingFactor;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00566"/>00566 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CheckMotherIsConstant(IZA,&#32;Nelem);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConstructChainNoTransmutation(IZA);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00569"/>00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&#32;vectorChains&#32;=&#32;fMapChains[IZA];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00570"/>00570 &#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(vectorChains[0][0][1]&#32;&lt;&#32;2.e-38)&#32;forAccumulator[IZA]&#32;=&#32;{Nelem};</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00571"/>00571 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00572"/>00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;vectorElem&#32;:&#32;vectorChains)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00573"/>00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;(int)vectorElem.size();&#32;++i)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZA_i&#32;=&#32;(int)vectorElem[i][0];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m=0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_BranchingRatio_product&#32;=&#32;ln_branchingProduct(vectorElem,&#32;i,&#32;m);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(forAccumulator.find(IZA_i)&#32;==&#32;forAccumulator.end())&#32;forAccumulator[IZA_i]&#32;=&#32;{};
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00579"/>00579 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00580"/>00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=m;&#32;j&lt;=i;&#32;++j)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00581"/>00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sign&#32;=&#32;1;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_d_ijm&#32;=&#32;ln_dijm_source(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;irradiationPeriod,&#32;sign);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00583"/>00583 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00584"/>00584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vectorElem[j][1]&#32;&gt;&#32;2.e-38)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00585"/>00585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00586"/>00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forAccumulator[IZA_i].push_back(sign&#32;*&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;ln_d_ijm)&#32;*&#32;Nelem/irradiationPeriod&#32;*&#32;(-expm1(-vectorElem[j][1]&#32;*&#32;irradiationPeriod))&#32;/&#32;vectorElem[j][1]);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00587"/>00587 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nuclideVectorUpdated[IZA_i]&#32;+=&#32;sign&#32;*&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;ln_d_ijm)&#32;*&#32;Nelem/irradiationPeriod&#32;*&#32;(-expm1(-vectorElem[j][1]&#32;*&#32;irradiationPeriod))&#32;/&#32;vectorElem[j][1];</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00588"/>00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(expm1(-vectorElem[j][1]&#32;*&#32;irradiationPeriod)&#32;==&#32;0&#32;&amp;&amp;&#32;vectorElem[j][1]&#32;*&#32;irradiationPeriod&#32;!=&#32;0)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00589"/>00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;WARNING,&#32;NOT&#32;ENOUGH&#32;PRECISION&#32;NUMBER&#32;FOR&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;IZA_i&lt;&lt;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00590"/>00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00591"/>00591 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00592"/>00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vectorElem[j][1]&#32;&lt;=&#32;2.e-38&#32;)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00593"/>00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00594"/>00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forAccumulator[IZA_i].push_back(std::exp(ln_BranchingRatio_product)&#32;*&#32;Nelem);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00595"/>00595 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nuclideVectorUpdated[IZA_i]&#32;+=&#32;std::exp(ln_BranchingRatio_product)&#32;*&#32;Nelem&#32;;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00596"/>00596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00597"/>00597 <emphasis role="comment">/*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00598"/>00598 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00599"/>00599 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forAccumulator[IZA_i].push_back(sign&#32;*&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;ln_d_ijm)&#32;*&#32;Nelem/irradiationPeriod&#32;*&#32;(-expm1(-vectorElem[j][1]&#32;*&#32;irradiationPeriod))&#32;/&#32;vectorElem[j][1]);</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00600"/>00600 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nuclideVectorUpdated[IZA_i]&#32;+=&#32;sign&#32;*&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;ln_d_ijm)&#32;*&#32;Nelem/irradiationPeriod&#32;*&#32;(-expm1(-vectorElem[j][1]&#32;*&#32;irradiationPeriod))&#32;/&#32;vectorElem[j][1];</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00601"/>00601 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(expm1(-vectorElem[j][1]&#32;*&#32;irradiationPeriod)&#32;==&#32;0&#32;&amp;&amp;&#32;vectorElem[j][1]&#32;*&#32;irradiationPeriod&#32;!=&#32;0)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00602"/>00602 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;&#32;WARNING,&#32;NOT&#32;ENOUGH&#32;PRECISION&#32;NUMBER&#32;FOR&#32;&quot;&#32;&lt;&lt;&#32;IZA_i&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00603"/>00603 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}*/</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00604"/>00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00605"/>00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00606"/>00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00607"/>00607 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00608"/>00608 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00609"/>00609 <emphasis role="comment">//&#32;&#32;&#32;&#32;std::cout&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00610"/>00610 <emphasis role="comment">//&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Decayed&#32;source&#32;term&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00611"/>00611 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;double&gt;&#32;decayedSourceTerm;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00612"/>00612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;key:&#32;forAccumulator)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00613"/>00613 &#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00614"/>00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decayedSourceTerm[key.first]&#32;=&#32;neumaier_sum(key.second);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00615"/>00615 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;key.first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;sourceTerm[key.first]&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;decayedSourceTerm[key.first]&#32;/&#32;scalingFactor&#32;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00616"/>00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nuclideVectorUpdated[key.first]&#32;+=&#32;decayedSourceTerm[key.first];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00617"/>00617 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00618"/>00618 <emphasis role="comment">//&#32;&#32;&#32;&#32;std::cout&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00619"/>00619 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00620"/>00620 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00621"/>00621 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00622"/>00622 <emphasis role="comment">//&#32;https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00623"/>00623 <emphasis role="comment">//&#32;Note&#32;that&#32;it&#32;doesn&apos;t&#32;work&#32;if&#32;-ffast-math&#32;is&#32;enabled.</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00624"/>00624 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXBatemanDecay::neumaier_sum(std::vector&lt;long&#32;double&gt;&#32;c)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00625"/>00625 {
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00626"/>00626 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;sum{};
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00627"/>00627 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;running&#32;compensation&#32;for&#32;lost&#32;low-order&#32;bits.</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00628"/>00628 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;compensation{};
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00629"/>00629 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;i&#32;:&#32;c)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00630"/>00630 &#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00631"/>00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;temp{&#32;sum&#32;+&#32;i&#32;};
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00632"/>00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::abs(sum)&#32;&gt;=&#32;std::abs(i)&#32;)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00633"/>00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00634"/>00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;sum&#32;is&#32;bigger,&#32;low-order&#32;digits&#32;of&#32;input[i]&#32;are&#32;lost.</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00635"/>00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compensation&#32;+=&#32;(sum&#32;-&#32;temp)&#32;+&#32;i;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00636"/>00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00637"/>00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00638"/>00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Else&#32;low-order&#32;digits&#32;of&#32;sum&#32;are&#32;lost.</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00639"/>00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compensation&#32;+=&#32;(i&#32;-&#32;temp)&#32;+&#32;sum;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00640"/>00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00641"/>00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;=&#32;temp;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00642"/>00642 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00643"/>00643 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Correction&#32;only&#32;applied&#32;once&#32;in&#32;the&#32;very&#32;end.</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00644"/>00644 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sum&#32;+&#32;compensation;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00645"/>00645 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00646"/>00646 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00647"/>00647 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00648"/>00648 <emphasis role="comment">//&#32;Function&#32;to&#32;implement&#32;the&#32;Kahan</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00649"/>00649 <emphasis role="comment">//&#32;summation&#32;algorithm</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00650"/>00650 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXBatemanDecay::kahanSum(vector&lt;long&#32;double&gt;&#32;fa)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00651"/>00651 {
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00652"/>00652 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;sum&#32;=&#32;0.0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00653"/>00653 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00654"/>00654 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Variable&#32;to&#32;store&#32;the&#32;error</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00655"/>00655 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;c&#32;=&#32;0.0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00656"/>00656 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00657"/>00657 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Loop&#32;to&#32;iterate&#32;over&#32;the&#32;array</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00658"/>00658 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;f&#32;:&#32;fa)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00659"/>00659 &#32;&#32;&#32;&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00660"/>00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;y&#32;=&#32;f&#32;-&#32;c;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00661"/>00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;t&#32;=&#32;sum&#32;+&#32;y;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00662"/>00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;(t&#32;-&#32;sum)&#32;-&#32;y;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00663"/>00663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;=&#32;t;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00664"/>00664 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00665"/>00665 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sum;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00666"/>00666 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00667"/>00667 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00668"/>00668 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::CalculateDecayNtNoTransmutation(<emphasis role="keywordtype">double</emphasis>&#32;t,&#32;std::string&#32;LogicVolumeName)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00669"/>00669 <emphasis role="comment">/*&#32;&#32;&#32;&#32;for(int&#32;index=0;&#32;index&lt;2;&#32;++index){</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00670"/>00670 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(std::unordered_map&lt;int,&#32;std::unordered_map&lt;int,long&#32;double&gt;&gt;::iterator&#32;it1=fMapLVMotherDaughter_transm[index][LogicVolumeName].begin();&#32;it1!=fMapLVMotherDaughter_transm[index][LogicVolumeName].end();&#32;++it1)&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00671"/>00671 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(std::unordered_map&lt;int,long&#32;double&gt;::iterator&#32;it2=fMapLVMotherDaughter_transm[index][LogicVolumeName][it1-&gt;first].begin();&#32;it2!=fMapLVMotherDaughter_transm[index][LogicVolumeName][it1-&gt;first].end();&#32;++it2)&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00672"/>00672 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;ici&#32;&quot;&lt;&lt;LogicVolumeName&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;it2-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;it2-&gt;second&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00673"/>00673 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00674"/>00674 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00675"/>00675 <emphasis role="comment">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00676"/>00676 <emphasis role="comment">*/</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00677"/>00677 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sum&#32;of&#32;transmuted&#32;elements&#32;in&#32;the&#32;map&#32;fMapS_0&#32;(mother&#32;=&#32;depletion&#32;(&lt;0)&#32;;&#32;daughter&#32;=&#32;build&#32;up&#32;(&gt;0)&#32;)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00678"/>00678 &#32;&#32;&#32;&#32;SumTransmutedElements(LogicVolumeName);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00679"/>00679 <emphasis role="comment">//&#32;&#32;&#32;&#32;fMapNt=fMapN_0;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00680"/>00680 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00681"/>00681 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Modification&#32;of&#32;initial&#32;isotopic&#32;vector&#32;fMapN_0&#32;with&#32;depletion&#32;of&#32;mother&#32;elements&#32;and&#32;calculation&#32;of&#32;build&#32;up&#32;of&#32;daughter&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00682"/>00682 &#32;&#32;&#32;&#32;CalculateSourceNtNoTransmutation(t);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00683"/>00683 <emphasis role="comment">//&#32;&#32;&#32;&#32;fMapNt=fMapN_0;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00684"/>00684 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;decay&#32;of&#32;element&#32;in&#32;initial&#32;isotopic&#32;vector&#32;fMapN_0</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00685"/>00685 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,&#32;long&#32;double&gt;::iterator&#32;it=fMapN_0.begin();&#32;it!=fMapN_0.end();&#32;++it)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00686"/>00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;IZA_0&#32;=&#32;it-&gt;first;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00687"/>00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;N0&#32;=&#32;it-&gt;second;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00688"/>00688 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(LogicVolumeName&#32;==&#32;&quot;lfuelmat23&quot;)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00689"/>00689 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;Decay&#32;in&#32;&quot;&lt;&lt;IZA_0&lt;&lt;&quot;&#32;&quot;&lt;&lt;N0&lt;&lt;&quot;&#32;&quot;&lt;&lt;fMapNt[IZA_0]&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00690"/>00690 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00691"/>00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConstructChainNoTransmutation(IZA_0);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00692"/>00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&#32;vectorChains&#32;=&#32;fMapChains[IZA_0];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00693"/>00693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;vectorElem&#32;:&#32;vectorChains)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00694"/>00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;(int)vectorElem.size();&#32;++i)&#32;{&#32;<emphasis role="comment">//&#32;i&#32;=&#32;the&#32;ith&#32;element&#32;in&#32;the&#32;decay&#32;chain</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00695"/>00695 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(IZA_0&#32;==&#32;922380)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;LogicVolumeName&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00696"/>00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZA_i&#32;=&#32;(int)vectorElem[i][0];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00697"/>00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m&#32;=&#32;contribution&#32;of&#32;m&#32;previous&#32;element&#32;in&#32;the&#32;chain&#32;to&#32;N_i</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00698"/>00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m=0;&#32;<emphasis role="comment">//&#32;only&#32;N0&#32;=&#32;N0[m=0]&#32;!=&#32;0&#32;because&#32;we&#32;do&#32;the&#32;Calculation&#32;for&#32;every&#32;elements&#32;in&#32;fMapN_0.&#32;Index&#32;m=0&#32;instead&#32;of&#32;a&#32;for&#32;loop&#32;with&#32;(int&#32;m=0;&#32;m&lt;=i;&#32;++m)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00699"/>00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_BranchingRatio_product&#32;=&#32;ln_branchingProduct(vectorElem,&#32;i,&#32;m);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00700"/>00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=m;&#32;j&lt;=i;&#32;++j)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00701"/>00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambda_j&#32;=&#32;vectorElem[j][1];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00702"/>00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sign&#32;=&#32;1;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00703"/>00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_d_ijm&#32;=&#32;ln_dijm_decay(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;t,&#32;sign);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00704"/>00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lambda_j&#32;&lt;=&#32;2.e-38)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00705"/>00705 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(IZA_0&#32;==&#32;922380&#32;&amp;&amp;&#32;fMapNt[IZA_i]&#32;+&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;std::log(N0))&gt;1E20)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;&quot;Stable&#32;IZA_i&#32;&quot;&#32;&lt;&lt;&#32;IZA_i&#32;&lt;&lt;&#32;&quot;&#32;BR:&quot;&#32;&lt;&lt;&#32;std::exp(&#32;ln_BranchingRatio_product)&#32;&lt;&lt;&#32;&quot;&#32;N0&#32;&quot;&#32;&lt;&lt;&#32;N0&#32;&lt;&lt;&#32;&quot;&#32;result&#32;&quot;&#32;&lt;&lt;&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;std::log(N0))</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00706"/>00706 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;fMapNt[IZA_i]&#32;&quot;&#32;&lt;&lt;&#32;fMapNt[IZA_i]&#32;&lt;&lt;&#32;&quot;&#32;Sum&#32;&quot;&#32;&lt;&lt;&#32;fMapNt[IZA_i]&#32;+&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;std::log(N0))&#32;&lt;&lt;&#32;&quot;\n&quot;&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00707"/>00707 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(LogicVolumeName&#32;==&#32;&quot;lfuelmat23&quot;)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00708"/>00708 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;stable&#32;&quot;&lt;&lt;IZA_i&lt;&lt;&quot;&#32;&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00709"/>00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt[IZA_i]&#32;+=&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;std::log(N0))&#32;;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00710"/>00710 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(LogicVolumeName&#32;==&#32;&quot;lfuelmat23&quot;)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00711"/>00711 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;stable&#32;&quot;&lt;&lt;IZA_i&lt;&lt;&quot;&#32;&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00712"/>00712 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;lambda&#32;&lt;&#32;2e-38&#32;&quot;&lt;&lt;&#32;IZA_0&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;N0&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;IZA_i&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;lambda_j&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;if&#32;stable,&#32;Calculation&#32;N_i&#32;+=&#32;ln_BranchingRatio_product&#32;*&#32;dijm(=1)&#32;*&#32;N_0&#32;*&#32;exp(-&#32;0&#32;*&#32;t)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00714"/>00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00715"/>00715 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(IZA_0&#32;==&#32;922380&#32;&amp;&amp;&#32;fMapNt[IZA_i]&#32;+&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;t)&gt;1E20)&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00716"/>00716 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Decay&#32;IZA_i&#32;&quot;&#32;&lt;&lt;&#32;IZA_i&#32;&lt;&lt;&#32;&quot;&#32;BR:&quot;&#32;&lt;&lt;&#32;std::exp(&#32;ln_BranchingRatio_product)&#32;&lt;&lt;&#32;&quot;&#32;dijm&#32;&quot;&#32;&lt;&lt;&#32;sign*std::exp(ln_d_ijm)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00717"/>00717 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;N0&#32;&quot;&#32;&lt;&lt;&#32;N0&#32;&lt;&lt;&#32;&quot;&#32;exp&#32;&quot;&#32;&lt;&lt;&#32;std::exp(-&#32;lambda_j&#32;*&#32;t)&#32;&lt;&lt;&#32;&quot;&#32;result&#32;&quot;&#32;&lt;&lt;&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;t)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00718"/>00718 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;fMapNt[IZA_i]&#32;&quot;&#32;&lt;&lt;&#32;fMapNt[IZA_i]&#32;&lt;&lt;&#32;&quot;&#32;Sum&#32;&quot;&#32;&lt;&lt;&#32;fMapNt[IZA_i]&#32;+&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;t)&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00719"/>00719 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00720"/>00720 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(LogicVolumeName&#32;==&#32;&quot;lfuelmat23&quot;)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00721"/>00721 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;instable&#32;&quot;&lt;&lt;IZA_i&lt;&lt;&quot;&#32;&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00722"/>00722 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(ln_d_ijm==0&#32;&amp;&amp;&#32;IZA_0&#32;!=&#32;IZA_i)std::cout&lt;&lt;IZA_0&lt;&lt;&quot;&#32;&quot;&lt;&lt;IZA_i&lt;&lt;&quot;&#32;&quot;&lt;&lt;ln_d_ijm&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00723"/>00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt[IZA_i]&#32;+=&#32;sign&#32;*&#32;std::exp(&#32;ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;t);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00724"/>00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(std::exp(ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;t)&#32;==&#32;1&#32;&amp;&amp;&#32;ln_BranchingRatio_product&#32;+&#32;ln_d_ijm&#32;+&#32;std::log(N0)&#32;-&#32;lambda_j&#32;*&#32;t&#32;!=&#32;0)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00725"/>00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;WARNING,&#32;NOT&#32;ENOUGH&#32;PRECISION&#32;NUMBER&#32;FOR&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;IZA_i&lt;&lt;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00726"/>00726 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(LogicVolumeName&#32;==&#32;&quot;lfuelmat23&quot;)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00727"/>00727 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;instable&#32;&quot;&lt;&lt;IZA_i&lt;&lt;&quot;&#32;&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00728"/>00728 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;lambda&#32;&quot;&lt;&lt;&#32;IZA_0&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;N0&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;IZA_i&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;lambda_j&lt;&lt;&#32;&#32;&quot;&#32;&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00729"/>00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="comment">//&#32;Calculation&#32;N_i&#32;+=&#32;ln_BranchingRatio_product&#32;*&#32;dijm(=1)&#32;*&#32;N_0&#32;exp(-&#32;Lambda_j&#32;*&#32;t)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00730"/>00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00731"/>00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00732"/>00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00733"/>00733 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(LogicVolumeName&#32;==&#32;&quot;lfuelmat23&quot;)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00734"/>00734 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;Decay&#32;out&#32;&quot;&lt;&lt;IZA_0&lt;&lt;&quot;&#32;&quot;&lt;&lt;N0&lt;&lt;&quot;&#32;&quot;&lt;&lt;fMapNt[IZA_0]&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00735"/>00735 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00736"/>00736 <emphasis role="comment">/*&#32;&#32;&#32;&#32;std::cout&lt;&lt;LogicVolumeName&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00737"/>00737 <emphasis role="comment">&#32;&#32;&#32;&#32;std::unordered_map&lt;int,&#32;long&#32;double&#32;&gt;::iterator&#32;it;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00738"/>00738 <emphasis role="comment">&#32;&#32;&#32;&#32;for(it=fMapNt.begin();&#32;it!=fMapNt.end();it++)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00739"/>00739 <emphasis role="comment">&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00740"/>00740 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;it-&gt;first&lt;&lt;&quot;&#32;&quot;&lt;&lt;it-&gt;second&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00741"/>00741 <emphasis role="comment">&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00742"/>00742 <emphasis role="comment">*/</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00743"/>00743 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00744"/>00744 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00745"/>00745 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::CalculateSourceNtNoTransmutation(<emphasis role="keywordtype">double</emphasis>&#32;t)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00746"/>00746 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,&#32;long&#32;double&gt;::iterator&#32;it_isotope=fMapS_0.begin();&#32;it_isotope!=fMapS_0.end();&#32;++it_isotope)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00747"/>00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;IZA&#32;=&#32;it_isotope-&gt;first;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00748"/>00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;Nelem&#32;=&#32;it_isotope-&gt;second;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00749"/>00749 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00750"/>00750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CheckMotherIsConstant(IZA,&#32;Nelem);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00751"/>00751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Change&#32;the&#32;initial&#32;isotopic&#32;vector&#32;of&#32;the&#32;material&#32;with&#32;depletion&#32;of&#32;mother&#32;elements</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00752"/>00752 <emphasis role="comment">/*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(fMapN_0[IZA]&#32;!=&#32;0&#32;&amp;&amp;&#32;Nelem&#32;&lt;&#32;0)&#32;{&#32;//&#32;If&#32;the&#32;transmuted&#32;element&#32;(build&#32;up&#32;or&#32;depletion)&#32;exists&#32;in&#32;the&#32;isotopic&#32;vector&#32;of&#32;element&#32;in&#32;the&#32;material</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00753"/>00753 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(std::abs(Nelem&#32;/&#32;fMapN_0[IZA])&#32;&gt;&#32;0.01)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;&quot;!!!!&#32;WARNING&#32;!!!!&#32;The&#32;mother&#32;element&#32;&quot;&#32;&lt;&lt;&#32;IZA&#32;&lt;&lt;&#32;&quot;&#32;amount&#32;varies&#32;more&#32;than&#32;1%&#32;(&quot;&#32;&lt;&lt;&#32;Nelem&#32;/&#32;fMapN_0[IZA]&#32;*100.&#32;&lt;&lt;&#32;&quot;%).&quot;&#32;&lt;&lt;&#32;std::endl;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00754"/>00754 <emphasis role="comment"></emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00755"/>00755 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Depletion&#32;of&#32;mother&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00756"/>00756 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(fMapN_0[IZA]&#32;+&#32;Nelem&#32;&gt;&#32;0)&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00757"/>00757 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(IZA&#32;==&#32;922380)&#32;{std::cout&#32;&lt;&lt;&#32;&quot;fMapN_0[IZA]&#32;:&#32;&quot;&#32;&lt;&lt;&#32;fMapN_0[IZA]&#32;&lt;&lt;&#32;&quot;&#32;Nelem&#32;:&#32;&quot;&#32;&lt;&lt;&#32;Nelem&#32;&lt;&lt;&#32;&quot;&#32;result&#32;:&#32;&quot;&#32;&lt;&lt;&#32;fMapN_0[IZA]&#32;+&#32;Nelem&#32;&lt;&lt;&#32;std::endl;}&#32;&#32;&#32;//&#32;result&#32;=&#32;OK</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00758"/>00758 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapN_0[IZA]&#32;+=&#32;Nelem;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00759"/>00759 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if(fMapN_0[IZA]&#32;+&#32;Nelem&#32;&lt;=&#32;0)&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00760"/>00760 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapN_0.erase(IZA);</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00761"/>00761 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;\n!!!!&#32;WARNING&#32;!!!!&#32;Try&#32;to&#32;consume&#32;more&#32;quantity&#32;of&#32;element&#32;&quot;&#32;&lt;&lt;&#32;IZA&#32;&lt;&lt;&#32;&quot;&#32;than&#32;available.\n&quot;&#32;&lt;&lt;&#32;std::endl;&#32;//&#32;The&#32;link&#32;between&#32;daugther&#32;amd&#32;mother&#32;has&#32;been&#32;lost,&#32;nothing&#32;to&#32;do&#32;in&#32;this&#32;case</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00762"/>00762 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00763"/>00763 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00764"/>00764 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(Nelem&#32;&gt;&#32;0)&#32;{&#32;//&#32;If&#32;build&#32;up&#32;of&#32;a&#32;new&#32;element*/</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00765"/>00765 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(IZA&#32;==&#32;922380)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;&quot;N0&#32;92238&#32;&quot;&#32;&lt;&lt;&#32;Nelem&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00766"/>00766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConstructChainNoTransmutation(IZA);&#32;&#32;<emphasis role="comment">//&#32;Construct&#32;linear&#32;decay&#32;paths&#32;for&#32;every&#32;new&#32;isotopes&#32;in&#32;the&#32;volume</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00767"/>00767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&#32;vectorChains&#32;=&#32;fMapChains[IZA];&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;decay&#32;chain&#32;of&#32;this&#32;isotope</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00768"/>00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;vectorElem&#32;:&#32;vectorChains)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00769"/>00769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;(int)vectorElem.size();&#32;++i)&#32;{&#32;<emphasis role="comment">//&#32;i&#32;=&#32;the&#32;ith&#32;element&#32;in&#32;the&#32;decay&#32;chain</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00770"/>00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZA_i&#32;=&#32;(int)vectorElem[i][0];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00771"/>00771 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00772"/>00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m&#32;=&#32;contribution&#32;of&#32;m&#32;previous&#32;element&#32;in&#32;the&#32;chain&#32;to&#32;N_i</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00773"/>00773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m=0;&#32;<emphasis role="comment">//&#32;only&#32;S0&#32;=&#32;S[m=0]&#32;!=&#32;0&#32;because&#32;we&#32;do&#32;the&#32;Calculation&#32;for&#32;every&#32;elements&#32;in&#32;fMapS_0.&#32;Index&#32;m=0&#32;instead&#32;of&#32;a&#32;for&#32;loop&#32;with&#32;(int&#32;m=0;&#32;m&lt;=i;&#32;++m)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00774"/>00774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_BranchingRatio_product&#32;=&#32;ln_branchingProduct(vectorElem,&#32;i,&#32;m);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00775"/>00775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=m;&#32;j&lt;=i;&#32;++j)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00776"/>00776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sign&#32;=&#32;1;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00777"/>00777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_d_ijm&#32;=&#32;ln_dijm_source(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;t,&#32;sign);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00778"/>00778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;stable&#32;element&#32;in&#32;the&#32;chain&#32;or&#32;not</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00779"/>00779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vectorElem[j][1]&#32;&lt;=&#32;2.e-38)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00780"/>00780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt[IZA_i]&#32;+=&#32;std::exp(ln_BranchingRatio_product)&#32;*&#32;Nelem&#32;;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00781"/>00781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;if&#32;stable,&#32;Calculation&#32;N_i&#32;+=&#32;ln_BranchingRatio_product&#32;*&#32;dijm(=1)&#32;*&#32;ReactionRate*t</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00782"/>00782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00783"/>00783 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(IZA_i&#32;==&#32;922380)&#32;{&#32;std::cout&#32;&lt;&lt;&#32;&quot;Src&#32;BR:&quot;&#32;&lt;&lt;&#32;std::exp(&#32;ln_BranchingRatio_product)&#32;&lt;&lt;&#32;&quot;&#32;dijm&#32;&quot;&#32;&lt;&lt;&#32;std::exp(ln_dijm_source(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;t,&#32;sign))</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00784"/>00784 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;&#32;S0&#32;&quot;&#32;&lt;&lt;&#32;Nelem/t&#32;&lt;&lt;&#32;&quot;&#32;exp&#32;&quot;&#32;&lt;&lt;&#32;(1-std::exp(-vectorElem[j][1]&#32;*&#32;t))/vectorElem[j][1]&#32;&lt;&lt;&#32;&quot;&#32;total&#32;&quot;&#32;&lt;&lt;&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;ln_dijm_source(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;t,&#32;sign))&#32;*&#32;Nelem/t&#32;*&#32;(1-std::exp(-vectorElem[j][1]&#32;*&#32;t))/vectorElem[j][1]&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00785"/>00785 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;IZA_i&lt;&lt;&quot;&#32;&quot;&lt;&lt;IZA&lt;&lt;&quot;&#32;&quot;&lt;&lt;Nelem&lt;&lt;&quot;&#32;&quot;&lt;&lt;t&lt;&lt;&quot;&#32;&quot;&lt;&lt;vectorElem[j][1]&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00786"/>00786 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;IZA&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;IZA_i&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;vectorElem[i][1]&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;vectorElem[j][1]&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;std::exp(ln_BranchingRatio_product)&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;std::exp(ln_dijm_source(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;t,&#32;sign))&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00787"/>00787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt[IZA_i]&#32;+=&#32;sign&#32;*&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;ln_d_ijm)&#32;*&#32;Nelem/t&#32;*&#32;(-expm1(-vectorElem[j][1]&#32;*&#32;t))&#32;/&#32;vectorElem[j][1];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00788"/>00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(expm1(-vectorElem[j][1]&#32;*&#32;t)&#32;==&#32;0&#32;&amp;&amp;&#32;vectorElem[j][1]&#32;*&#32;t&#32;!=&#32;0)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00789"/>00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;WARNING,&#32;NOT&#32;ENOUGH&#32;PRECISION&#32;NUMBER&#32;FOR&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;IZA_i&lt;&lt;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00790"/>00790 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapNt[IZA_i]&#32;+=&#32;std::exp(ln_BranchingRatio_product&#32;+&#32;ln_dijm_source(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;t,&#32;sign))&#32;*&#32;Nelem;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00791"/>00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;Calculation&#32;N_i&#32;+=&#32;BranchingRatio_product&#32;*&#32;dijm&#32;*&#32;ReactionRate&#32;*&#32;(1&#32;-&#32;exp(-&#32;Lambda_j&#32;*&#32;t))/Lambda_j</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00792"/>00792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00793"/>00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00794"/>00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00795"/>00795 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00796"/>00796 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00797"/>00797 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00798"/>00798 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::CalculateSourceNt(<emphasis role="keywordtype">double</emphasis>&#32;t,&#32;std::string&#32;LogicVolumeName)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00799"/>00799 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;********&#32;Begin&#32;of&#32;CalculateSourceNt&#32;*************&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00800"/>00800 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;<emphasis role="keywordtype">int</emphasis>,&#32;std::unordered_map&lt;int,&#32;long&#32;double&gt;&gt;::iterator&#32;it1=fMapLVMotherDaughter_transm[1][LogicVolumeName].begin();&#32;it1!=fMapLVMotherDaughter_transm[1][LogicVolumeName].end();&#32;++it1)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00801"/>00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;IZA_mother&#32;=&#32;it1-&gt;first;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00802"/>00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;N0_mother&#32;=&#32;fMapN_0[IZA_mother];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00803"/>00803 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00804"/>00804 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;IZA_mother&#32;:&#32;&quot;&#32;&lt;&lt;&#32;IZA_mother&#32;&lt;&lt;&#32;&quot;\t&quot;&#32;&lt;&lt;&#32;N0_mother&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00805"/>00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,long&#32;double&gt;::iterator&#32;it2=fMapLVMotherDaughter_transm[1][LogicVolumeName][it1-&gt;first].begin();&#32;it2!=fMapLVMotherDaughter_transm[1][LogicVolumeName][it1-&gt;first].end();&#32;++it2)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00806"/>00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;IZA_daughter&#32;=&#32;it2-&gt;first;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00807"/>00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ReactionRate_perN0&#32;=&#32;it2-&gt;second;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00808"/>00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(it2-&gt;first/10000&#32;&gt;&#32;IZA_mother/10000&#32;-&#32;20)&#32;{&#32;ReactionRate_perN0&#32;=&#32;it2-&gt;second;&#32;}<emphasis role="comment">//&#32;it2-&gt;second&#32;=&#32;ReactionRate_perN0&#32;=&#32;gji&#32;*&#32;sigma_j&#32;*&#32;phi</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00809"/>00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;ReactionRate_perN0&#32;=&#32;it2-&gt;second/2.;&#32;}&#32;&#32;<emphasis role="comment">//&#32;In&#32;case&#32;of&#32;a&#32;fission&#32;//&#32;it2-&gt;second&#32;=&#32;2&#32;*&#32;ReactionRate_perN0&#32;=&#32;2&#32;*&#32;gji&#32;*&#32;sigma_j&#32;*&#32;phi&#32;because&#32;of&#32;2&#32;fission&#32;product</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00810"/>00810 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00811"/>00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConstructChain(IZA_daughter,&#32;LogicVolumeName);&#32;&#32;<emphasis role="comment">//&#32;Construct&#32;linear&#32;decay&#32;paths&#32;for&#32;every&#32;new&#32;isotopes&#32;in&#32;the&#32;volume</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00812"/>00812 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;IZA_daughter&#32;:&#32;&quot;&#32;&lt;&lt;&#32;IZA_daughter&#32;&lt;&lt;&#32;&quot;\t&quot;&#32;&lt;&lt;&#32;ReactionRate_perN0&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00813"/>00813 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00814"/>00814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&#32;&gt;&#32;vectorChains&#32;=&#32;fMapChains[IZA_daughter];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00815"/>00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;vectorElem&#32;:&#32;vectorChains)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00816"/>00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;(int)vectorElem.size();&#32;++i)&#32;{&#32;<emphasis role="comment">//&#32;i&#32;=&#32;the&#32;ith&#32;element&#32;in&#32;the&#32;decay&#32;chain</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00817"/>00817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;IZA_i&#32;=&#32;(int)vectorElem[i][0];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00818"/>00818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m&#32;=&#32;contribution&#32;of&#32;m&#32;previous&#32;element&#32;in&#32;the&#32;chain&#32;to&#32;N_i</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00819"/>00819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m=0;&#32;<emphasis role="comment">//&#32;only&#32;S0&#32;=&#32;S[m=0]&#32;!=&#32;0&#32;because&#32;we&#32;do&#32;the&#32;Calculation&#32;for&#32;every&#32;elements&#32;in&#32;fMapLVMotherDaughter_transm.&#32;Index&#32;m=0&#32;instead&#32;of&#32;a&#32;for&#32;loop&#32;with&#32;(int&#32;m=0;&#32;m&lt;=i;&#32;++m)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00820"/>00820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_BranchingRatioStar_product&#32;=&#32;ln_branchingProduct(vectorElem,&#32;i,&#32;m);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00821"/>00821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=m;&#32;j&lt;=i;&#32;++j)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00822"/>00822 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(IZA_i&#32;==&#32;922350)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;IZA_i&#32;:&#32;&quot;&#32;&lt;&lt;&#32;IZA_i&#32;&lt;&lt;&#32;&quot;;&#32;i&#32;:&#32;&quot;&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;&quot;;&#32;j&#32;:&#32;&quot;&#32;&lt;&lt;&#32;j&#32;&lt;&lt;&#32;&quot;&#32;BR_product&#32;:&#32;&quot;&#32;&lt;&lt;&#32;ln_BranchingRatioStar_product&#32;&lt;&lt;&#32;&quot;&#32;vectorElem.size()&#32;:&#32;&quot;&#32;&lt;&lt;&#32;vectorElem.size()&#32;&lt;&lt;&#32;&quot;&#32;d_ijm&#32;:&#32;&quot;&#32;&lt;&lt;&#32;dijm_source(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;t)&#32;&lt;&lt;&#32;&quot;&#32;N0_mother&#32;:&#32;&quot;&#32;&lt;&lt;&#32;N0_mother&#32;&lt;&lt;&#32;&quot;&#32;T1/2&#32;:&#32;&quot;&#32;&lt;&lt;&#32;vectorElem[j][1]&#32;&lt;&lt;&#32;&quot;&#32;lambda&#32;:&#32;&quot;&#32;&lt;&lt;&#32;vectorElem[j][1]&#32;&lt;&lt;&#32;&quot;&#32;exp&#32;:&#32;&quot;&#32;&lt;&lt;&#32;(1-std::exp(-vectorElem[j][1]&#32;*&#32;t))&#32;&#32;&lt;&lt;&#32;&quot;&#32;Add&#32;amount&#32;:&#32;&quot;&#32;&lt;&lt;&#32;ln_BranchingRatioStar_product&#32;*&#32;dijm_source(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;t)&#32;*&#32;ReactionRate_perN0&#32;*&#32;N0_mother&#32;*&#32;(1-std::exp(-vectorElem[j][1]&#32;*&#32;t))/vectorElem[j][1]&#32;&lt;&lt;&#32;&quot;&#32;fMapNt[IZA_i]&#32;:&#32;&quot;&#32;&lt;&lt;&#32;fMapNt[IZA_i]&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00823"/>00823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vectorElem[j][1]&#32;&lt;=&#32;2.e-38)&#32;{fMapNt[IZA_i]&#32;+=&#32;ln_BranchingRatioStar_product&#32;*&#32;ReactionRate_perN0&#32;*&#32;N0_mother&#32;;&#32;}&#32;<emphasis role="comment">//&#32;if&#32;stable,&#32;Calculation&#32;N_i&#32;+=&#32;ln_BranchingRatioStar_product&#32;*&#32;dijm(=1)&#32;*&#32;ReactionRate_perN0&#32;*&#32;N0_mother</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00824"/>00824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{fMapNt[IZA_i]&#32;+=&#32;ln_BranchingRatioStar_product&#32;*&#32;dijm_source(vectorElem,&#32;i,&#32;j&#32;,&#32;m,&#32;t)&#32;*&#32;ReactionRate_perN0&#32;*&#32;N0_mother&#32;*&#32;(1-std::exp(-vectorElem[j][1]&#32;*&#32;t))/vectorElem[j][1];&#32;}&#32;<emphasis role="comment">//&#32;Calculation&#32;N_i&#32;+=&#32;ln_BranchingRatioStar_product&#32;*&#32;dijm&#32;*&#32;N_0&#32;(1&#32;-&#32;exp(-&#32;Lambda_j&#32;*&#32;t))/Lambda_j</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00825"/>00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00826"/>00826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00827"/>00827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00828"/>00828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00829"/>00829 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00830"/>00830 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;********&#32;End&#32;of&#32;CalculateSourceNt&#32;*************&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00831"/>00831 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00832"/>00832 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00833"/>00833 <emphasis role="comment">//&#32;Multiply&#32;every&#32;transmuted&#32;elements&#32;amounts&#32;in&#32;fMapLVMotherDaughter_transm&#32;and&#32;fMapLVElem_transm&#32;by&#32;factor</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00834"/>00834 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::MultiplyTransmutedElem(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;factor)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00835"/>00835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;index=0;&#32;index&lt;2;&#32;++index){
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00836"/>00836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;std::string,&#32;std::unordered_map&lt;<emphasis role="keywordtype">int</emphasis>,&#32;std::unordered_map&lt;int,&#32;long&#32;double&gt;&gt;&gt;::iterator&#32;it=fMapLVMotherDaughter_transm[index].begin();&#32;it!=fMapLVMotherDaughter_transm[index].end();&#32;++it)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00837"/>00837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;<emphasis role="keywordtype">int</emphasis>,&#32;std::unordered_map&lt;int,long&#32;double&gt;&gt;::iterator&#32;it1=fMapLVMotherDaughter_transm[index][it-&gt;first].begin();&#32;it1!=fMapLVMotherDaughter_transm[index][it-&gt;first].end();&#32;++it1)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00838"/>00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,long&#32;double&gt;::iterator&#32;it2=fMapLVMotherDaughter_transm[index][it-&gt;first][it1-&gt;first].begin();&#32;it2!=fMapLVMotherDaughter_transm[index][it-&gt;first][it1-&gt;first].end();&#32;++it2)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00839"/>00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it2-&gt;second&#32;=&#32;it2-&gt;second&#32;*&#32;factor;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00840"/>00840 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;FIRST&#32;&quot;&lt;&lt;it-&gt;first&lt;&lt;&quot;&#32;&quot;&lt;&lt;it1-&gt;first&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;it2-&gt;first&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;it2-&gt;second&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00841"/>00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00842"/>00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00843"/>00843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00844"/>00844 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00845"/>00845 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00846"/>00846 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;std::string,&#32;std::unordered_map&lt;int,&#32;long&#32;double&gt;&gt;::iterator&#32;it=fMapLVElem_transm.begin();&#32;it!=fMapLVElem_transm.end();&#32;++it)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00847"/>00847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,long&#32;double&gt;::iterator&#32;it1=fMapLVElem_transm[it-&gt;first].begin();&#32;it1!=fMapLVElem_transm[it-&gt;first].end();&#32;++it1)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00848"/>00848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it1-&gt;second&#32;=&#32;it1-&gt;second&#32;*&#32;factor;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00849"/>00849 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&#32;&quot;SECOND&#32;&quot;&lt;&lt;it-&gt;first&lt;&lt;&quot;&#32;&quot;&lt;&lt;it1-&gt;first&lt;&lt;&quot;&#32;&quot;&lt;&lt;it1-&gt;second&lt;&lt;&quot;&#32;&quot;&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00850"/>00850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00851"/>00851 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00852"/>00852 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00853"/>00853 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00854"/>00854 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::MultiplyTransmutedElem(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;factor,&#32;std::string&#32;LVName)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00855"/>00855 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;index=0;&#32;index&lt;2;&#32;++index){
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00856"/>00856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;<emphasis role="keywordtype">int</emphasis>,&#32;std::unordered_map&lt;int,long&#32;double&gt;&gt;::iterator&#32;it1=fMapLVMotherDaughter_transm[index][LVName].begin();&#32;it1!=fMapLVMotherDaughter_transm[index][LVName].end();&#32;++it1)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00857"/>00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,long&#32;double&gt;::iterator&#32;it2=fMapLVMotherDaughter_transm[index][LVName][it1-&gt;first].begin();&#32;it2!=fMapLVMotherDaughter_transm[index][LVName][it1-&gt;first].end();&#32;++it2)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00858"/>00858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it2-&gt;second&#32;=&#32;it2-&gt;second&#32;*&#32;factor;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00859"/>00859 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;LVName&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;it2-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;&#32;factor&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00860"/>00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00861"/>00861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00862"/>00862 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00863"/>00863 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00864"/>00864 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,long&#32;double&gt;::iterator&#32;it1=fMapLVElem_transm[LVName].begin();&#32;it1!=fMapLVElem_transm[LVName].end();&#32;++it1)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00865"/>00865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it1-&gt;second&#32;=&#32;it1-&gt;second&#32;*&#32;factor;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00866"/>00866 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00867"/>00867 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00868"/>00868 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00869"/>00869 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00870"/>00870 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::CheckMotherIsConstant(<emphasis role="keywordtype">int</emphasis>&#32;IZA_mother,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;N_TransmutedElem)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00871"/>00871 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fMapN_0[IZA_mother]&#32;&gt;&#32;0)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00872"/>00872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(std::abs(N_TransmutedElem/fMapN_0[IZA_mother])&#32;&gt;&#32;0.01)
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00873"/>00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Mother&#32;element&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;IZA_mother&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;amount&#32;is&#32;changed&#32;by&#32;more&#32;than&#32;1%&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;N_TransmutedElem/fMapN_0[IZA_mother]*100.&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;%)&#32;in&#32;this&#32;run.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00874"/>00874 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00875"/>00875 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00876"/>00876 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00877"/>00877 <emphasis role="comment">//&#32;Calculation&#32;of&#32;d_ijm&#32;factor&#32;for&#32;decay&#32;and&#32;transmutation&#32;term</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00878"/>00878 <emphasis role="comment">//&#32;In&#32;case&#32;Lambda*_j&#32;=&#32;Lambda*_k,&#32;we&#32;use&#32;l&apos;hopital&apos;s&#32;theorem&#32;to&#32;calculate&#32;the&#32;limit</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00879"/>00879 <emphasis role="comment">//&#32;The&#32;limit&#32;depends&#32;on&#32;whether&#32;it&#32;is&#32;the&#32;source&#32;term&#32;or&#32;the&#32;decay&#32;term</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00880"/>00880 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXBatemanDecay::ln_dijm_decay(std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&amp;&#32;vectorElem,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;<emphasis role="keywordtype">int</emphasis>&#32;j,&#32;<emphasis role="keywordtype">int</emphasis>&#32;m,&#32;<emphasis role="keywordtype">double</emphasis>&#32;t,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;sign)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00881"/>00881 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;Lambda_product&#32;=&#32;0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00882"/>00882 &#32;&#32;&#32;&#32;sign&#32;=&#32;1;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00883"/>00883 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=m;&#32;k&lt;=i-1;&#32;++k)&#32;{Lambda_product&#32;+=&#32;std::log(vectorElem[k][1]);}&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;the&#32;product&#32;of&#32;lambda*&#32;(numerator)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00884"/>00884 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;DeltaLambda_product&#32;=&#32;0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00885"/>00885 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=m;&#32;k&lt;=i;&#32;++k)&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;the&#32;product&#32;of&#32;Delta&#32;lambda*&#32;(denominator)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00886"/>00886 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(vectorElem[k][1]&#32;-&#32;vectorElem[j][1]&#32;&gt;=&#32;1E-15)&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00887"/>00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vectorElem[k][1]!=vectorElem[j][1]){
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00888"/>00888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeltaLambda_product&#32;+=&#32;std::log(std::abs(vectorElem[k][1]&#32;-&#32;vectorElem[j][1]));
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00889"/>00889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sign&#32;*=&#32;std::abs(vectorElem[k][1]&#32;-&#32;vectorElem[j][1])&#32;/&#32;(vectorElem[k][1]&#32;-&#32;vectorElem[j][1]);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00890"/>00890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00891"/>00891 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if(vectorElem[k][1]==vectorElem[j][1]&#32;&amp;&amp;&#32;k!=j)&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00892"/>00892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(std::abs(vectorElem[k][1]-vectorElem[j][1])&#32;&lt;&#32;1E-15&#32;&amp;&amp;&#32;k!=j)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00893"/>00893 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;\n\n\n&#32;L&apos;Hopital&apos;s&#32;rule&#32;!&#32;\n\n\n&quot;&#32;&lt;&lt;&#32;vectorElem[j][0]&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;vectorElem[k][0]&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00894"/>00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeltaLambda_product&#32;+=&#32;std::log(2./t);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00895"/>00895 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;HOPITAL&quot;&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00896"/>00896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">//&#32;To&#32;do&#32;the&#32;Calculation&#32;with&#32;l&apos;hopital&#32;theorem&#32;and&#32;Lambda_k&#32;=&#32;Lambda_j&#32;+&#32;x&#32;with&#32;x-&gt;0</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00897"/>00897 &#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00898"/>00898 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00899"/>00899 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;if(vectorElem[j][0]&#32;==&#32;902340&#32;&amp;&amp;&#32;vectorElem[i][0]&#32;==&#32;822060)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00900"/>00900 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;\n&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00901"/>00901 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;if(vectorElem[j][0]&#32;==&#32;000000&#32;&amp;&amp;&#32;m!=i)&#32;//&#32;In&#32;the&#32;case&#32;of&#32;ad&#32;hoc&#32;element,&#32;only&#32;the&#32;sign&#32;matters&#32;because&#32;it&#32;determines&#32;if&#32;it&#32;is&#32;a&#32;production&#32;or&#32;a&#32;decay.</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00902"/>00902 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sign&#32;=&#32;std::pow(-1,&#32;i-m-1);</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00903"/>00903 <emphasis role="comment">//&#32;&#32;&#32;&#32;std::cout&lt;&lt;DeltaLambda_product&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00904"/>00904 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Lambda_product-DeltaLambda_product);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00905"/>00905 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00906"/>00906 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00907"/>00907 <emphasis role="comment">//&#32;Calculation&#32;of&#32;d_ijm&#32;factor&#32;for&#32;source&#32;term</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00908"/>00908 <emphasis role="comment">//&#32;In&#32;case&#32;Lambda_j&#32;=&#32;Lambda_k,&#32;we&#32;use&#32;l&apos;hopital&apos;s&#32;theorem&#32;to&#32;calculate&#32;the&#32;limit</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00909"/>00909 <emphasis role="comment">//&#32;The&#32;limit&#32;depends&#32;on&#32;whether&#32;it&#32;is&#32;the&#32;source&#32;term&#32;or&#32;the&#32;decay&#32;term</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00910"/>00910 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXBatemanDecay::ln_dijm_source(std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&amp;&#32;vectorElem,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;<emphasis role="keywordtype">int</emphasis>&#32;j,&#32;<emphasis role="keywordtype">int</emphasis>&#32;m,&#32;<emphasis role="keywordtype">double</emphasis>&#32;t,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;sign)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00911"/>00911 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;Lambda_product&#32;=&#32;0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00912"/>00912 &#32;&#32;&#32;&#32;sign&#32;=&#32;1;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00913"/>00913 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=m;&#32;k&lt;=i-1;&#32;++k)&#32;{Lambda_product&#32;+=&#32;std::log(vectorElem[k][1]);}&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;the&#32;product&#32;of&#32;lambda*&#32;(numerator)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00914"/>00914 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;DeltaLambda_product&#32;=&#32;0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00915"/>00915 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=m;&#32;k&lt;=i;&#32;++k)&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;the&#32;product&#32;of&#32;Delta&#32;lambda*&#32;(denominator)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00916"/>00916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vectorElem[k][1]!=vectorElem[j][1])&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00917"/>00917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeltaLambda_product&#32;+=&#32;std::log(std::abs(vectorElem[k][1]&#32;-&#32;vectorElem[j][1]));
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00918"/>00918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sign&#32;*=&#32;std::abs(vectorElem[k][1]&#32;-&#32;vectorElem[j][1])&#32;/&#32;(vectorElem[k][1]&#32;-&#32;vectorElem[j][1]);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00919"/>00919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00920"/>00920 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if(vectorElem[k][1]==vectorElem[j][1]&#32;&amp;&amp;&#32;k!=j)&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00921"/>00921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(std::abs(vectorElem[k][1]-vectorElem[j][1])&#32;&lt;&#32;1E-15&#32;&amp;&amp;&#32;k!=j)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00922"/>00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeltaLambda_product&#32;+=&#32;std::log(std::abs(2./(1&#32;-&#32;t&#32;*&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t)&#32;/&#32;(1&#32;-&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t)))));
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00923"/>00923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sign&#32;*=&#32;std::abs(2./(1&#32;-&#32;t&#32;*&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t)&#32;/&#32;(1&#32;-&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t))))&#32;/&#32;(2./(1&#32;-&#32;t&#32;*&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t)&#32;/&#32;(1&#32;-&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t))));
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00924"/>00924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">//&#32;To&#32;do&#32;the&#32;Calculation&#32;with&#32;l&apos;hopital&#32;theorem&#32;and&#32;Lambda_k&#32;=&#32;Lambda_j&#32;+&#32;x&#32;with&#32;x-&gt;0</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00925"/>00925 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00926"/>00926 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00927"/>00927 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Lambda_product-DeltaLambda_product);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00928"/>00928 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00929"/>00929 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00930"/>00930 <emphasis role="comment">//&#32;Calculation&#32;of&#32;d_ijm&#32;factor&#32;for&#32;source&#32;term</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00931"/>00931 <emphasis role="comment">//&#32;In&#32;case&#32;Lambda_j&#32;=&#32;Lambda_k,&#32;we&#32;use&#32;l&apos;hopital&apos;s&#32;theorem&#32;to&#32;calculate&#32;the&#32;limit</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00932"/>00932 <emphasis role="comment">//&#32;The&#32;limit&#32;depends&#32;on&#32;whether&#32;it&#32;is&#32;the&#32;source&#32;term&#32;or&#32;the&#32;decay&#32;term</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00933"/>00933 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXBatemanDecay::dijm_source(std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&amp;&#32;vectorElem,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;<emphasis role="keywordtype">int</emphasis>&#32;j,&#32;<emphasis role="keywordtype">int</emphasis>&#32;m,&#32;<emphasis role="keywordtype">double</emphasis>&#32;t&#32;)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00934"/>00934 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;Lambda_product&#32;=&#32;0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00935"/>00935 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=m;&#32;k&lt;=i-1;&#32;++k)&#32;{Lambda_product&#32;+=&#32;std::log(vectorElem[k][1]);}&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;the&#32;product&#32;of&#32;lambda*&#32;(numerator)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00936"/>00936 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;DeltaLambda_product&#32;=&#32;0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00937"/>00937 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sign&#32;=&#32;1;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00938"/>00938 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=m;&#32;k&lt;=i;&#32;++k)&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;the&#32;product&#32;of&#32;Delta&#32;lambda*&#32;(denominator)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00939"/>00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(vectorElem[k][1]!=vectorElem[j][1])&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00940"/>00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeltaLambda_product&#32;+=&#32;std::log(std::abs(vectorElem[k][1]&#32;-&#32;vectorElem[j][1]));
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00941"/>00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sign&#32;*=&#32;std::abs(vectorElem[k][1]&#32;-&#32;vectorElem[j][1])&#32;/&#32;(vectorElem[k][1]&#32;-&#32;vectorElem[j][1]);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00942"/>00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00943"/>00943 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if(vectorElem[k][1]==vectorElem[j][1]&#32;&amp;&amp;&#32;k!=j)&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00944"/>00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(std::abs(vectorElem[k][1]-vectorElem[j][1])&#32;&lt;&#32;1E-15&#32;&amp;&amp;&#32;k!=j)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00945"/>00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeltaLambda_product&#32;+=&#32;std::log(std::abs(2./(1&#32;-&#32;t&#32;*&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t)&#32;/&#32;(1&#32;-&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t)))));
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00946"/>00946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sign&#32;*=&#32;std::abs(2./(1&#32;-&#32;t&#32;*&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t)&#32;/&#32;(1&#32;-&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t))))&#32;/&#32;(2./(1&#32;-&#32;t&#32;*&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t)&#32;/&#32;(1&#32;-&#32;std::exp(-vectorElem[j][1]&#32;*&#32;t))));
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00947"/>00947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">//&#32;To&#32;do&#32;the&#32;Calculation&#32;with&#32;l&apos;hopital&#32;theorem&#32;and&#32;Lambda_k&#32;=&#32;Lambda_j&#32;+&#32;x&#32;with&#32;x-&gt;0</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00948"/>00948 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00949"/>00949 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00950"/>00950 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sign*std::exp(Lambda_product-DeltaLambda_product);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00951"/>00951 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00952"/>00952 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00953"/>00953 <emphasis role="comment">//&#32;Normalization&#32;of&#32;the&#32;transmuted&#32;elements&#32;amount&#32;(in&#32;fMapLVMotherDaughter_transm)&#32;by&#32;the&#32;initial&#32;amount&#32;N0&#32;of&#32;the&#32;father&#32;elements&#32;in&#32;the&#32;material</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00954"/>00954 <emphasis role="comment">//&#32;Necessary&#32;to&#32;get&#32;sigma*phi&#32;instead&#32;of&#32;sigma*phi*N_i</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00955"/>00955 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::NormalizeTransmutedElem(<emphasis role="keywordtype">int</emphasis>&#32;IZA,&#32;std::string&#32;LogicVolumeName)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00956"/>00956 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;N0&#32;=&#32;fMapN_0[IZA];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00957"/>00957 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(N0&#32;!=&#32;0)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00958"/>00958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;index=0;&#32;index&lt;2;&#32;++index){
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00959"/>00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,long&#32;double&gt;::iterator&#32;it1=fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA].begin();&#32;it1!=fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA].end();&#32;++it1)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00960"/>00960 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Norm&#32;it1-&gt;second&#32;&quot;&#32;&lt;&lt;&#32;it1-&gt;second&#32;&lt;&lt;&#32;&quot;&#32;it1-&gt;first&#32;:&#32;&quot;&#32;&lt;&lt;&#32;it1-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;IZA&#32;:&#32;&quot;&#32;&lt;&lt;&#32;IZA&#32;&lt;&lt;&#32;&quot;&#32;it-&gt;second&#32;:&#32;&quot;&#32;&lt;&lt;&#32;it-&gt;second&#32;&lt;&lt;&#32;&quot;&#32;it1-&gt;second&#32;/&#32;it-&gt;second&#32;:&#32;&quot;&#32;&lt;&lt;&#32;it1-&gt;second&#32;/&#32;it-&gt;second&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00961"/>00961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it1-&gt;second&#32;=&#32;it1-&gt;second&#32;/&#32;N0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00962"/>00962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00963"/>00963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00964"/>00964 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00965"/>00965 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00966"/>00966 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00967"/>00967 <emphasis role="comment">//&#32;Calculation&#32;of&#32;the&#32;decay&#32;constant&#32;for&#32;TMXelement</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00968"/>00968 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXBatemanDecay::lambda(<link linkend="_class_t_m_x_element">TMXElement</link>*&#32;elem)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00969"/>00969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(elem-&gt;Tave()&#32;&lt;&#32;5.e37)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;1.&#32;/&#32;elem-&gt;Tave();}&#32;<emphasis role="comment">//&#32;If&#32;radioactive&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00970"/>00970 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;<emphasis role="comment">//&#32;If&#32;stable&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00971"/>00971 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00972"/>00972 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00973"/>00973 <emphasis role="comment">//&#32;Calculation&#32;of&#32;the&#32;decay&#32;constant&#32;with&#32;transmutation&#32;rate&#32;for&#32;TMXelement</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00974"/>00974 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXBatemanDecay::lambdaStar(<link linkend="_class_t_m_x_element">TMXElement</link>*&#32;elem,&#32;std::string&#32;LogicVolumeName)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00975"/>00975 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;lambdaStar_i&#32;=&#32;0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00976"/>00976 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;IZA_elem&#32;=&#32;elem-&gt;IZA();
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00977"/>00977 &#32;&#32;&#32;&#32;std::unordered_map&lt;std::string,&#32;std::unordered_map&lt;int,&#32;std::unordered_map&lt;int,long&#32;double&gt;&gt;&gt;&#32;MapLVMotherDaughter_transm[2]&#32;=&#32;{fMapLVMotherDaughter_transm[0],&#32;fMapLVMotherDaughter_transm[1]};
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00978"/>00978 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;index=0;&#32;index&lt;2;&#32;++index){
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00979"/>00979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,long&#32;double&gt;::iterator&#32;it3=MapLVMotherDaughter_transm[index][LogicVolumeName][IZA_elem].begin();&#32;it3!=MapLVMotherDaughter_transm[index][LogicVolumeName][IZA_elem].end();&#32;++it3)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00980"/>00980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lambdaStar_i&#32;+=&#32;(<emphasis role="keywordtype">long</emphasis>&#32;double)it3-&gt;second;&#32;<emphasis role="comment">//&#32;it3-&gt;second&#32;=&#32;ReactionRate_perN0&#32;=&#32;gji&#32;*&#32;sigma_j&#32;*&#32;phi</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00981"/>00981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00982"/>00982 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00983"/>00983 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00984"/>00984 &#32;&#32;&#32;&#32;lambdaStar_i&#32;+=&#32;lambda(elem);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00985"/>00985 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(lambdaStar_i&#32;&gt;&#32;2.e-38)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lambdaStar_i;}&#32;<emphasis role="comment">//&#32;If&#32;decay&#32;constant&#32;+&#32;transmutation&#32;rate&#32;is&#32;significant</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00986"/>00986 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;<emphasis role="comment">//&#32;If&#32;stable&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00987"/>00987 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00988"/>00988 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00989"/>00989 <emphasis role="comment">//&#32;Calculation&#32;of&#32;the&#32;product&#32;of&#32;branching&#32;ratios&#32;for&#32;element&#32;i&#32;from&#32;vectorElem</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00990"/>00990 <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;TMXBatemanDecay::ln_branchingProduct(std::vector&#32;&lt;&#32;std::vector&#32;&lt;long&#32;double&gt;&#32;&gt;&amp;&#32;vectorElem,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;<emphasis role="keywordtype">int</emphasis>&#32;m)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00991"/>00991 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;ln_BranchingRatioStar_product&#32;=&#32;0;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00992"/>00992 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00993"/>00993 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;l=m;&#32;l&lt;=i;&#32;++l)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00994"/>00994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ln_BranchingRatioStar_product&#32;+=&#32;vectorElem[l][2];&#32;&#32;<emphasis role="comment">//&#32;Product&#32;of&#32;branching&#32;ratios&#32;from&#32;0&#32;to&#32;i;&#32;Branh[j]&#32;gives&#32;the&#32;branching&#32;leading&#32;to&#32;the&#32;next&#32;element&#32;j+1.</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00995"/>00995 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;l&#32;&quot;&#32;&lt;&lt;&#32;l&#32;&lt;&lt;&#32;&quot;&#32;i&#32;&quot;&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;&quot;&#32;vectorElem[l][0]&#32;&quot;&#32;&lt;&lt;&#32;vectorElem[l][0]&#32;&lt;&lt;&#32;&quot;&#32;bji&#32;&quot;&#32;&lt;&lt;&#32;vectorElem[l][2]&#32;&lt;&lt;&#32;&quot;&#32;vectorElem[i][3]&#32;&quot;&#32;&lt;&lt;&#32;vectorElem[i][3]&#32;&lt;&lt;&#32;&quot;&#32;ln_BranchingRatioStar_product&#32;&quot;&#32;&lt;&lt;&#32;ln_BranchingRatioStar_product&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00996"/>00996 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00997"/>00997 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00998"/>00998 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;if(vectorElem[i][0]&#32;==&#32;922350)&#32;{std::cout&#32;&lt;&lt;&#32;&quot;i&#32;:&#32;&quot;&#32;&lt;&lt;&#32;i&#32;&lt;&lt;&#32;&quot;&#32;ln_BranchingRatioStar_product&#32;:&#32;&quot;&#32;&lt;&lt;&#32;ln_BranchingRatioStar_product&#32;&lt;&lt;&#32;&quot;&#32;vectorElem[i][3]&#32;:&#32;&quot;&#32;&lt;&lt;&#32;vectorElem[i][3]&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l00999"/>00999 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(ln_BranchingRatioStar_product&#32;-&#32;std::log(vectorElem[i][3]));&#32;&#32;<emphasis role="comment">//&#32;The&#32;branching&#32;product&#32;is&#32;divided&#32;by&#32;the&#32;number&#32;of&#32;occurence&#32;of&#32;this&#32;particular&#32;chain&#32;with&#32;element&#32;i&#32;in&#32;the&#32;list&#32;of&#32;all&#32;decay&#32;chains&#32;of&#32;element&#32;m&#32;(the&#32;calculation&#32;will&#32;be&#32;repeated&#32;N&#32;times)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01000"/>01000 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;return&#32;ln_BranchingRatioStar_product;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01001"/>01001 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01002"/>01002 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01003"/>01003 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01004"/>01004 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01005"/>01005 <emphasis role="comment">//&#32;Substract&#32;the&#32;transmuted&#32;elements&#32;to&#32;N0&#32;number&#32;of&#32;mother&#32;atoms&#32;and&#32;add&#32;the&#32;daugther&#32;to&#32;N0&#32;map&#32;of&#32;elements&#32;for&#32;decay</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01006"/>01006 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::SumTransmutedElements(std::string&#32;LogicVolumeName)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01007"/>01007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;index=0;&#32;index&lt;2;&#32;++index){
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01008"/>01008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;<emphasis role="keywordtype">int</emphasis>,&#32;std::unordered_map&lt;int,long&#32;double&gt;&gt;::iterator&#32;it_mother=fMapLVMotherDaughter_transm[index][LogicVolumeName].begin();&#32;it_mother!=fMapLVMotherDaughter_transm[index][LogicVolumeName].end();&#32;++it_mother)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01009"/>01009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,long&#32;double&gt;::iterator&#32;it_daughter=fMapLVMotherDaughter_transm[index][LogicVolumeName][it_mother-&gt;first].begin();&#32;it_daughter!=fMapLVMotherDaughter_transm[index][LogicVolumeName][it_mother-&gt;first].end();&#32;++it_daughter)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01010"/>01010 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(/*it_mother-&gt;first&#32;==&#32;922380&#32;&amp;&amp;*/&#32;LogicVolumeName&#32;==&#32;&quot;lFuel2&quot;&#32;&amp;&amp;&#32;it_daughter-&gt;second&gt;1E10)&#32;{std::cout&#32;&lt;&lt;&#32;&quot;Volume:&#32;&quot;&#32;&lt;&lt;&#32;LogicVolumeName&#32;&lt;&lt;&#32;&quot;&#32;mother:&#32;&quot;&#32;&lt;&lt;&#32;it_mother-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;daughter:&#32;&quot;&#32;&lt;&lt;&#32;it_daughter-&gt;first&#32;&lt;&lt;&#32;&quot;results:&#32;&quot;&#32;&lt;&lt;&#32;it_daughter-&gt;second/(index+1.)&#32;&lt;&lt;&#32;std::endl;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01011"/>01011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sum&#32;of&#32;element&#32;production&#32;(negative&#32;for&#32;mother&#32;and&#32;positive&#32;for&#32;daughter)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01012"/>01012 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;it_mother&#32;&#32;-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;fMapS_0[it_mother&#32;&#32;-&gt;first]&#32;&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01013"/>01013 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;it_daughter-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;fMapS_0[it_daughter-&gt;first]&#32;&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01014"/>01014 <emphasis role="comment">/*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(LogicVolumeName&#32;==&#32;&quot;lfuelmat23&quot;)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01015"/>01015 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01016"/>01016 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;Prod&#32;in&#32;&quot;&lt;&lt;it_mother&#32;&#32;-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;fMapS_0[it_mother&#32;&#32;-&gt;first]&#32;&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;it_daughter&#32;&#32;-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;fMapS_0[it_daughter&#32;&#32;-&gt;first]&#32;&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01017"/>01017 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01018"/>01018 <emphasis role="comment">*/</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapS_0[it_mother&#32;&#32;-&gt;first]&#32;-=&#32;it_daughter-&gt;second/(index+1.);<emphasis role="comment">//*100;&#32;//&#32;index&#32;=&#32;0&#32;-&gt;&#32;1&#32;reaction&#32;product&#32;|&#32;index&#32;=&#32;1&#32;-&gt;&#32;2&#32;reaction&#32;products</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01019"/>01019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapS_0[it_daughter-&gt;first]&#32;+=&#32;it_daughter-&gt;second;<emphasis role="comment">//*100;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01020"/>01020 <emphasis role="comment">/*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(LogicVolumeName&#32;==&#32;&quot;lfuelmat23&quot;)</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01021"/>01021 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01022"/>01022 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;Prod&#32;out&#32;&quot;&lt;&lt;it_mother&#32;&#32;-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&#32;&lt;&lt;&#32;fMapS_0[it_mother&#32;&#32;-&gt;first]&#32;&#32;&lt;&lt;&#32;&quot;&#32;-&gt;&#32;&quot;&#32;&lt;&lt;&#32;it_daughter&#32;&#32;-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;fMapS_0[it_daughter&#32;&#32;-&gt;first]&#32;&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01023"/>01023 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01024"/>01024 <emphasis role="comment">*/</emphasis><emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;it_mother&#32;&#32;-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;fMapS_0[it_mother&#32;&#32;-&gt;first]&#32;&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01025"/>01025 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;it_daughter-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;&quot;&lt;&lt;fMapS_0[it_daughter-&gt;first]&#32;&lt;&lt;std::endl&lt;&lt;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01026"/>01026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01027"/>01027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01028"/>01028 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01029"/>01029 }
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01030"/>01030 
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01031"/>01031 <emphasis role="keywordtype">void</emphasis>&#32;TMXBatemanDecay::ConsiderTransmutedElements(std::string&#32;LogicVolumeName)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01032"/>01032 &#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;index=0;&#32;index&lt;2;&#32;++index){
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01033"/>01033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;<emphasis role="keywordtype">int</emphasis>,&#32;std::unordered_map&lt;int,long&#32;double&gt;&gt;::iterator&#32;it_mother=fMapLVMotherDaughter_transm[index][LogicVolumeName].begin();&#32;it_mother!=fMapLVMotherDaughter_transm[index][LogicVolumeName].end();&#32;++it_mother)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01034"/>01034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::unordered_map&lt;int,long&#32;double&gt;::iterator&#32;it_daughter=fMapLVMotherDaughter_transm[index][LogicVolumeName][it_mother-&gt;first].begin();&#32;it_daughter!=fMapLVMotherDaughter_transm[index][LogicVolumeName][it_mother-&gt;first].end();&#32;++it_daughter)&#32;{
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01035"/>01035 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;ConsiderTransm&#32;it_mother-&gt;first&#32;:&#32;&quot;&#32;&lt;&lt;&#32;it_mother-&gt;first&#32;&lt;&lt;&#32;&quot;&#32;*&#32;it_daughter-&gt;second&#32;:&#32;&quot;&#32;&lt;&lt;&#32;it_daughter-&gt;second&#32;&lt;&lt;&#32;&quot;&#32;=&#32;results&#32;:&#32;&quot;&#32;&lt;&lt;&#32;it_daughter-&gt;second/(index+1.)&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01036"/>01036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fMapN_0[it_mother-&gt;first]&#32;-&#32;it_daughter-&gt;second/(index+1.)&#32;&gt;&#32;0)&#32;{&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;mother&#32;element&#32;is&#32;not&#32;entirely&#32;consumed</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01037"/>01037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapN_0[it_mother-&gt;first]&#32;-=&#32;it_daughter-&gt;second/(index+1.);&#32;<emphasis role="comment">//&#32;index&#32;=&#32;0&#32;-&gt;&#32;1&#32;reaction&#32;product&#32;|&#32;index&#32;=&#32;1&#32;-&gt;&#32;2&#32;reaction&#32;products</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01038"/>01038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapN_0[it_daughter-&gt;first]&#32;+=&#32;it_daughter-&gt;second;
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01039"/>01039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01040"/>01040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">//&#32;We&#32;cannot&#32;produce&#32;a&#32;number&#32;of&#32;daughter&#32;higher&#32;than&#32;the&#32;number&#32;of&#32;mother&#32;element</emphasis>
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01041"/>01041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapN_0[it_daughter-&gt;first]&#32;+=&#32;fMapN_0[it_mother-&gt;first];
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01042"/>01042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fMapN_0.erase(it_mother-&gt;first);
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01043"/>01043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01044"/>01044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01045"/>01045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01046"/>01046 &#32;&#32;&#32;&#32;}
<anchor xml:id="__t_m_x_bateman_decay_8cc_source_1l01047"/>01047 }
</programlisting></section>
