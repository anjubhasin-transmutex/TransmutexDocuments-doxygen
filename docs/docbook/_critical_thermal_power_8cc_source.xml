<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__critical_thermal_power_8cc_source" xml:lang="en-US">
<title>CriticalThermalPower.cc</title>
<indexterm><primary>/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/src/CriticalThermalPower.cc</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__critical_thermal_power_8cc_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;CriticalThermalPower.hh&quot;</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00002"/>00002 
<anchor xml:id="__critical_thermal_power_8cc_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;G4Neutron.hh&quot;</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00004"/>00004 
<anchor xml:id="__critical_thermal_power_8cc_source_1l00005"/>00005 CriticalThermalPower::CriticalThermalPower(<link linkend="_class_t_m_x_input_parameters">TMXInputParameters</link>*&#32;parameter,&#32;std::string&#32;name)&#32;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00006"/>00006 :&#32;&#32;&#32;<link linkend="_class_t_m_x_abstract_scoring_accumulable">TMXAbstractScoringAccumulable</link>(parameter,&#32;name)
<anchor xml:id="__critical_thermal_power_8cc_source_1l00007"/>00007 {
<anchor xml:id="__critical_thermal_power_8cc_source_1l00008"/>00008 &#32;&#32;&#32;&#32;Initialize();
<anchor xml:id="__critical_thermal_power_8cc_source_1l00009"/>00009 }
<anchor xml:id="__critical_thermal_power_8cc_source_1l00010"/>00010 
<anchor xml:id="__critical_thermal_power_8cc_source_1l00011"/>00011 CriticalThermalPower::~CriticalThermalPower()&#32;{
<anchor xml:id="__critical_thermal_power_8cc_source_1l00012"/>00012 }
<anchor xml:id="__critical_thermal_power_8cc_source_1l00013"/>00013 
<anchor xml:id="__critical_thermal_power_8cc_source_1l00014"/>00014 <emphasis role="keywordtype">void</emphasis>&#32;CriticalThermalPower::Initialize()&#32;{
<anchor xml:id="__critical_thermal_power_8cc_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generation&#32;of&#32;neutron</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00016"/>00016 &#32;&#32;&#32;&#32;m_CurrentNeutronGeneration&#32;=&#32;0;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00017"/>00017 &#32;&#32;&#32;&#32;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Start&#32;scoring&#32;energy&#32;deposit&#32;from&#32;generation&#32;NeutronGeneration_trigger</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00019"/>00019 &#32;&#32;&#32;&#32;m_NeutronGeneration_trigger&#32;=&#32;50;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00020"/>00020 &#32;&#32;&#32;&#32;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Global&#32;time&#32;when&#32;an&#32;event&#32;reaches&#32;NeutronGeneration_trigger</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00022"/>00022 &#32;&#32;&#32;&#32;m_t0&#32;=&#32;0;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00023"/>00023 &#32;&#32;&#32;&#32;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;window&#32;to&#32;score&#32;the&#32;energy&#32;deposit&#32;(between&#32;t0&#32;and&#32;t0&#32;+&#32;Deltat)</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00025"/>00025 &#32;&#32;&#32;&#32;m_Deltat&#32;=&#32;1E8;&#32;<emphasis role="comment">//&#32;in&#32;nanosecond</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00026"/>00026 }
<anchor xml:id="__critical_thermal_power_8cc_source_1l00027"/>00027 
<anchor xml:id="__critical_thermal_power_8cc_source_1l00028"/>00028 <emphasis role="keywordtype">void</emphasis>&#32;CriticalThermalPower::SetNeutronGeneration(<emphasis role="keywordtype">int</emphasis>&#32;NeutronGeneration)&#32;{
<anchor xml:id="__critical_thermal_power_8cc_source_1l00029"/>00029 &#32;&#32;&#32;&#32;m_CurrentNeutronGeneration&#32;=&#32;NeutronGeneration;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00030"/>00030 }
<anchor xml:id="__critical_thermal_power_8cc_source_1l00031"/>00031 
<anchor xml:id="__critical_thermal_power_8cc_source_1l00032"/>00032 <emphasis role="keywordtype">void</emphasis>&#32;CriticalThermalPower::Definet0(<emphasis role="keyword">const</emphasis>&#32;G4Step*&#32;theStep,&#32;<emphasis role="keywordtype">int</emphasis>&#32;NeutronGeneration)&#32;{
<anchor xml:id="__critical_thermal_power_8cc_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;neutron&#32;generation&#32;trigger&#32;is&#32;reach,&#32;we&#32;get&#32;the&#32;time&#32;m_t0&#32;in&#32;second&#32;</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(NeutronGeneration&#32;==&#32;m_NeutronGeneration_trigger&#32;)&#32;{&#32;m_t0&#32;=&#32;theStep-&gt;GetPreStepPoint()-&gt;GetGlobalTime();&#32;}
<anchor xml:id="__critical_thermal_power_8cc_source_1l00035"/>00035 &#32;&#32;&#32;&#32;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00036"/>00036 &#32;&#32;&#32;&#32;SetNeutronGeneration(NeutronGeneration);
<anchor xml:id="__critical_thermal_power_8cc_source_1l00037"/>00037 }
<anchor xml:id="__critical_thermal_power_8cc_source_1l00038"/>00038 
<anchor xml:id="__critical_thermal_power_8cc_source_1l00039"/>00039 <emphasis role="keywordtype">void</emphasis>&#32;CriticalThermalPower::score(<emphasis role="keyword">const</emphasis>&#32;G4Step*&#32;theStep)&#32;{
<anchor xml:id="__critical_thermal_power_8cc_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;neutron&#32;generation&#32;is&#32;higher&#32;than&#32;the&#32;trigger&#32;and&#32;the&#32;time&#32;is&#32;lower&#32;than&#32;m_t0+m_Deltat,&#32;we&#32;score&#32;the&#32;energy&#32;deposit&#32;</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_CurrentNeutronGeneration&#32;&gt;=&#32;m_NeutronGeneration_trigger&#32;&amp;&amp;&#32;theStep-&gt;GetPreStepPoint()-&gt;GetGlobalTime()&#32;&lt;=&#32;m_t0&#32;+&#32;m_Deltat&#32;)&#32;{
<anchor xml:id="__critical_thermal_power_8cc_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;primitiveScorer(theStep);
<anchor xml:id="__critical_thermal_power_8cc_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;G4cout&#32;&lt;&lt;&#32;theStep-&gt;GetPreStepPoint()-&gt;GetGlobalTime()*1E-9&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&quot;</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;m_t0*1E-9&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&quot;</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;(m_t0&#32;+&#32;m_Deltat)*1E-9&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&quot;</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;m_CurrentNeutronGeneration&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;&lt;&lt;&#32;G4endl;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00047"/>00047 &#32;&#32;&#32;&#32;}
<anchor xml:id="__critical_thermal_power_8cc_source_1l00048"/>00048 &#32;&#32;&#32;&#32;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;time&#32;has&#32;been&#32;exceeded,&#32;we&#32;kill&#32;the&#32;particles&#32;and&#32;secondaries</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_CurrentNeutronGeneration&#32;&gt;=&#32;m_NeutronGeneration_trigger&#32;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&amp;&amp;&#32;theStep-&gt;GetPreStepPoint()-&gt;GetGlobalTime()&#32;&gt;&#32;m_t0&#32;+&#32;m_Deltat
<anchor xml:id="__critical_thermal_power_8cc_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&amp;&amp;&#32;theStep-&gt;GetTrack()-&gt;GetParticleDefinition()&#32;==&#32;G4Neutron::NeutronDefinition()
<anchor xml:id="__critical_thermal_power_8cc_source_1l00053"/>00053 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;)&#32;{theStep-&gt;GetTrack()-&gt;SetTrackStatus(fKillTrackAndSecondaries);}</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00054"/>00054 &#32;&#32;&#32;&#32;)&#32;{theStep-&gt;GetTrack()-&gt;SetTrackStatus(fStopAndKill);}
<anchor xml:id="__critical_thermal_power_8cc_source_1l00055"/>00055 }
<anchor xml:id="__critical_thermal_power_8cc_source_1l00056"/>00056 
<anchor xml:id="__critical_thermal_power_8cc_source_1l00057"/>00057 <emphasis role="keywordtype">void</emphasis>&#32;CriticalThermalPower::primitiveScorer(<emphasis role="keyword">const</emphasis>&#32;G4Step*&#32;theStep)&#32;{
<anchor xml:id="__critical_thermal_power_8cc_source_1l00058"/>00058 &#32;&#32;&#32;&#32;G4double&#32;totalDepositedPower&#32;=&#32;theStep-&gt;GetTotalEnergyDeposit()/joule&#32;/&#32;(m_Deltat*1E-9);&#32;<emphasis role="comment">//&#32;in&#32;Watt</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(totalDepositedPower&#32;&gt;&#32;0.)&#32;{
<anchor xml:id="__critical_thermal_power_8cc_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_accCounter++;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_accValue&#32;&#32;+=&#32;totalDepositedPower;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_accValueSquared&#32;+=&#32;totalDepositedPower&#32;*&#32;totalDepositedPower;
<anchor xml:id="__critical_thermal_power_8cc_source_1l00063"/>00063 &#32;&#32;&#32;&#32;}
<anchor xml:id="__critical_thermal_power_8cc_source_1l00064"/>00064 }
<anchor xml:id="__critical_thermal_power_8cc_source_1l00065"/>00065 
<anchor xml:id="__critical_thermal_power_8cc_source_1l00066"/>00066 <emphasis role="comment">//------------------------------------------------------------------------------*</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00067"/>00067 <emphasis role="comment">//&#32;Printer</emphasis>
<anchor xml:id="__critical_thermal_power_8cc_source_1l00068"/>00068 
<anchor xml:id="__critical_thermal_power_8cc_source_1l00069"/>00069 <emphasis role="keywordtype">void</emphasis>&#32;CriticalThermalPower::printAverage()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="__critical_thermal_power_8cc_source_1l00070"/>00070 
<anchor xml:id="__critical_thermal_power_8cc_source_1l00071"/>00071 }
</programlisting></section>
