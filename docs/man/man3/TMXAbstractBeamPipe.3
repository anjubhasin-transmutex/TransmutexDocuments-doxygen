.TH "TMXAbstractBeamPipe" 3 "Fri Oct 15 2021" "Version Version 1.0" "Transmutex Documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TMXAbstractBeamPipe
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBTMXBeamPipeKIPT\fP, \fBTMXBeamPipeKIPT\fP, \fBTMXBeamPipeKIPT\fP, \fBTMXBeamPipeKIPT\fP, \fBTMXBeamPipeKIPT\fP, \fBTMXBeamPipeKIPT2\fP, \fBTMXBeamPipeKIPT2\fP, \fBTMXBeamPipeKIPT2\fP, \fBTMXBeamPipeKIPT2\fP, \fBTMXBeamPipeKIPT2\fP, \fBTMXBeamPipeRez2\fP, \fBTMXBeamPipeRez2\fP, \fBTMXBeamPipeRez2\fP, \fBTMXBeamPipeRez2\fP, \fBTMXBeamPipeRez2\fP, \fBTMXBeamPipeRez3\fP, \fBTMXBeamPipeRez3\fP, \fBTMXBeamPipeRez3\fP, \fBTMXBeamPipeRez3\fP, and \fBTMXBeamPipeRez3\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTMXAbstractBeamPipe\fP (\fBTMXInputParameters\fP *, const std::string &)"
.br
.ti -1c
.RI "const std::vector< G4VSolid * > * \fBgetSolids\fP ()"
.br
.ti -1c
.RI "const std::vector< G4ThreeVector * > * \fBgetTranslations\fP ()"
.br
.ti -1c
.RI "const std::vector< G4RotationMatrix * > * \fBgetRotations\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetVacuumLogicalVolumes\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetTubeLogicalVolumes\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetWindowLogicalVolumes\fP ()"
.br
.ti -1c
.RI "G4LogicalVolume * \fBgetMasterVolume\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetVacuumMaterial\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetTubeMaterial\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetWindowMaterial\fP ()"
.br
.ti -1c
.RI "std::string \fBgetAssemblyName\fP ()"
.br
.ti -1c
.RI "virtual void \fBcreateMaterial\fP (double Kelvin_temperature=273\&.15)"
.br
.ti -1c
.RI "virtual void \fBcreateGeometry\fP ()=0"
.br
.ti -1c
.RI "virtual G4Element * \fBElementExists\fP (int Z, double A)"
.br
.ti -1c
.RI "virtual G4Element * \fBElementExists\fP (std::string name)"
.br
.ti -1c
.RI "size_t \fBgetFirstOccurence\fP (std::vector< std::string > *nameVector)"
.br
.ti -1c
.RI "virtual void \fBplaceGeometry\fP (bool, G4ThreeVector *, G4ThreeVector *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceBeamPipe\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceVacuum\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceWindow\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "void \fBVisualisationConfig\fP ()"
.br
.ti -1c
.RI "\fBTMXAbstractBeamPipe\fP (\fBTMXInputParameters\fP *, const std::string &)"
.br
.ti -1c
.RI "const std::vector< G4VSolid * > * \fBgetSolids\fP ()"
.br
.ti -1c
.RI "const std::vector< G4ThreeVector * > * \fBgetTranslations\fP ()"
.br
.ti -1c
.RI "const std::vector< G4RotationMatrix * > * \fBgetRotations\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetVacuumLogicalVolumes\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetTubeLogicalVolumes\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetWindowLogicalVolumes\fP ()"
.br
.ti -1c
.RI "G4LogicalVolume * \fBgetMasterVolume\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetVacuumMaterial\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetTubeMaterial\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetWindowMaterial\fP ()"
.br
.ti -1c
.RI "std::string \fBgetAssemblyName\fP ()"
.br
.ti -1c
.RI "virtual void \fBcreateMaterial\fP (double Kelvin_temperature=273\&.15)"
.br
.ti -1c
.RI "virtual void \fBcreateGeometry\fP ()=0"
.br
.ti -1c
.RI "virtual G4Element * \fBElementExists\fP (int Z, double A)"
.br
.ti -1c
.RI "virtual G4Element * \fBElementExists\fP (std::string name)"
.br
.ti -1c
.RI "size_t \fBgetFirstOccurence\fP (std::vector< std::string > *nameVector)"
.br
.ti -1c
.RI "virtual void \fBplaceGeometry\fP (bool, G4ThreeVector *, G4ThreeVector *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceBeamPipe\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceVacuum\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceWindow\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "void \fBVisualisationConfig\fP ()"
.br
.ti -1c
.RI "\fBTMXAbstractBeamPipe\fP (\fBTMXInputParameters\fP *, const std::string &)"
.br
.ti -1c
.RI "const std::vector< G4VSolid * > * \fBgetSolids\fP ()"
.br
.ti -1c
.RI "const std::vector< G4ThreeVector * > * \fBgetTranslations\fP ()"
.br
.ti -1c
.RI "const std::vector< G4RotationMatrix * > * \fBgetRotations\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetVacuumLogicalVolumes\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetTubeLogicalVolumes\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetWindowLogicalVolumes\fP ()"
.br
.ti -1c
.RI "G4LogicalVolume * \fBgetMasterVolume\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetVacuumMaterial\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetTubeMaterial\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetWindowMaterial\fP ()"
.br
.ti -1c
.RI "std::string \fBgetAssemblyName\fP ()"
.br
.ti -1c
.RI "virtual void \fBcreateMaterial\fP (double Kelvin_temperature=273\&.15)"
.br
.ti -1c
.RI "virtual void \fBcreateGeometry\fP ()=0"
.br
.ti -1c
.RI "virtual G4Element * \fBElementExists\fP (int Z, double A)"
.br
.ti -1c
.RI "virtual G4Element * \fBElementExists\fP (std::string name)"
.br
.ti -1c
.RI "size_t \fBgetFirstOccurence\fP (std::vector< std::string > *nameVector)"
.br
.ti -1c
.RI "virtual void \fBplaceGeometry\fP (bool, G4ThreeVector *, G4ThreeVector *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceBeamPipe\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceVacuum\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceWindow\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "void \fBVisualisationConfig\fP ()"
.br
.ti -1c
.RI "\fBTMXAbstractBeamPipe\fP (\fBTMXInputParameters\fP *, const std::string &)"
.br
.ti -1c
.RI "const std::vector< G4VSolid * > * \fBgetSolids\fP ()"
.br
.ti -1c
.RI "const std::vector< G4ThreeVector * > * \fBgetTranslations\fP ()"
.br
.ti -1c
.RI "const std::vector< G4RotationMatrix * > * \fBgetRotations\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetVacuumLogicalVolumes\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetTubeLogicalVolumes\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetWindowLogicalVolumes\fP ()"
.br
.ti -1c
.RI "G4LogicalVolume * \fBgetMasterVolume\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetVacuumMaterial\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetTubeMaterial\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetWindowMaterial\fP ()"
.br
.ti -1c
.RI "std::string \fBgetAssemblyName\fP ()"
.br
.ti -1c
.RI "virtual void \fBcreateMaterial\fP (double Kelvin_temperature=273\&.15)"
.br
.ti -1c
.RI "virtual void \fBcreateGeometry\fP ()=0"
.br
.ti -1c
.RI "virtual G4Element * \fBElementExists\fP (int Z, double A)"
.br
.ti -1c
.RI "virtual G4Element * \fBElementExists\fP (std::string name)"
.br
.ti -1c
.RI "size_t \fBgetFirstOccurence\fP (std::vector< std::string > *nameVector)"
.br
.ti -1c
.RI "virtual void \fBplaceGeometry\fP (bool, G4ThreeVector *, G4ThreeVector *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceBeamPipe\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceVacuum\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceWindow\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "void \fBVisualisationConfig\fP ()"
.br
.ti -1c
.RI "\fBTMXAbstractBeamPipe\fP (\fBTMXInputParameters\fP *, const std::string &)"
.br
.ti -1c
.RI "const std::vector< G4VSolid * > * \fBgetSolids\fP ()"
.br
.ti -1c
.RI "const std::vector< G4ThreeVector * > * \fBgetTranslations\fP ()"
.br
.ti -1c
.RI "const std::vector< G4RotationMatrix * > * \fBgetRotations\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetVacuumLogicalVolumes\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetTubeLogicalVolumes\fP ()"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBgetWindowLogicalVolumes\fP ()"
.br
.ti -1c
.RI "G4LogicalVolume * \fBgetMasterVolume\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetVacuumMaterial\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetTubeMaterial\fP ()"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBgetWindowMaterial\fP ()"
.br
.ti -1c
.RI "std::string \fBgetAssemblyName\fP ()"
.br
.ti -1c
.RI "virtual void \fBcreateMaterial\fP (double Kelvin_temperature=273\&.15)"
.br
.ti -1c
.RI "virtual void \fBcreateGeometry\fP ()=0"
.br
.ti -1c
.RI "virtual G4Element * \fBElementExists\fP (int Z, double A)"
.br
.ti -1c
.RI "virtual G4Element * \fBElementExists\fP (std::string name)"
.br
.ti -1c
.RI "size_t \fBgetFirstOccurence\fP (std::vector< std::string > *nameVector)"
.br
.ti -1c
.RI "virtual void \fBplaceGeometry\fP (bool, G4ThreeVector *, G4ThreeVector *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceBeamPipe\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceVacuum\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "virtual void \fBplaceWindow\fP (bool, G4ThreeVector *, G4RotationMatrix *, G4LogicalVolume *)=0"
.br
.ti -1c
.RI "void \fBVisualisationConfig\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const std::vector< std::string > * \fBgetVacuumName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetTubeName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetWindowName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetVacuumName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetTubeName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetWindowName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetVacuumName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetTubeName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetWindowName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetVacuumName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetTubeName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetWindowName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetVacuumName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetTubeName\fP ()"
.br
.ti -1c
.RI "static const std::vector< std::string > * \fBgetWindowName\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "const std::string \fBm_assemblyName\fP"
.br
.ti -1c
.RI "\fBTMXInputParameters\fP * \fBm_p\fP"
.br
.ti -1c
.RI "int \fBm_copy_number\fP"
.br
.ti -1c
.RI "std::vector< G4VSolid * > \fBm_Solids\fP"
.br
.ti -1c
.RI "std::vector< G4ThreeVector * > \fBm_translation\fP"
.br
.ti -1c
.RI "std::vector< G4RotationMatrix * > \fBm_rotation\fP"
.br
.ti -1c
.RI "G4VSolid * \fBm_vacuumSolidVolume\fP"
.br
.ti -1c
.RI "G4VSolid * \fBm_tubeSolidVolume\fP"
.br
.ti -1c
.RI "G4VSolid * \fBm_windowSolidVolume\fP"
.br
.ti -1c
.RI "G4LogicalVolume * \fBm_masterVolume\fP"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBm_vacuumLogicalVolumes\fP"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBm_tubeLogicalVolumes\fP"
.br
.ti -1c
.RI "std::vector< G4LogicalVolume * > \fBm_windowLogicalVolumes\fP"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBm_vacuumMaterial\fP"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBm_tubeMaterial\fP"
.br
.ti -1c
.RI "\fBTMXMaterial\fP * \fBm_windowMaterial\fP"
.br
.ti -1c
.RI "G4double \fBm_beamPipeLength\fP"
.br
.ti -1c
.RI "G4double \fBm_WindowThickness\fP"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static std::vector< std::string > \fBm_vacuumName\fP"
.br
.ti -1c
.RI "static std::vector< std::string > \fBm_tubeName\fP"
.br
.ti -1c
.RI "static std::vector< std::string > \fBm_windowName\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB45\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "TMXAbstractBeamPipe::TMXAbstractBeamPipe (\fBTMXInputParameters\fP * parameters, const std::string & BeamPipeAssemblyName)"

.PP
Definition at line \fB47\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "TMXAbstractBeamPipe::~TMXAbstractBeamPipe ()\fC [virtual]\fP"

.PP
Definition at line \fB59\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void TMXAbstractBeamPipe::createMaterial (double Kelvin_temperature = \fC273\&.15\fP)\fC [virtual]\fP"

.PP
Definition at line \fB94\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "G4Element * TMXAbstractBeamPipe::ElementExists (int Z, double A)\fC [virtual]\fP"

.PP
Definition at line \fB129\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "G4Element * TMXAbstractBeamPipe::ElementExists (std::string name)\fC [virtual]\fP"

.PP
Definition at line \fB140\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "std::string TMXAbstractBeamPipe::getAssemblyName ()"

.PP
Definition at line \fB283\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "size_t TMXAbstractBeamPipe::getFirstOccurence (std::vector< std::string > * nameVector)"

.PP
Definition at line \fB151\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "G4LogicalVolume * TMXAbstractBeamPipe::getMasterVolume ()"

.PP
Definition at line \fB248\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "const std::vector< G4RotationMatrix * > * TMXAbstractBeamPipe::getRotations ()"

.PP
Definition at line \fB243\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "const std::vector< G4VSolid * > * TMXAbstractBeamPipe::getSolids ()"

.PP
Definition at line \fB233\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "const std::vector< G4ThreeVector * > * TMXAbstractBeamPipe::getTranslations ()"

.PP
Definition at line \fB238\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "std::vector< G4LogicalVolume * > TMXAbstractBeamPipe::getTubeLogicalVolumes ()"

.PP
Definition at line \fB223\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "\fBTMXMaterial\fP * TMXAbstractBeamPipe::getTubeMaterial ()"

.PP
Definition at line \fB273\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "const std::vector< std::string > * TMXAbstractBeamPipe::getTubeName ()\fC [static]\fP"

.PP
Definition at line \fB291\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "std::vector< G4LogicalVolume * > TMXAbstractBeamPipe::getVacuumLogicalVolumes ()"

.PP
Definition at line \fB218\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "\fBTMXMaterial\fP * TMXAbstractBeamPipe::getVacuumMaterial ()"

.PP
Definition at line \fB268\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "const std::vector< std::string > * TMXAbstractBeamPipe::getVacuumName ()\fC [static]\fP"

.PP
Definition at line \fB287\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "std::vector< G4LogicalVolume * > TMXAbstractBeamPipe::getWindowLogicalVolumes ()"

.PP
Definition at line \fB228\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "\fBTMXMaterial\fP * TMXAbstractBeamPipe::getWindowMaterial ()"

.PP
Definition at line \fB278\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "const std::vector< std::string > * TMXAbstractBeamPipe::getWindowName ()\fC [static]\fP"

.PP
Definition at line \fB295\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SS "void TMXAbstractBeamPipe::VisualisationConfig ()"

.PP
Definition at line \fB160\fP of file \fBTMXAbstractBeamPipe\&.cc\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "const std::string TMXAbstractBeamPipe::m_assemblyName\fC [protected]\fP"

.PP
Definition at line \fB100\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "G4double TMXAbstractBeamPipe::m_beamPipeLength\fC [protected]\fP"

.PP
Definition at line \fB137\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "int TMXAbstractBeamPipe::m_copy_number\fC [protected]\fP"

.PP
Definition at line \fB105\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "G4LogicalVolume * TMXAbstractBeamPipe::m_masterVolume\fC [protected]\fP"

.PP
Definition at line \fB117\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "\fBTMXInputParameters\fP * TMXAbstractBeamPipe::m_p\fC [protected]\fP"

.PP
Definition at line \fB104\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "std::vector< G4RotationMatrix * > TMXAbstractBeamPipe::m_rotation\fC [protected]\fP"

.PP
Definition at line \fB112\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "std::vector< G4VSolid * > TMXAbstractBeamPipe::m_Solids\fC [protected]\fP"

.PP
Definition at line \fB110\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "std::vector< G4ThreeVector * > TMXAbstractBeamPipe::m_translation\fC [protected]\fP"

.PP
Definition at line \fB111\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "std::vector< G4LogicalVolume * > TMXAbstractBeamPipe::m_tubeLogicalVolumes\fC [protected]\fP"

.PP
Definition at line \fB124\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "\fBTMXMaterial\fP * TMXAbstractBeamPipe::m_tubeMaterial\fC [protected]\fP"

.PP
Definition at line \fB134\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "std::vector< std::string > TMXAbstractBeamPipe::m_tubeName\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line \fB102\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "G4VSolid * TMXAbstractBeamPipe::m_tubeSolidVolume\fC [protected]\fP"

.PP
Definition at line \fB115\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "std::vector< G4LogicalVolume * > TMXAbstractBeamPipe::m_vacuumLogicalVolumes\fC [protected]\fP"

.PP
Definition at line \fB123\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "\fBTMXMaterial\fP * TMXAbstractBeamPipe::m_vacuumMaterial\fC [protected]\fP"

.PP
Definition at line \fB133\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "std::vector< std::string > TMXAbstractBeamPipe::m_vacuumName\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line \fB101\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "G4VSolid * TMXAbstractBeamPipe::m_vacuumSolidVolume\fC [protected]\fP"

.PP
Definition at line \fB114\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "std::vector< G4LogicalVolume * > TMXAbstractBeamPipe::m_windowLogicalVolumes\fC [protected]\fP"

.PP
Definition at line \fB125\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "\fBTMXMaterial\fP * TMXAbstractBeamPipe::m_windowMaterial\fC [protected]\fP"

.PP
Definition at line \fB135\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "std::vector< std::string > TMXAbstractBeamPipe::m_windowName\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line \fB103\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "G4VSolid * TMXAbstractBeamPipe::m_windowSolidVolume\fC [protected]\fP"

.PP
Definition at line \fB116\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.
.SS "G4double TMXAbstractBeamPipe::m_WindowThickness\fC [protected]\fP"

.PP
Definition at line \fB138\fP of file \fBTMXAbstractBeamPipe\&.hh\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Transmutex Documentation from the source code\&.
