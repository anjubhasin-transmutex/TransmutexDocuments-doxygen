<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_benchmark-3_2_hexagonal_edep_map_8_c" kind="file" language="C++">
    <compoundname>HexagonalEdepMap.C</compoundname>
    <includes local="no">TCanvas.h</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TH1F.h</includes>
    <includes local="no">TGraph.h</includes>
    <includes local="no">TTree.h</includes>
    <includes local="no">TLegend.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-3/HexagonalEdepMap.C</label>
        <link refid="_benchmark-3_2_hexagonal_edep_map_8_c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>TCanvas.h</label>
      </node>
      <node id="3">
        <label>TFile.h</label>
      </node>
      <node id="5">
        <label>TGraph.h</label>
      </node>
      <node id="4">
        <label>TH1F.h</label>
      </node>
      <node id="7">
        <label>TLegend.h</label>
      </node>
      <node id="6">
        <label>TTree.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_benchmark-3_2_hexagonal_edep_map_8_c_1ac26c50d0f84a32cd2acf3ac127b107e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void marginCanvas</definition>
        <argsstring>(TCanvas *canvas, double margin)</argsstring>
        <name>marginCanvas</name>
        <param>
          <type>TCanvas *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>double</type>
          <declname>margin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-3/HexagonalEdepMap.C" line="22" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-3/HexagonalEdepMap.C" bodystart="22" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="_benchmark-3_2_hexagonal_edep_map_8_c_1adee6d6147ff6aae0c089567aefa78867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double totalContent</definition>
        <argsstring>(TH2Poly *histo)</argsstring>
        <name>totalContent</name>
        <param>
          <type>TH2Poly *</type>
          <declname>histo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-3/HexagonalEdepMap.C" line="29" column="8" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-3/HexagonalEdepMap.C" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="_benchmark-3_2_hexagonal_edep_map_8_c_1a2eadb21722f19aa6fb66f8ad3c67bbb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int HexagonalEdepMap</definition>
        <argsstring>(std::string inputFile)</argsstring>
        <name>HexagonalEdepMap</name>
        <param>
          <type>std::string</type>
          <declname>inputFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-3/HexagonalEdepMap.C" line="37" column="5" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-3/HexagonalEdepMap.C" bodystart="37" bodyend="176"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\brief<sp/>Implementation<sp/>of<sp/>the<sp/>Hexagonal<sp/>Energy<sp/>Deposition<sp/>Graphs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HexagonalEdepMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Thomas<sp/>Guilbaud,<sp/>Transmutex,<sp/>05/06/2021</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight><highlight class="comment">//<sp/>2D<sp/>Graphs<sp/>of<sp/>the<sp/>energy<sp/>deposition<sp/>in<sp/>a<sp/>hexagonal<sp/>lattice</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TCanvas.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH1F.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TGraph.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TTree.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TLegend.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>marginCanvas(TCanvas*<sp/>canvas,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas-&gt;SetLeftMargin(margin);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas-&gt;SetRightMargin(margin);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas-&gt;SetBottomMargin(margin);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas-&gt;SetTopMargin(margin);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalContent(TH2Poly*<sp/>histo)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>histo-&gt;GetEntries();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>histo-&gt;GetBinContent(i);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(total);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HexagonalEdepMap(std::string<sp/>inputFile)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading<sp/>name<sp/>of<sp/>the<sp/>ROOT<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>last_slash<sp/>=<sp/>inputFile.rfind(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(last_slash<sp/>==<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_slash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>FileName<sp/>=<sp/>inputFile.substr(last_slash,<sp/>inputFile.rfind(</highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">)-last_slash);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>*f_ROOT<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TFile(<sp/>(inputFile).c_str()<sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------<sp/>Begin<sp/>User<sp/>Input<sp/>-------------------------------*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reactor<sp/>Parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pitch<sp/>=<sp/>225.45;<sp/></highlight><highlight class="comment">//<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>pitch<sp/>*<sp/>2./sqrt(3.);<sp/></highlight><highlight class="comment">//<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>900.;<sp/></highlight><highlight class="comment">//<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>volumeAssembly<sp/>=<sp/>3.*sqrt(3.)/8.<sp/>*<sp/>a*a<sp/>*<sp/>height<sp/>*<sp/>1e-3;<sp/></highlight><highlight class="comment">//<sp/>cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>volumeFuelAssembly<sp/>=<sp/>height<sp/>*<sp/>198.<sp/>*<sp/>3.14159265<sp/>*<sp/>(5.5*5.5-0.55*0.55)<sp/>*<sp/>1e-3;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>volume<sp/>=<sp/>volumeFuelAssembly;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density<sp/>=<sp/>10.407;<sp/></highlight><highlight class="comment">//<sp/>g/cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Physical<sp/>Scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>corePower<sp/>=<sp/>280.;<sp/></highlight><highlight class="comment">//<sp/>MW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nNeutrons<sp/>=<sp/>160000.;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nAssembly<sp/>=<sp/>61.;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binning<sp/>of<sp/>Hexagonal<sp/>Map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>xBin<sp/>=<sp/>11,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yBin<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMin<sp/>=<sp/>-(double)xBin/2.*pitch,<sp/>yMin<sp/>=<sp/>-(3.*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)yBin+1.)*a/8.;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMax<sp/>=<sp/>-xMin,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>-yMin;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Plot<sp/>Scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minPowerDeposition<sp/>=<sp/><sp/><sp/>2.70*0;<sp/></highlight><highlight class="comment">//<sp/>MW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minPowerDensity<sp/><sp/><sp/><sp/>=<sp/>160.50*0;<sp/></highlight><highlight class="comment">//<sp/>W/cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minSpecificPower<sp/><sp/><sp/>=<sp/><sp/>15.50*0;<sp/></highlight><highlight class="comment">//<sp/>W/g</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxPowerDeposition<sp/>=<sp/><sp/><sp/>6.88;<sp/></highlight><highlight class="comment">//<sp/>MW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxPowerDensity<sp/><sp/><sp/><sp/>=<sp/>410.37;<sp/></highlight><highlight class="comment">//<sp/>W/cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxSpecificPower<sp/><sp/><sp/>=<sp/><sp/>39.43;<sp/></highlight><highlight class="comment">//<sp/>W/g</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Canvas<sp/>Setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin<sp/>=<sp/>0.16;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>windowWidth<sp/>=<sp/>1000.;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSaveHasPNG<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------<sp/>End<sp/>User<sp/>Input<sp/>---------------------------------*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>TTree*<sp/>DepositedPower<sp/>=<sp/>(TTree*)f_ROOT-&gt;GetObjectChecked((</highlight><highlight class="stringliteral">&quot;DepositedPower&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;TTree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEntries<sp/>=<sp/>(int)DepositedPower-&gt;GetEntries();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2Poly<sp/>*hexEnergy<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH2Poly();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>hexEnergy-&gt;Honeycomb(xMin,<sp/>yMin,<sp/>a/2.,<sp/>xBin,<sp/>yBin);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>hexEnergy-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;X<sp/>(mm)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>hexEnergy-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Y<sp/>(mm)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>hexEnergy-&gt;GetZaxis()-&gt;SetTitleOffset(1.5);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetCanvasPreferGL(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPaintTextFormat(</highlight><highlight class="stringliteral">&quot;.2f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetOptStat(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TH2D*<sp/>MappingXY_Edep<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/>&quot;MappingXY_Edeposit_&quot;<sp/>+<sp/>FileName,<sp/>&quot;MappingXY_Edeposit&quot;,<sp/>&quot;X<sp/>[mm]&quot;,<sp/>&quot;Y<sp/>[mm]&quot;,<sp/>&quot;Power<sp/>density<sp/>[W<sp/>/<sp/>cm^{3}]<sp/>@<sp/>&quot;<sp/>+<sp/>str_beamPower,<sp/>rescaling_Data,<sp/>&quot;colz&quot;,<sp/>save_root,<sp/>save_png);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXY_Edep<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(</highlight><highlight class="stringliteral">&quot;MappingXY_Edeposit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>MappingXY_Edep-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>13;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>13;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>MappingXY_Edep-&gt;GetBinContent(x,<sp/>y)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexEnergy-&gt;Fill(x,<sp/>y,<sp/>MappingXY_Edep-&gt;GetBinContent(x,<sp/>y));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>hexEnergy-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*double<sp/>x,<sp/>y,<sp/>edep,<sp/>Etot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nEntries;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DepositedPower-&gt;GetEntry(i);</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(DepositedPower-&gt;GetLeaf(&quot;isInFuel&quot;)-&gt;GetValue(0)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>DepositedPower-&gt;GetLeaf(&quot;NPosX&quot;)-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>DepositedPower-&gt;GetLeaf(&quot;NPosY&quot;)-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//z<sp/>=<sp/>DepositedPower-&gt;GetLeaf(&quot;NPosZ&quot;)-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edep<sp/>=<sp/>DepositedPower-&gt;GetLeaf(&quot;energyK&quot;)-&gt;GetValue(0);<sp/>//<sp/>*<sp/>Beam_Power/(double)N_source;</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Etot<sp/>+=<sp/>edep;</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexEnergy-&gt;Fill(x,<sp/>y,<sp/>edep);</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/>//--------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>&quot;Power<sp/>Deposition&quot;;</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>scalingFactor<sp/>=<sp/>corePower<sp/>/<sp/>Etot;</highlight></codeline>
<codeline lineno="123"><highlight class="comment"></highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/>TCanvas*<sp/>cPowerDeposition<sp/>=<sp/>new<sp/>TCanvas(name.c_str(),<sp/>name.c_str(),<sp/>windowWidth,<sp/>windowWidth);</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/>marginCanvas(cPowerDeposition,<sp/>margin);</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/>TH2Poly<sp/>*hexPowerDeposition<sp/>=<sp/>(TH2Poly*)hexEnergy-&gt;Clone(name.c_str());</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;SetName(name.c_str());</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+<sp/>ext).c_str());</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;GetZaxis()-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>(MW)&quot;).c_str());</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;Scale(scalingFactor);</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;GetZaxis()-&gt;SetRangeUser(minPowerDeposition,<sp/>maxPowerDeposition);</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;Draw(&quot;coll<sp/>colz<sp/>text<sp/>0&quot;);</highlight></codeline>
<codeline lineno="133"><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Total<sp/>Energy<sp/>Deposited<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>Etot<sp/>&lt;&lt;<sp/>&quot;<sp/>eV&quot;<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Energy<sp/>Deposited<sp/>per<sp/>neutron<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>Etot*1e-6/nNeutrons<sp/>&lt;&lt;<sp/>&quot;<sp/>MeV&quot;<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Total<sp/>Core<sp/>Power<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>scalingFactor*Etot<sp/>&lt;&lt;<sp/>&quot;<sp/>MW&quot;<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Average<sp/>Power<sp/>Deposition<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>totalContent(hexPowerDeposition)/nAssembly<sp/>&lt;&lt;<sp/>&quot;<sp/>MW&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="138"><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/>//--------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>&quot;Power<sp/>Density&quot;;</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/>scalingFactor<sp/>=<sp/>corePower*1e6<sp/>/<sp/>(Etot*volume);</highlight></codeline>
<codeline lineno="142"><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/>TCanvas*<sp/>cPowerDensity<sp/>=<sp/>new<sp/>TCanvas(name.c_str(),<sp/>name.c_str(),<sp/>windowWidth,<sp/>windowWidth);</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/>marginCanvas(cPowerDensity,<sp/>margin);</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/>TH2Poly<sp/>*hexPowerDensity<sp/>=<sp/>(TH2Poly*)hexEnergy-&gt;Clone(name.c_str());</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;SetName(name.c_str());</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+<sp/>ext).c_str());</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;GetZaxis()-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>(W/cm^{3})&quot;).c_str());</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;Scale(scalingFactor);</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;GetZaxis()-&gt;SetRangeUser(minPowerDensity,<sp/>maxPowerDensity);</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;Draw(&quot;coll<sp/>colz<sp/>text<sp/>0&quot;);</highlight></codeline>
<codeline lineno="152"><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Average<sp/>Power<sp/>Density<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>totalContent(hexPowerDensity)/nAssembly<sp/>&lt;&lt;<sp/>&quot;<sp/>W/cm3&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/>//--------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>&quot;Specific<sp/>Power&quot;;</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/>scalingFactor<sp/>=<sp/>corePower*1e6<sp/>/<sp/>(Etot*volume*density);</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/>TCanvas*<sp/>cSpecificPower<sp/>=<sp/>new<sp/>TCanvas(name.c_str(),<sp/>name.c_str(),<sp/>windowWidth,<sp/>windowWidth);</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/>marginCanvas(cSpecificPower,<sp/>margin);</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/>TH2Poly<sp/>*hexSpecificPower<sp/>=<sp/>(TH2Poly*)hexEnergy-&gt;Clone(name.c_str());</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;SetName(name.c_str());</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+<sp/>ext).c_str());</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;GetZaxis()-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>(W/g)&quot;).c_str());</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;Scale(scalingFactor);</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;GetZaxis()-&gt;SetRangeUser(minSpecificPower,<sp/>maxSpecificPower);</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Average<sp/>Specific<sp/>Power<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>totalContent(hexSpecificPower)/nAssembly<sp/>&lt;&lt;<sp/>&quot;<sp/>W/g&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;Draw(&quot;coll<sp/>colz<sp/>text<sp/>0&quot;);</highlight></codeline>
<codeline lineno="168"><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/>//--------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(isSaveHasPNG)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cPowerDeposition-&gt;SaveAs((&quot;Power_Deposition_&quot;<sp/>+<sp/>ext<sp/>+<sp/>&quot;.png&quot;).c_str());</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cPowerDensity<sp/><sp/><sp/>-&gt;SaveAs((&quot;Power_Density_&quot;<sp/>+<sp/>ext<sp/>+<sp/>&quot;.png&quot;).c_str());</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cSpecificPower<sp/><sp/>-&gt;SaveAs((&quot;Specific_Power_&quot;<sp/>+<sp/>ext<sp/>+<sp/>&quot;.png&quot;).c_str());</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="178"><highlight class="comment">int<sp/>HexagonalEdepMap(std::string<sp/>inputFile,<sp/>std::string<sp/>ext)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Reading<sp/>name<sp/>of<sp/>the<sp/>ROOT<sp/>file</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/>size_t<sp/>last_slash<sp/>=<sp/>inputFile.rfind(&quot;/&quot;);</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/>if(last_slash<sp/>==<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_slash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>FileName<sp/>=<sp/>inputFile.substr(last_slash,<sp/>inputFile.rfind(&quot;.root&quot;)-last_slash);</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/>TFile<sp/>*f_ROOT<sp/>=<sp/>new<sp/>TFile(<sp/>(inputFile).c_str()<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/>//-------------------------<sp/>Begin<sp/>User<sp/>Input<sp/>-------------------------------*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Reactor<sp/>Parameter</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>pitch<sp/>=<sp/>225.45;<sp/>//<sp/>mm</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>a<sp/>=<sp/>pitch<sp/>*<sp/>2./sqrt(3.);<sp/>//<sp/>mm</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>height<sp/>=<sp/>900.;<sp/>//<sp/>mm</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>volumeAssembly<sp/>=<sp/>3.*sqrt(3.)/8.<sp/>*<sp/>a*a<sp/>*<sp/>height<sp/>*<sp/>1e-3;<sp/>//<sp/>cm3</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>volumeFuelAssembly<sp/>=<sp/>height<sp/>*<sp/>198.<sp/>*<sp/>3.14159265<sp/>*<sp/>(5.5*5.5-0.55*0.55)<sp/>*<sp/>1e-3;</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>volume<sp/>=<sp/>volumeFuelAssembly;</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>density<sp/>=<sp/>10.407;<sp/>//<sp/>g/cm3</highlight></codeline>
<codeline lineno="196"><highlight class="comment"></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Physical<sp/>Scale</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>corePower<sp/>=<sp/>280.;<sp/>//<sp/>MW</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>nNeutrons<sp/>=<sp/>160000.;</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>nAssembly<sp/>=<sp/>61.;</highlight></codeline>
<codeline lineno="201"><highlight class="comment"></highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Binning<sp/>of<sp/>Hexagonal<sp/>Map</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/>xBin<sp/>=<sp/>11,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yBin<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>xMin<sp/>=<sp/>-(double)xBin/2.*pitch,<sp/>yMin<sp/>=<sp/>-(3.*(double)yBin+1.)*a/8.;</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>xMax<sp/>=<sp/>-xMin,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yMax<sp/>=<sp/>-yMin;</highlight></codeline>
<codeline lineno="206"><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Plot<sp/>Scale</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>minPowerDeposition<sp/>=<sp/><sp/><sp/>2.70*0;<sp/>//<sp/>MW</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>minPowerDensity<sp/><sp/><sp/><sp/>=<sp/>160.50*0;<sp/>//<sp/>W/cm3</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>minSpecificPower<sp/><sp/><sp/>=<sp/><sp/>15.50*0;<sp/>//<sp/>W/g</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>maxPowerDeposition<sp/>=<sp/><sp/><sp/>6.88;<sp/>//<sp/>MW</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>maxPowerDensity<sp/><sp/><sp/><sp/>=<sp/>410.37;<sp/>//<sp/>W/cm3</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>maxSpecificPower<sp/><sp/><sp/>=<sp/><sp/>39.43;<sp/>//<sp/>W/g</highlight></codeline>
<codeline lineno="214"><highlight class="comment"></highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Canvas<sp/>Setup</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>margin<sp/>=<sp/>0.16;</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>windowWidth<sp/>=<sp/>1000.;</highlight></codeline>
<codeline lineno="218"><highlight class="comment"></highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>isSaveHasPNG<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/>//-------------------------<sp/>End<sp/>User<sp/>Input<sp/>---------------------------------*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"></highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/>TTree*<sp/>DepositedPower<sp/>=<sp/>(TTree*)f_ROOT-&gt;GetObjectChecked((&quot;DepositedPower&quot;),<sp/>&quot;TTree&quot;);</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>nEntries<sp/>=<sp/>(int)DepositedPower-&gt;GetEntries();</highlight></codeline>
<codeline lineno="224"><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/>TH2Poly<sp/>*hexEnergy<sp/>=<sp/>new<sp/>TH2Poly();</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/>hexEnergy-&gt;Honeycomb(xMin,<sp/>yMin,<sp/>a/2.,<sp/>xBin,<sp/>yBin);</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/>hexEnergy-&gt;GetXaxis()-&gt;SetTitle(&quot;X<sp/>(mm)&quot;);</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/>hexEnergy-&gt;GetYaxis()-&gt;SetTitle(&quot;Y<sp/>(mm)&quot;);</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/>hexEnergy-&gt;GetZaxis()-&gt;SetTitleOffset(1.5);</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/>gStyle-&gt;SetCanvasPreferGL(true);</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPaintTextFormat(&quot;.2f&quot;);</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/>gStyle-&gt;SetOptStat(false);</highlight></codeline>
<codeline lineno="233"><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>x,<sp/>y,<sp/>edep,<sp/>Etot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nEntries;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DepositedPower-&gt;GetEntry(i);</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(DepositedPower-&gt;GetLeaf(&quot;isInFuel&quot;)-&gt;GetValue(0)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>DepositedPower-&gt;GetLeaf(&quot;NPosX&quot;)-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>DepositedPower-&gt;GetLeaf(&quot;NPosY&quot;)-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//z<sp/>=<sp/>DepositedPower-&gt;GetLeaf(&quot;NPosZ&quot;)-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edep<sp/>=<sp/>DepositedPower-&gt;GetLeaf(&quot;energyK&quot;)-&gt;GetValue(0);<sp/>//<sp/>*<sp/>Beam_Power/(double)N_source;</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Etot<sp/>+=<sp/>edep;</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexEnergy-&gt;Fill(x,<sp/>y,<sp/>edep);</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/>//--------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>&quot;Power<sp/>Deposition&quot;;</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>scalingFactor<sp/>=<sp/>corePower<sp/>/<sp/>Etot;</highlight></codeline>
<codeline lineno="250"><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/>TCanvas*<sp/>cPowerDeposition<sp/>=<sp/>new<sp/>TCanvas(name.c_str(),<sp/>name.c_str(),<sp/>windowWidth,<sp/>windowWidth);</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/>marginCanvas(cPowerDeposition,<sp/>margin);</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/>TH2Poly<sp/>*hexPowerDeposition<sp/>=<sp/>(TH2Poly*)hexEnergy-&gt;Clone(name.c_str());</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;SetName(name.c_str());</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+<sp/>ext).c_str());</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;GetZaxis()-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>(MW)&quot;).c_str());</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;Scale(scalingFactor);</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;GetZaxis()-&gt;SetRangeUser(minPowerDeposition,<sp/>maxPowerDeposition);</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDeposition-&gt;Draw(&quot;coll<sp/>colz<sp/>text<sp/>0&quot;);</highlight></codeline>
<codeline lineno="260"><highlight class="comment"></highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Total<sp/>Energy<sp/>Deposited<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>Etot<sp/>&lt;&lt;<sp/>&quot;<sp/>eV&quot;<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Energy<sp/>Deposited<sp/>per<sp/>neutron<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>Etot*1e-6/nNeutrons<sp/>&lt;&lt;<sp/>&quot;<sp/>MeV&quot;<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Total<sp/>Core<sp/>Power<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>scalingFactor*Etot<sp/>&lt;&lt;<sp/>&quot;<sp/>MW&quot;<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Average<sp/>Power<sp/>Deposition<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>totalContent(hexPowerDeposition)/nAssembly<sp/>&lt;&lt;<sp/>&quot;<sp/>MW&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="265"><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/>//--------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>&quot;Power<sp/>Density&quot;;</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/>scalingFactor<sp/>=<sp/>corePower*1e6<sp/>/<sp/>(Etot*volume);</highlight></codeline>
<codeline lineno="269"><highlight class="comment"></highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/>TCanvas*<sp/>cPowerDensity<sp/>=<sp/>new<sp/>TCanvas(name.c_str(),<sp/>name.c_str(),<sp/>windowWidth,<sp/>windowWidth);</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/>marginCanvas(cPowerDensity,<sp/>margin);</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/>TH2Poly<sp/>*hexPowerDensity<sp/>=<sp/>(TH2Poly*)hexEnergy-&gt;Clone(name.c_str());</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;SetName(name.c_str());</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+<sp/>ext).c_str());</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;GetZaxis()-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>(W/cm^{3})&quot;).c_str());</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;Scale(scalingFactor);</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;GetZaxis()-&gt;SetRangeUser(minPowerDensity,<sp/>maxPowerDensity);</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/>hexPowerDensity-&gt;Draw(&quot;coll<sp/>colz<sp/>text<sp/>0&quot;);</highlight></codeline>
<codeline lineno="279"><highlight class="comment"></highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Average<sp/>Power<sp/>Density<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>totalContent(hexPowerDensity)/nAssembly<sp/>&lt;&lt;<sp/>&quot;<sp/>W/cm3&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="281"><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/>//--------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>&quot;Specific<sp/>Power&quot;;</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/>scalingFactor<sp/>=<sp/>corePower*1e6<sp/>/<sp/>(Etot*volume*density);</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/>TCanvas*<sp/>cSpecificPower<sp/>=<sp/>new<sp/>TCanvas(name.c_str(),<sp/>name.c_str(),<sp/>windowWidth,<sp/>windowWidth);</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/>marginCanvas(cSpecificPower,<sp/>margin);</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/>TH2Poly<sp/>*hexSpecificPower<sp/>=<sp/>(TH2Poly*)hexEnergy-&gt;Clone(name.c_str());</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;SetName(name.c_str());</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+<sp/>ext).c_str());</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;GetZaxis()-&gt;SetTitle((name<sp/>+<sp/>&quot;<sp/>(W/g)&quot;).c_str());</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;Scale(scalingFactor);</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;GetZaxis()-&gt;SetRangeUser(minSpecificPower,<sp/>maxSpecificPower);</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Average<sp/>Specific<sp/>Power<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>totalContent(hexSpecificPower)/nAssembly<sp/>&lt;&lt;<sp/>&quot;<sp/>W/g&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/>hexSpecificPower-&gt;Draw(&quot;coll<sp/>colz<sp/>text<sp/>0&quot;);</highlight></codeline>
<codeline lineno="295"><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/>//--------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(isSaveHasPNG)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cPowerDeposition-&gt;SaveAs((&quot;Power_Deposition_&quot;<sp/>+<sp/>ext<sp/>+<sp/>&quot;.png&quot;).c_str());</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cPowerDensity<sp/><sp/><sp/>-&gt;SaveAs((&quot;Power_Density_&quot;<sp/>+<sp/>ext<sp/>+<sp/>&quot;.png&quot;).c_str());</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cSpecificPower<sp/><sp/>-&gt;SaveAs((&quot;Specific_Power_&quot;<sp/>+<sp/>ext<sp/>+<sp/>&quot;.png&quot;).c_str());</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/>return(0);</highlight></codeline>
<codeline lineno="303"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">/*int<sp/>multiplot(std::string<sp/>inputFile,<sp/>int<sp/>nRoot)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>index;</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nRoot;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>std::to_string(i);</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HexagonalEdepMap(index+&quot;_&quot;+inputFile,<sp/>&quot;Cycle_&quot;+index);</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-3/HexagonalEdepMap.C"/>
  </compounddef>
</doxygen>
