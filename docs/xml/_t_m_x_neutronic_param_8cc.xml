<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_t_m_x_neutronic_param_8cc" kind="file" language="C++">
    <compoundname>TMXNeutronicParam.cc</compoundname>
    <includes refid="_t_m_x_neutronic_param_8hh" local="yes">TMXNeutronicParam.hh</includes>
    <includes refid="_t_m_x_option_8hh" local="yes">TMXOption.hh</includes>
    <includes local="no">chrono</includes>
    <includes local="no">ctime</includes>
    <incdepgraph>
      <node id="3">
        <label>TMXInputParameters.hh</label>
        <link refid="_t_m_x_input_parameters_8hh_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>TMXMergeThreadsResults.hh</label>
        <link refid="_t_m_x_merge_threads_results_8hh_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>TMXNeutronicParam.hh</label>
        <link refid="_t_m_x_neutronic_param_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>TMXOption.hh</label>
        <link refid="_t_m_x_option_8hh_source"/>
      </node>
      <node id="8">
        <label>TMXRandomDistribution3D.hh</label>
        <link refid="_t_m_x_random_distribution3_d_8hh_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>TMXStatErrorCalc.hh</label>
        <link refid="_t_m_x_stat_error_calc_8hh_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/src/TMXNeutronicParam.cc</label>
        <link refid="_t_m_x_neutronic_param_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>chrono</label>
      </node>
      <node id="16">
        <label>ctime</label>
      </node>
      <node id="5">
        <label>fstream</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="10">
        <label>random</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="13">
        <label>time.h</label>
      </node>
      <node id="7">
        <label>unordered_map</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TMXNeutronicParam</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Donovan<sp/>Maire,<sp/>Transmutex,<sp/>01/09/2020</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXNeutronicParam.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXOption.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="class_t_m_x_neutronic_param_1a837f7bf4b87e49723b855ae9e7e50794" refkind="member"><highlight class="normal"><ref refid="class_t_m_x_neutronic_param_1a837f7bf4b87e49723b855ae9e7e50794" kindref="member">TMXNeutronicParam::TMXNeutronicParam</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RunNumber,<sp/><ref refid="class_t_m_x_merge_threads_results" kindref="compound">TMXMergeThreadsResults</ref>&amp;<sp/>mergedOutput,<sp/><ref refid="class_t_m_x_input_parameters" kindref="compound">TMXInputParameters</ref>*<sp/>parameter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threadID)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>Initialize(RunNumber,<sp/>mergedOutput,<sp/>parameter,<sp/>threadID);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">TMXNeutronicParam::~TMXNeutronicParam()<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::Initialize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RunNumber,<sp/><ref refid="class_t_m_x_merge_threads_results" kindref="compound">TMXMergeThreadsResults</ref>&amp;<sp/>mergedOutput,<sp/><ref refid="class_t_m_x_input_parameters" kindref="compound">TMXInputParameters</ref>*<sp/>parameter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threadID)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;TMXNeutronicParam<sp/>Initialization&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>fInputParam<sp/>=<sp/>parameter;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>fnEvt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>fthreadID<sp/>=<sp/>threadID;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>fTotNbNeutrons<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>fNbNperGeneration.clear();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>fErrorCap_abs.Initialize();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>fErrorEta.Initialize();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>fErrorFissionByN0.Initialize();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>fErrorN_AbsU5.Initialize();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>fErrorN_CapU8.Initialize();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>fErrorEperFission_withEdepMinusEbeam.Initialize();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>fErrorEperFission.Initialize();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>fErrorEdep.Initialize();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>fErrorKeff_collision.Initialize();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>fErrorKeff_analogAbs.Initialize();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>fErrorKeff_implicitAbs.Initialize();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>fErrorKeff_trackLength.Initialize();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>fRunNumber<sp/>=<sp/>RunNumber;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>fkeff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>fsigma_mean_keff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>ferror_mean_keff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>fEtot_deposit<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Define<sp/>the<sp/>name<sp/>of<sp/>the<sp/>file<sp/>to<sp/>record<sp/>physical<sp/>parameters<sp/>of<sp/>this<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if(fInputParam-&gt;str_ROOTFileName<sp/>!=<sp/>&quot;&quot;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>pos<sp/>=<sp/>fInputParam-&gt;str_ROOTFileName.find(&quot;.root&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(pos<sp/>!=<sp/>std::string::npos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLogFile<sp/>=<sp/>fInputParam-&gt;str_ROOTFileName.substr(0,pos)<sp/>+<sp/>&quot;_log&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Log<sp/>file<sp/>is<sp/>used<sp/>to<sp/>record<sp/>each<sp/>following<sp/>parameters<sp/>every<sp/>fInputParam-&gt;PrintModulo<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::ofstream<sp/>LogFile;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>LogFile.open((fLogFile<sp/>+<sp/>std::to_string(fthreadID)<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>std::to_string(fRunNumber)<sp/>+<sp/>(std::string)&quot;.txt&quot;).c_str(),std::ios::out);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if(!TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>&quot;Events\tN0\tNtot\tFissionByN0\terrFissionByN0\tNeutronFromFission\tnbNeutronFromInelastic\tAbsorptionInU235\terr_AbsorptionInU235\tCaptureInU238\terr_CaptureInU238\tk_src\terrk_src\tk_eff\terrk_eff\tnu\teta\terr_eta\tepsilon\terr_epsilon\tcap(U-238)/abs(U-235)\terr_cap(U-238)/abs(U-235)\tEtot-Ebeam_perFission\terr_Etot-Ebeam_perFission\tEdep_perFission\terr_Edep_perFission\tG0\terr_G0\tG_G0k\terr_G_G0k\tG_Pth\terr_G_Pth\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>&quot;Chi2\terr_Chi2\tEvents\tN0\tNtot\tFissionByN0\terrFissionByN0\tNeutronFromFission\tnbNeutronFromInelastic\tAbsorptionInU235\terr_AbsorptionInU235\tCaptureInU238\terr_CaptureInU238\tk_eff\terrk_eff\tk_eff_direct\terrk_eff_direct\tnu\teta\terr_eta\tcap(U-238)/abs(U-235)\terr_cap(U-238)/abs(U-235)\tEtot-Ebeam_perFission\terr_Etot-Ebeam_perFission\tEdep_perFission\terr_Edep_perFission\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>LogFile.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Random<sp/>sampling<sp/>of<sp/>source<sp/>neutron<sp/>position<sp/>for<sp/>keff<sp/>Calculation<sp/>(fint_Option<sp/>=<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>fmergedOutput<sp/>=<sp/>&amp;mergedOutput;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>fPrevious_weights.clear();</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::UpdateValues(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEvt,<sp/>std::vector&lt;long<sp/>int&gt;&amp;<sp/>NbNperGeneration,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TotNbNeutrons)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>fnEvt<sp/>=<sp/>nEvt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>fNbNperGeneration<sp/>=<sp/>NbNperGeneration;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>fTotNbNeutrons<sp/>=<sp/>TotNbNeutrons;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::DoCalculationAndPrintValues(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N0abs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NeutronFromFission,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NeutronFromInelastic,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>N_AbsU5,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RelativeAbundanceU235,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>N_CapU8,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>N_absTot,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RelativeAbundanceU238,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Edep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ebeam,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NbFission,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EperFission,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nb_EperFission,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nu,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>FissionByN0,<sp/><ref refid="class_t_m_x_random_distribution3_d" kindref="compound">TMXRandomDistribution3D</ref>&amp;<sp/>RadiusAnglesHeight,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEvt,<sp/>std::vector&lt;long<sp/>int&gt;&amp;<sp/>NbNperGeneration,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TotNbNeutrons)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateValues(nEvt,<sp/>NbNperGeneration,<sp/>TotNbNeutrons);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>DoCalculationAndPrintValues(N0abs,<sp/>NeutronFromFission,<sp/>NeutronFromInelastic,<sp/>N_AbsU5,<sp/>RelativeAbundanceU235,<sp/>N_CapU8,<sp/>N_absTot,<sp/>RelativeAbundanceU238,<sp/>Edep,<sp/>Ebeam,<sp/>NbFission,<sp/>EperFission,<sp/>Nb_EperFission,<sp/>nu,<sp/>FissionByN0,<sp/>RadiusAnglesHeight);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::DoCalculationAndPrintValues(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N0abs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NeutronFromFission,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NeutronFromInelastic,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>N_AbsU5,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RelativeAbundanceU235,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>N_CapU8,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="comment">/*N_absTot*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RelativeAbundanceU238,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Edep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ebeam,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NbFission,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EperFission,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nb_EperFission,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nu,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>FissionByN0,<sp/><ref refid="class_t_m_x_random_distribution3_d" kindref="compound">TMXRandomDistribution3D</ref>&amp;<sp/>RadiusAnglesHeight)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>fEtot_deposit<sp/>+=<sp/>Edep;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accumulate<sp/>data<sp/>of<sp/>E_per_fission<sp/>for<sp/>every<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NbFission<sp/>!=<sp/>0)<sp/>{<sp/>fErrorEperFission_withEdepMinusEbeam.StatErrorCalc((Edep-Ebeam)/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)NbFission);}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nb_EperFission<sp/>!=<sp/>0)<sp/>{<sp/>fErrorEperFission.StatErrorCalc(EperFission/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nb_EperFission);<sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>fErrorEdep.StatErrorCalc(<sp/>Edep<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fTotNbNeutrons<sp/>!=<sp/>0<sp/>)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>some<sp/>neutrons<sp/>are<sp/>produced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(fnEvt%fInputParam-&gt;PrintModulo<sp/>==<sp/>0<sp/>||<sp/>0.8*fInputParam-&gt;Nparticles/fInputParam-&gt;nThreads<sp/>&lt;<sp/>fnEvt)<sp/>&amp;&amp;<sp/>fInputParam-&gt;int_Option<sp/>!=<sp/>20)<sp/></highlight><highlight class="comment">//<sp/>every<sp/>fInputParam-&gt;PrintModulo<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>Capture/absorption<sp/>ratio<sp/>to<sp/>estimate<sp/>the<sp/>spectrum<sp/>quality<sp/>(fast<sp/>neutrons<sp/>VS<sp/>thermal<sp/>neutrons)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>capture<sp/>and<sp/>absorption<sp/>rates<sp/>in<sp/>U-238<sp/>or<sp/>U-235</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CapAbsRatioCalculation(N_AbsU5,<sp/>RelativeAbundanceU235,<sp/>N_CapU8,<sp/>RelativeAbundanceU238);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>k<sp/>as<sp/>a<sp/>function<sp/>of<sp/>neutron<sp/>generation<sp/>and<sp/>its<sp/>statistical<sp/>error<sp/>(1<sp/>sigma)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>error_k;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;double&gt;<sp/>k<sp/>=<sp/>k_Calculation(error_k);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>k_eff<sp/>+-<sp/>sigma_keff<sp/>(statistical<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keffCalculation(k);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>k_source<sp/>+-<sp/>sigma_k_source<sp/>(statistical<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksrcCalculation();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>characteristic<sp/>parameters<sp/>of<sp/>an<sp/>ADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EpsilonCalculation();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Coupling<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EtaCalculation(NeutronFromFission,<sp/>NeutronFromInelastic);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Efficiency<sp/>to<sp/>produce<sp/>fissions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EFissionCalculation(Edep,<sp/>Ebeam,<sp/>NbFission);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Average<sp/>energy<sp/>released<sp/>per<sp/>fission<sp/>[MeV]<sp/>-&gt;<sp/>Total<sp/>Energy<sp/>deposited<sp/>minus<sp/>the<sp/>beam<sp/>energy<sp/>divided<sp/>by<sp/>the<sp/>number<sp/>of<sp/>fission<sp/>=<sp/>the<sp/>mean<sp/>energy<sp/>released<sp/>by<sp/>each<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EperFissionCalculation(EperFission,<sp/>Nb_EperFission);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Average<sp/>energy<sp/>released<sp/>per<sp/>fission<sp/>[MeV]<sp/>-&gt;<sp/>Total<sp/>Energy<sp/>released<sp/>by<sp/>fission<sp/>and<sp/>secondaries<sp/>due<sp/>to<sp/>fission<sp/>=<sp/>the<sp/>mean<sp/>energy<sp/>released<sp/>by<sp/>each<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G0calculation(nu);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>the<sp/>ADS<sp/>gain<sp/>G0<sp/>=<sp/>intrisic<sp/>gain<sp/>of<sp/>the<sp/>ADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_G0k_calculation();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>the<sp/>ADS<sp/>gain<sp/>G<sp/>=<sp/>G0<sp/>*<sp/>ksrc/1-ksrc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_Pth_calculation();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>the<sp/>ADS<sp/>gain<sp/>G<sp/>=<sp/>P_tot<sp/>/<sp/>P_beam<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionByN0Calculation(FissionByN0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>fissions<sp/>due<sp/>to<sp/>N0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Chi2Calculation(RadiusAnglesHeight);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Chi<sp/>square<sp/>calculation<sp/>of<sp/>the<sp/>fission<sp/>spatial<sp/>distribution<sp/>between<sp/>to<sp/>step<sp/>of<sp/>a<sp/>keff<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gives<sp/>the<sp/>information<sp/>to<sp/>the<sp/>class<sp/>which<sp/>merges<sp/>the<sp/>results<sp/>of<sp/>every<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmergedOutput-&gt;AddNewValues(fthreadID,<sp/>fNbNperGeneration[0],<sp/>fTotNbNeutrons,<sp/>fsumFissionByN0,<sp/>fsigma_FissionByN0,<sp/>NeutronFromFission,<sp/>NeutronFromInelastic,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fErrorN_AbsU5.GetSum()/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)fnEvt,<sp/>fsigma_N_AbsU5,<sp/>fErrorN_CapU8.GetSum()/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)fnEvt,<sp/>fsigma_N_CapU8,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fksrc,<sp/>fsigma_ksrc,<sp/>fkeff,<sp/>fsigma_mean_keff,<sp/>nu,<sp/>feta,<sp/>fsigma_eta,<sp/>fepsilon,<sp/>fsigma_eps,<sp/>fCap_abs,<sp/>fsigma_Cap_Abs,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEtotEbeam_perFission,<sp/>fsigma_EtotEbeam_perFission,<sp/>fmeanEperFission,<sp/>fsigma_EperFission,<sp/>fG0,<sp/>fsigma_G0,<sp/>fG_G0k,<sp/>fsigma_G_G0k,<sp/>fG_Pth,<sp/>fsigma_G_Pth,<sp/>fSum2,<sp/>fSum4);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmergedOutput-&gt;AddNew_k_values(fthreadID,<sp/>k,<sp/>error_k);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>values<sp/>in<sp/>the<sp/>terminal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintValues(NeutronFromFission,<sp/>NeutronFromInelastic,<sp/>nu,<sp/>N0abs);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>values<sp/>in<sp/>a<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriteValues(NeutronFromFission,<sp/>NeutronFromInelastic,<sp/>nu);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintTimer();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::PrintTimer()<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnEvt<sp/>&lt;<sp/>10<sp/>*<sp/>fInputParam-&gt;PrintModulo<sp/><sp/>&amp;&amp;<sp/>fnEvt<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>fthreadID<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>timenow<sp/>=<sp/>std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>ctime(&amp;timenow)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;it<sp/>tooks<sp/>&quot;<sp/>&lt;&lt;<sp/>difftime(time(NULL),<sp/>fTimer)<sp/>&lt;&lt;<sp/>&quot;<sp/>seconds<sp/>for<sp/>last<sp/>&quot;<sp/>&lt;&lt;<sp/>fInputParam-&gt;PrintModulo<sp/>&lt;&lt;<sp/>&quot;<sp/>events.\n&quot;<sp/>&lt;&lt;<sp/>G4endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>k<sp/>and<sp/>error_k<sp/>for<sp/>each<sp/>neutron<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>k<sp/>is<sp/>the<sp/>ratio<sp/>between<sp/>the<sp/>number<sp/>of<sp/>neutrons<sp/>in<sp/>two<sp/>consecutive<sp/>generations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">std::vector&lt;double&gt;<sp/>TMXNeutronicParam::k_Calculation(std::vector&lt;double&gt;&amp;<sp/>error_k)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>k;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;fNbNperGeneration.size()-1;<sp/>++i)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>k<sp/>for<sp/>each<sp/>neutron<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fNbNperGeneration[i]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.push_back(fNbNperGeneration[i+1]/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)fNbNperGeneration[i]);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k.push_back(0);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fNbNperGeneration[i+1]<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>fNbNperGeneration[i]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_k.push_back(<sp/>k[i]<sp/>*<sp/>std::sqrt(<sp/>1./fNbNperGeneration[i+1]<sp/>+<sp/>1./fNbNperGeneration[i]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_k.push_back(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>k_source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ksrc<sp/>=<sp/>1<sp/>-<sp/>Nb<sp/>source<sp/>neutrons<sp/>/<sp/>Total<sp/>number<sp/>of<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::ksrcCalculation()<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fTotNbNeutrons<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fksrc<sp/>=<sp/>1<sp/>-<sp/>fNbNperGeneration[0]/(double)fTotNbNeutrons;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fksrc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fTotNbNeutrons<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>fNbNperGeneration[0])</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsigma_ksrc<sp/>=<sp/>fksrc<sp/>*<sp/>std::sqrt(<sp/>1./fNbNperGeneration[0]<sp/>+<sp/>1./fTotNbNeutrons<sp/>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsigma_ksrc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>k_eff<sp/>(direct<sp/>estimation)<sp/><sp/>(WARNING<sp/>neutron<sp/>generation<sp/>range<sp/>is<sp/>hard<sp/>coded)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>direct<sp/>keff<sp/>=<sp/>average<sp/>value<sp/>of<sp/>k<sp/>from<sp/>generation<sp/>10<sp/>to<sp/>60</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::keffCalculation(std::vector<sp/>&lt;double&gt;&amp;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_t_m_x_stat_error_calc" kindref="compound">TMXStatErrorCalc</ref><sp/>ErrorKeff;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>fkeff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>fsigma_mean_keff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>ferror_mean_keff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>variation<sp/>of<sp/>k<sp/>over<sp/>the<sp/>5<sp/>generations<sp/>before<sp/>min<sp/>to<sp/>see<sp/>if<sp/>min<sp/>is<sp/>correctly<sp/>defined<sp/>(the<sp/>plateau<sp/>is<sp/>reached)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>END<sp/>of<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>minimum<sp/>and<sp/>maximum<sp/>of<sp/>neutron<sp/>generation<sp/>to<sp/>be<sp/>considered<sp/>to<sp/>calculate<sp/>keff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index_keff_min<sp/>=<sp/>9;<sp/><sp/></highlight><highlight class="comment">//<sp/>k<sp/>at<sp/>Generation<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index_keff_max<sp/>=<sp/>59;<sp/><sp/></highlight><highlight class="comment">//<sp/>k<sp/>at<sp/>generation<sp/>59</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index_keff_max<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)k.size())<sp/>{<sp/>index_keff_max<sp/>=<sp/>k.size()-1;<sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index_keff_min<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)k.size())<sp/>{<sp/>index_keff_min<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accumulate<sp/>values<sp/>of<sp/>k<sp/>for<sp/>several<sp/>neutron<sp/>generations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ik<sp/>=<sp/>index_keff_min;<sp/>ik<sp/>&lt;=<sp/>index_keff_max;<sp/>++ik)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorKeff.StatErrorCalc(k[ik]);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Mean<sp/>k<sp/>=<sp/>keff<sp/>and<sp/>sigma_keff<sp/>=<sp/>standard<sp/>dev.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>fkeff<sp/>=<sp/>ErrorKeff.GetMeanValue();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>ferror_mean_keff<sp/>=<sp/>ErrorKeff.GetMeanError();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>fsigma_mean_keff<sp/>=<sp/>ErrorKeff.GetStandardDeviation();</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::EpsilonCalculation()<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>fepsilon<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>fsigma_eps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(1<sp/>-<sp/>fksrc<sp/>!=0<sp/>&amp;&amp;<sp/>fkeff<sp/>!=0)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fepsilon<sp/>=<sp/>fksrc<sp/>*<sp/>(1<sp/>-<sp/>fkeff)<sp/>/<sp/>(fkeff<sp/>*<sp/>(1<sp/>-<sp/>fksrc));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsigma_eps<sp/>=<sp/>fepsilon<sp/>*<sp/>sqrt(pow(<sp/>(1-fkeff)<sp/>/<sp/>(fkeff<sp/>*<sp/>(1<sp/>-<sp/>fksrc)*(1<sp/>-<sp/>fksrc))<sp/>*<sp/>fsigma_ksrc<sp/>,<sp/>2)<sp/>+<sp/>pow(<sp/>fksrc<sp/>/<sp/>(fkeff*fkeff<sp/>*<sp/>(1<sp/>-<sp/>fksrc))<sp/>*<sp/>fsigma_mean_keff<sp/>,<sp/>2));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::EtaCalculation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NeutronFromFission,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NeutronFromInelastic)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>feta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NeutronFromFission<sp/>+<sp/>NeutronFromInelastic<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feta<sp/>=<sp/>NeutronFromFission/(double)(NeutronFromFission<sp/>+<sp/>NeutronFromInelastic);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsigma_eta<sp/>=<sp/>fErrorEta.StatErrorCalc(feta);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::EFissionCalculation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Edep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ebeam,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NbFission)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>Energy<sp/>deposited<sp/>minus<sp/>the<sp/>beam<sp/>energy<sp/>divided<sp/>by<sp/>the<sp/>number<sp/>of<sp/>fission<sp/>=<sp/>the<sp/>mean<sp/>energy<sp/>released<sp/>by<sp/>each<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>number<sp/>of<sp/>values<sp/>of<sp/>the<sp/>energy<sp/>deposit<sp/>per<sp/>fission<sp/>is<sp/>not<sp/>0,<sp/>we<sp/>calculate<sp/>the<sp/>statistical<sp/>error<sp/>(1<sp/>sigma)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NbFission<sp/>!=<sp/>0)<sp/>{fsigma_EtotEbeam_perFission<sp/>=<sp/>1e-6<sp/>*<sp/>fErrorEperFission_withEdepMinusEbeam.StatErrorCalc((Edep-Ebeam)/NbFission);<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>fsigma_EtotEbeam_perFission<sp/>=<sp/>1e-6<sp/>*<sp/>fErrorEperFission_withEdepMinusEbeam.GetMeanError();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>fEtotEbeam_perFission<sp/>=<sp/>fErrorEperFission_withEdepMinusEbeam.GetMeanValue()<sp/>*<sp/>1e-6;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::EperFissionCalculation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EperFission,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nb_EperFission)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>Energy<sp/>released<sp/>by<sp/>fission<sp/>and<sp/>secondaries<sp/>due<sp/>to<sp/>fission<sp/>=<sp/>the<sp/>mean<sp/>energy<sp/>released<sp/>by<sp/>each<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nb_EperFission<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>number<sp/>of<sp/>value<sp/>of<sp/>the<sp/>energy<sp/>released<sp/>by<sp/>fissions<sp/>is<sp/>not<sp/>0,<sp/>we<sp/>calculate<sp/>its<sp/>statistical<sp/>error<sp/>(1<sp/>sigma)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsigma_EperFission<sp/>=<sp/>1e-6<sp/>*<sp/>fErrorEperFission.StatErrorCalc(EperFission/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nb_EperFission);<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>fsigma_EperFission<sp/>=<sp/>1e-6<sp/>*<sp/>fErrorEperFission.GetMeanError();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>fmeanEperFission<sp/>=<sp/>fErrorEperFission.GetMeanValue()<sp/>*<sp/>1e-6;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::G0calculation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nu)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>fG0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fInputParam-&gt;BeamEnergy<sp/>!=0<sp/>&amp;&amp;<sp/>nu<sp/>!=0)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fG0<sp/>=<sp/>feta/nu<sp/>*<sp/>(fNbNperGeneration[0]/(double)fnEvt)<sp/>*<sp/>fEtotEbeam_perFission/(fInputParam-&gt;BeamEnergy);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fNbNperGeneration[0]<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>fEtotEbeam_perFission<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsigma_G0<sp/>=<sp/>fG0<sp/>*<sp/>sqrt(1/fNbNperGeneration[0]<sp/>+<sp/>(fsigma_EtotEbeam_perFission/fEtotEbeam_perFission)*(fsigma_EtotEbeam_perFission/fEtotEbeam_perFission));}</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::G_G0k_calculation()<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>fG_G0k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>1<sp/>-<sp/>fksrc<sp/>!=0<sp/>)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fG_G0k<sp/>=<sp/>fG0<sp/>*<sp/>fksrc/(1-fksrc);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fG0<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>fksrc<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>1-fksrc<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsigma_G_G0k<sp/>=<sp/>fG_G0k<sp/>*<sp/>sqrt(<sp/>(fsigma_G0/fG0)*(fsigma_G0/fG0)<sp/>+<sp/>(fsigma_ksrc<sp/>/(fksrc*(1-fksrc)))<sp/>*<sp/>(fsigma_ksrc/(fksrc*(1-fksrc))));</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::G_Pth_calculation()<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>fG_Pth<sp/>=<sp/>fErrorEdep.GetMeanValue()/<sp/>(fInputParam-&gt;BeamEnergy*1e+6)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fInputParam-&gt;BeamEnergy<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>fnEvt<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fsigma_G_Pth<sp/>=<sp/>std::sqrt(<sp/>(fErrorEdep.GetMeanError()/fErrorEdep.GetMeanValue())*(fErrorEdep.GetMeanError()/fErrorEdep.GetMeanValue())<sp/>+</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1/fErrorEdep.GetNbValues())<sp/>*<sp/>fG_Pth;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::FissionByN0Calculation(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>FissionByN0)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>fsigma_FissionByN0<sp/>=<sp/>fErrorFissionByN0.StatErrorCalc(FissionByN0)/(double)fInputParam-&gt;PrintModulo<sp/>*<sp/>fnEvt;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>FissionByN0<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>counter<sp/>after<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>fsumFissionByN0<sp/>=<sp/>fErrorFissionByN0.GetSum();</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::CapAbsRatioCalculation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>N_AbsU5,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RelativeAbundanceU235,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>N_CapU8,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RelativeAbundanceU238)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>capture<sp/>and<sp/>absorption<sp/>rates<sp/>in<sp/>U-238<sp/>or<sp/>U-235</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>fsigma_N_AbsU5<sp/>=<sp/>fErrorN_AbsU5.StatErrorCalc(N_AbsU5)/(double)fInputParam-&gt;PrintModulo;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>fsigma_N_CapU8<sp/>=<sp/>fErrorN_CapU8.StatErrorCalc(N_CapU8)/(double)fInputParam-&gt;PrintModulo;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>Capture/absorption<sp/>ratio<sp/>to<sp/>estimate<sp/>the<sp/>spectrum<sp/>quality<sp/>(fast<sp/>neutrons<sp/>VS<sp/>thermal<sp/>neutrons)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>fCap_abs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(N_AbsU5<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>RelativeAbundanceU238<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fCap_abs<sp/>=<sp/>N_CapU8<sp/>/<sp/>RelativeAbundanceU238<sp/>*<sp/>RelativeAbundanceU235<sp/>/<sp/>N_AbsU5;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>N_AbsU5<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>counter<sp/>after<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>N_CapU8<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>counter<sp/>after<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>calculate<sp/>statistical<sp/>uncertainties<sp/>(1<sp/>sigma)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>fsigma_Cap_Abs<sp/>=<sp/>fErrorCap_abs.StatErrorCalc(fCap_abs);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::Chi2Calculation(<ref refid="class_t_m_x_random_distribution3_d" kindref="compound">TMXRandomDistribution3D</ref>&amp;<sp/>RadiusAnglesHeight)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>fSum2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convergence<sp/>calculation<sp/>for<sp/>keff<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>weights<sp/>=<sp/>RadiusAnglesHeight.GetUnnormedWeights();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fPrevious_weights.size()<sp/>==<sp/>0)<sp/>{<sp/>fPrevious_weights<sp/>=<sp/>RadiusAnglesHeight.GetInitialUnnormedWeights();<sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>fPrevious_weights.size();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fSum2<sp/>+=<sp/>std::pow(weights[i]<sp/>-<sp/>fPrevious_weights[i],<sp/>2);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fSum4<sp/>+=<sp/>std::pow(weights[i]<sp/>-<sp/>fPrevious_weights[i],<sp/>4);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fSum2<sp/>=<sp/>fSum2/n;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fSum4<sp/>=<sp/>std::sqrt(fSum4/n<sp/>-<sp/>fSum2*fSum2);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPrevious_weights<sp/>=<sp/>weights;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::WriteValues(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NeutronFromFission,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NeutronFromInelastic,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nu)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>LogFile;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile.open((fLogFile<sp/>+<sp/>std::to_string(fthreadID)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(fRunNumber)<sp/>+<sp/>(std::string)</highlight><highlight class="stringliteral">&quot;.txt&quot;</highlight><highlight class="normal">).c_str(),std::ios::out<sp/>|<sp/>std::ios::app);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fSum2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fSum4<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Writing<sp/>in<sp/>LogFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fnEvt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fNbNperGeneration[0]<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fTotNbNeutrons<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsumFissionByN0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_FissionByN0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>NeutronFromFission<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>NeutronFromInelastic<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fErrorN_AbsU5.GetSum()/(double)fnEvt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_N_AbsU5<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fErrorN_CapU8.GetSum()/(double)fnEvt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_N_CapU8<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fksrc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_ksrc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fkeff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_mean_keff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>nu<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>feta<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_eta<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fepsilon<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_eps<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fCap_abs&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_Cap_Abs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fEtotEbeam_perFission<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_EtotEbeam_perFission<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fmeanEperFission<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_EperFission<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fG0<sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_G0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fG_G0k<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_G_G0k<sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/>fG_Pth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_G_Pth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>LogFile.close();</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::PrintValues(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NeutronFromFission,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NeutronFromInelastic,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nu,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N0abs)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str_k<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;k_src&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))<sp/>{<sp/>str_k<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;k_eff<sp/>dedicated&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Printing<sp/>information<sp/>in<sp/>the<sp/>terminal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nEvt<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fnEvt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>N0<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fNbNperGeneration[0]/(double)fnEvt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>;<sp/>Ntot<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fTotNbNeutrons/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)fnEvt<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>;<sp/>FissionByN0<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsumFissionByN0/(double)fnEvt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_FissionByN0/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)fnEvt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>;<sp/>fission<sp/>neutrons<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>NeutronFromFission/(double)fnEvt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>;<sp/>inelastic<sp/>neutrons<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>NeutronFromInelastic/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)fnEvt<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>N_AbsU5<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorN_AbsU5.GetSum()<sp/><sp/>/(double)fnEvt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_N_AbsU5<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>;<sp/>N_CapU8<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorN_CapU8.GetSum()/(double)fnEvt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_N_CapU8<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>nu<sp/><sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nu<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str_k<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fksrc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_ksrc<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>k_eff<sp/>direct<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fkeff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_mean_keff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(mean<sp/>error<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ferror_mean_keff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Edep<sp/>(=per<sp/>fission)<sp/>per<sp/>fission<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fmeanEperFission<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_EperFission<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MeV&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!TMXOption::IsKeffCalculation(fInputParam-&gt;int_Option))<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Edep<sp/>(=<sp/>Etot-Ebeam)<sp/>per<sp/>fission<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fEtotEbeam_perFission<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_EtotEbeam_perFission<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MeV&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>eta<sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>feta<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_eta<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>;<sp/>epsilon<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fepsilon<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_eps<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>G0<sp/><sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fG0<sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_G0<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>G<sp/><sp/><sp/><sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fG_G0k<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_G_G0k<sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>G_Pth<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fG_Pth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_G_Pth<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;err_cap(U-238)<sp/>/<sp/>err_abs(U-235)<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fCap_abs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsigma_Cap_Abs<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;N0absorber<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>N0abs/(double)fnEvt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sum<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fSum2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fSum4<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MCNP<sp/>keff<sp/>estimators<sp/>:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>k_col<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_collision.GetMeanValue()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_collision.GetMeanError()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(sigma<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_collision.GetStandardDeviation()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>k_Aab<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_analogAbs.GetMeanValue()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_analogAbs.GetMeanError()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(sigma<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_analogAbs.GetStandardDeviation()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>k_Iab<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_implicitAbs.GetMeanValue()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_implicitAbs.GetMeanError()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(sigma<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_implicitAbs.GetStandardDeviation()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>k_trl<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_trackLength.GetMeanValue()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_trackLength.GetMeanError()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(sigma<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fErrorKeff_trackLength.GetStandardDeviation()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnEvt<sp/>&lt;<sp/>10)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>keep<sp/>first<sp/>10<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fErrorKeff_collision.Initialize();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fErrorKeff_analogAbs.Initialize();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fErrorKeff_implicitAbs.Initialize();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fErrorKeff_trackLength.Initialize();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXNeutronicParam::UpdateKeffEstimators(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Keff_collision,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Keff_analogAbs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Keff_implicitAbs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Keff_trackLength,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NsourceNeutronPerEvent)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NsourceNeutronPerEvent<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fErrorKeff_collision.StatErrorCalc(Keff_collision/NsourceNeutronPerEvent);;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fErrorKeff_analogAbs.StatErrorCalc(Keff_analogAbs/NsourceNeutronPerEvent);;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fErrorKeff_implicitAbs.StatErrorCalc(Keff_implicitAbs/NsourceNeutronPerEvent);;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fErrorKeff_trackLength.StatErrorCalc(Keff_trackLength/NsourceNeutronPerEvent);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Getter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXNeutronicParam::GetEtotDeposit()<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(fEtot_deposit);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/>}</highlight></codeline>
    </programlisting>
    <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/src/TMXNeutronicParam.cc"/>
  </compounddef>
</doxygen>
