<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_benchmark-1_2_graphes___r_o_o_t_8_c" kind="file" language="C++">
    <compoundname>Graphes_ROOT.C</compoundname>
    <includes local="no">TCanvas.h</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TH1F.h</includes>
    <includes local="no">TGraph.h</includes>
    <includes local="no">TTree.h</includes>
    <includes local="no">TLegend.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-1/Graphes_ROOT.C</label>
        <link refid="_benchmark-1_2_graphes___r_o_o_t_8_c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>TCanvas.h</label>
      </node>
      <node id="3">
        <label>TFile.h</label>
      </node>
      <node id="5">
        <label>TGraph.h</label>
      </node>
      <node id="4">
        <label>TH1F.h</label>
      </node>
      <node id="7">
        <label>TLegend.h</label>
      </node>
      <node id="6">
        <label>TTree.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_benchmark-1_2_graphes___r_o_o_t_8_c_1abf35375e6551e5c1577bcb8943d577cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TH2D *</type>
        <definition>TH2D * GetAndDraw2D_histo</definition>
        <argsstring>(TCanvas *canvas, std::string str_CanvaName, std::string str_histoName, std::string Xlabel, std::string Ylabel, std::string Zlabel, double scaling_factor, std::string drawing_Option, bool save_root, bool save_png)</argsstring>
        <name>GetAndDraw2D_histo</name>
        <param>
          <type>TCanvas *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>str_CanvaName</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>str_histoName</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Xlabel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Ylabel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Zlabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scaling_factor</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>drawing_Option</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>save_root</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>save_png</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-1/Graphes_ROOT.C" line="19" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-1/Graphes_ROOT.C" bodystart="19" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="_benchmark-1_2_graphes___r_o_o_t_8_c_1a0d8c2e29f72a9b4eb131c647b63e2a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TH1D *</type>
        <definition>TH1D * GetAndDraw1D_histo</definition>
        <argsstring>(TCanvas *canvas, std::string str_CanvaName, std::string str_histoName, std::string Xlabel, std::string Ylabel, double scaling_factor, std::string drawing_Option, bool save_root, bool save_png)</argsstring>
        <name>GetAndDraw1D_histo</name>
        <param>
          <type>TCanvas *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>str_CanvaName</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>str_histoName</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Xlabel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Ylabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scaling_factor</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>drawing_Option</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>save_root</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>save_png</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-1/Graphes_ROOT.C" line="38" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-1/Graphes_ROOT.C" bodystart="38" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="_benchmark-1_2_graphes___r_o_o_t_8_c_1aa853fdd87661320be1123c0c455e9a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TH2D *</type>
        <definition>TH2D * GetAndDraw2D_histoFromTree</definition>
        <argsstring>(TCanvas *canvas, std::string name_tree, std::string str_CanvaName, std::string str_histoName, std::string Xlabel, std::string Xvariable, int xbin, double Xmin, double Xmax, std::string Ylabel, std::string Yvariable, int ybin, double Ymin, double Ymax, std::string Zlabel, double scaling_factor, std::string drawing_Option, std::string str_cut, bool save_root, bool save_png)</argsstring>
        <name>GetAndDraw2D_histoFromTree</name>
        <param>
          <type>TCanvas *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name_tree</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>str_CanvaName</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>str_histoName</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Xlabel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Xvariable</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xbin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Xmin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Xmax</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Ylabel</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Yvariable</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ybin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ymin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ymax</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Zlabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scaling_factor</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>drawing_Option</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>str_cut</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>save_root</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>save_png</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-1/Graphes_ROOT.C" line="52" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-1/Graphes_ROOT.C" bodystart="52" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="_benchmark-1_2_graphes___r_o_o_t_8_c_1a177759ba0250cd25dbf375a73809ec48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Graphes_ROOT</definition>
        <argsstring>(std::string inputFile)</argsstring>
        <name>Graphes_ROOT</name>
        <param>
          <type>std::string</type>
          <declname>inputFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-1/Graphes_ROOT.C" line="82" column="5" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-1/Graphes_ROOT.C" bodystart="82" bodyend="2668"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Reading<sp/>ROOT<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>run<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>root<sp/>&quot;Graphes_ROOT.C(\&quot;File.root\&quot;)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Energy<sp/>is<sp/>eV</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>reasonID<sp/>Meaning<sp/>:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>-1<sp/>-<sp/>birth</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>0<sp/>-<sp/>other<sp/>reactions</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TCanvas.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH1F.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TGraph.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TTree.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TLegend.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">TH2D*<sp/>GetAndDraw2D_histo(TCanvas*<sp/>canvas,<sp/>std::string<sp/>str_CanvaName,<sp/>std::string<sp/>str_histoName,<sp/>std::string<sp/>Xlabel,<sp/>std::string<sp/>Ylabel,<sp/>std::string<sp/>Zlabel,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scaling_factor,<sp/>std::string<sp/>drawing_Option,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>save_root,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>save_png)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>histo_2D<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_histoName.c_str());</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;SetContour(100);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;GetXaxis()-&gt;SetTitle(Xlabel.c_str());</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;GetYaxis()-&gt;SetTitle(Ylabel.c_str());</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;GetZaxis()-&gt;SetTitle(Zlabel.c_str());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;GetZaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;Scale(scaling_factor);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;SetContour(100);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas-&gt;SetLogz();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;Draw(drawing_Option.c_str());</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>canvas-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>canvas-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>histo_2D;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">TH1D*<sp/>GetAndDraw1D_histo(TCanvas*<sp/>canvas,<sp/>std::string<sp/>str_CanvaName,<sp/>std::string<sp/>str_histoName,<sp/>std::string<sp/>Xlabel,<sp/>std::string<sp/>Ylabel,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scaling_factor,<sp/>std::string<sp/>drawing_Option,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>save_root,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>save_png)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo_1D<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(str_histoName.c_str());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_1D-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_1D-&gt;GetXaxis()-&gt;SetTitle(Xlabel.c_str());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_1D-&gt;GetYaxis()-&gt;SetTitle(Ylabel.c_str());</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_1D-&gt;Scale(scaling_factor);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_1D-&gt;Draw(drawing_Option.c_str());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>canvas-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>canvas-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>histo_1D;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">TH2D*<sp/>GetAndDraw2D_histoFromTree(TCanvas*<sp/>canvas,<sp/>std::string<sp/>name_tree,<sp/>std::string<sp/>str_CanvaName,<sp/>std::string<sp/>str_histoName,<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>Xlabel,<sp/>std::string<sp/>Xvariable,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xbin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Xmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Xmax,<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>Ylabel,<sp/>std::string<sp/>Yvariable,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ybin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ymin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ymax,<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>Zlabel,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scaling_factor,<sp/>std::string<sp/>drawing_Option,<sp/>std::string<sp/>str_cut,<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>save_root,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>save_png)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>TTree*<sp/>tree<sp/>=<sp/>(TTree*)<sp/>gDirectory-&gt;GetObjectChecked((name_tree.c_str()),<sp/></highlight><highlight class="stringliteral">&quot;TTree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str_buildHisto<sp/>=<sp/>Xvariable<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+<sp/>Yvariable<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_histoName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(xbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Xmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Xmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(ybin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Ymin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Ymax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>tree-&gt;Draw(str_buildHisto.c_str(),<sp/>str_cut.c_str(),<sp/>drawing_Option.c_str());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>histo_2D<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_histoName.c_str());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;SetContour(100);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;GetXaxis()-&gt;SetTitle(Xlabel.c_str());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;GetYaxis()-&gt;SetTitle(Ylabel.c_str());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;GetZaxis()-&gt;SetTitle(Zlabel.c_str());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;GetZaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;Scale(scaling_factor);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;SetContour(100);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas-&gt;SetLogz();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>histo_2D-&gt;Draw(drawing_Option.c_str());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>canvas-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>canvas-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>histo_2D;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Graphes_ROOT(std::string<sp/>inputFile)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>gErrorIgnoreLevel<sp/>=<sp/>kWarning;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>for(int<sp/>index_file=0;<sp/>index_file&lt;50;<sp/>++index_file)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::string<sp/>FileName<sp/>=<sp/>std::to_string(index_file)<sp/>+<sp/>&quot;_Opt20_RezK174_1&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading<sp/>name<sp/>of<sp/>the<sp/>ROOT<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>last_slash<sp/>=<sp/>inputFile.rfind(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(last_slash<sp/>==<sp/>std::string::npos)<sp/>{<sp/>last_slash<sp/>=<sp/>0;}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>std::string<sp/>FileName<sp/>=<sp/>inputFile.substr(last_slash,<sp/>inputFile.rfind(</highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">)-last_slash);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>TFile<sp/>*f_ROOT<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TFile(<sp/>(inputFile).c_str()<sp/>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>primary<sp/>particles<sp/>(Nparticles)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nparticles<sp/>=<sp/>50000;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Nparticles<sp/>coming<sp/>from<sp/>the<sp/>scoring<sp/>of<sp/>primary<sp/>protons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingYZ_pSource<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(</highlight><highlight class="stringliteral">&quot;MappingYZ_pSrc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(MappingYZ_pSource-&gt;Integral()<sp/>!=0)<sp/>{Nparticles<sp/>=<sp/>MappingYZ_pSource-&gt;Integral();}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>proton<sp/>source<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Nparticles<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>save<sp/>histograms<sp/>in<sp/>png<sp/>or<sp/>root<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>save_root<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>save_png<sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>of<sp/>an<sp/>ADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Beam_Power<sp/><sp/>=<sp/>0.05;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>MW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Beam_Energy<sp/>=<sp/>70;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>MeV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>std::string<sp/>str_beamPower<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;50<sp/>kW_{beam}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ADS_gain=1;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>of<sp/>a<sp/>critical<sp/>reactor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bool_critical_reactor<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>core_PowerTh<sp/>=<sp/>10;<sp/></highlight><highlight class="comment">//<sp/>MW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M_qe<sp/>=<sp/>1.602176634E-19;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nu_tot<sp/>=<sp/>2.451228;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k_eff<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{str_beamPower<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10<sp/>MW_{th}&quot;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scaling_factor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scaling_rawData<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rescaling_Data<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(f_ROOT)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Gain_error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Pth_error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>Mapping_Edep<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(</highlight><highlight class="stringliteral">&quot;MappingEdep&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Histogram<sp/>of<sp/>full<sp/>energy<sp/>deposition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>To<sp/>calculate<sp/>the<sp/>error<sp/>with<sp/>the<sp/>sum<sp/>of<sp/>squares</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral<sp/>=<sp/>Mapping_Edep-&gt;IntegralAndError(0,<sp/>(Mapping_Edep-&gt;GetNbinsX()<sp/>+<sp/>1),<sp/>error,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!bool_critical_reactor)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>thermal<sp/>power<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>integral*Beam_Power/(double)(Beam_Energy*Nparticles)/1000.<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:±:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Pth_error*Beam_Power/(double)(Beam_Energy*Nparticles)/1000.<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>kW<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+str_beamPower<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADS_gain<sp/>=<sp/>integral/(double)(Beam_Energy*1E6*Nparticles)-1;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pth_error<sp/>=<sp/>TMath::Sqrt(<sp/>error/integral<sp/>*<sp/>error/integral<sp/>+<sp/>1/Nparticles)*integral;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gain_error<sp/>=<sp/>ADS_gain<sp/>*<sp/>Pth_error/integral;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ADS<sp/>gain<sp/>G<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ADS_gain<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:±:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Gain_error<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EperFission<sp/>=<sp/>nu_tot<sp/>*<sp/>integral/(double)Nparticles;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling_factor<sp/>=<sp/>core_PowerTh*1E6<sp/>/<sp/>(integral<sp/>*<sp/>M_qe);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;E<sp/>per<sp/>Fission<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>EperFission*1E-6<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MeV/fission&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;N<sp/>fission<sp/>per<sp/>second<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Nparticles<sp/>*<sp/>scaling_factor/<sp/>nu_tot<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;N<sp/>neutron<sp/>per<sp/>second<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Nparticles<sp/>*<sp/>scaling_factor<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Scaling<sp/>factor<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>scaling_factor<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;correct<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>nu_tot*core_PowerTh/(EperFission*1E-6)/Nparticles<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scaling<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling_rawData<sp/>=<sp/>scaling_factor;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scaling<sp/>of<sp/>raw<sp/>data<sp/>(ntuples<sp/>of<sp/>flux<sp/>energy<sp/>distributions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rescaling_Data<sp/><sp/>=<sp/>scaling_factor;<sp/></highlight><highlight class="comment">//<sp/>rescaling<sp/>of<sp/>scoring<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling_rawData<sp/>=<sp/>Beam_Power/(double)(Beam_Energy*M_qe*Nparticles);<sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>source<sp/>particles<sp/>per<sp/>second<sp/>-&gt;<sp/>scaling<sp/>of<sp/>raw<sp/>data<sp/>(ntuples<sp/>of<sp/>flux<sp/>energy<sp/>distributions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rescaling_Data<sp/>=<sp/>Beam_Power/(double)(Beam_Energy*M_qe*Nparticles);<sp/></highlight><highlight class="comment">//<sp/>Data<sp/>already<sp/>scaled<sp/>to<sp/>1<sp/>MW_beam<sp/>(Scoring<sp/>mesh)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>histo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>TCanvas<sp/>*histo[Nhisto];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str_CanvaName,<sp/>str_histoName,<sp/>str_cut,<sp/>str_drawOption,<sp/>str_legendHisto;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_xbin<sp/>=<sp/>100,<sp/>int_ybin<sp/>=<sp/>100,<sp/>int_zbin<sp/>=<sp/>150;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Xmin<sp/>=<sp/>-1000,<sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbl_Xmax<sp/>=<sp/><sp/>1000,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbl_Ymin<sp/>=<sp/>-1000,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbl_Ymax<sp/>=<sp/><sp/>1000,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbl_Zmin<sp/>=<sp/>-1500,<sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbl_Zmax<sp/>=<sp/><sp/>1500;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>strPhysVolNumber<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>19,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>22,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>400,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>41,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>42,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>43,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>44,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>50,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>51,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>52,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>53,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>54,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>13,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>24,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>25,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,<sp/><sp/><sp/><sp/><sp/>9,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>7<sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>10<sp/>,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>55,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>60,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>56,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>26};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>strPhysVolName<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;TargetSlab0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetTube&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Alcuts&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetWater&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fuel&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Cladding&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Water<sp/>in<sp/>core&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Be<sp/>reflector&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;StructuralMat&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;B4C<sp/>layer&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier3&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ReactorConcreteShield&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Lead&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ReactorWater&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pFetop&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BeamPipe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BeamWindow&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Reactor<sp/>vessel&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Air&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pCool7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pCool10&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Control<sp/>rods<sp/>Absorber&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pFebot&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FuelSample&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Control<sp/>rods<sp/>cladding&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CoolantTargetTube&quot;</highlight><highlight class="normal">};<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>strInteractionVolName{</highlight><highlight class="stringliteral">&quot;InPhysVol&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;OutPhysVol&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FissionVol&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CaptureVol&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;InelasticVol&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Global<sp/>style<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetOptStat(0);<sp/></highlight><highlight class="comment">//10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetStatX(1);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetStatY(1);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetStatH(0.22);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetStatW(0.26);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetLabelSize(0.04,</highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetLabelSize(0.04,</highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>gStyle-&gt;SetLabelSize(0.05,&quot;Z&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetTitleXSize(0.05);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetTitleYSize(0.05);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetTitleXOffset(0.95);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetTitleYOffset(1.20);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>gStyle-&gt;SetTitleZOffset(1.30);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadRightMargin<sp/>(0.2);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadLeftMargin<sp/><sp/>(0.2);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadBottomMargin(0.1);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadTopMargin<sp/><sp/><sp/>(0.05);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetCanvasDefH(900);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetCanvasDefW(1000);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadGridX(kTRUE);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadGridY(kTRUE);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>gStyle-&gt;SetPalette(105);<sp/>//<sp/>kThermometer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>gStyle-&gt;SetPalette(55);<sp/>//<sp/>kRainBow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="comment">//<sp/><sp/>Source<sp/>particles<sp/>position<sp/>at<sp/>birth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="212"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>YZ<sp/>mapping<sp/>for<sp/>source<sp/>particles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto=0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingYZ_pSource<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingYZ_pSource_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingYZ_pSource&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>source<sp/>particles&quot;</highlight><highlight class="normal">,<sp/>1.,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="comment">//<sp/><sp/>Energy<sp/>distribution<sp/>of<sp/>the<sp/>flux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="231"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>vec_CanvaName;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>vec_legendHeader;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>vec_FileName;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>vec_legendHisto;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>of<sp/>spectrum<sp/>to<sp/>draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>distribution<sp/>of<sp/>the<sp/>neutron<sp/>fluence<sp/>in<sp/>target<sp/>tube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceEdistribTarget<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>graph<sp/>drawing<sp/>required.<sp/>otherwise<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceEdistribBeamWindow<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>graph<sp/>drawing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>distribution<sp/>of<sp/>the<sp/>neutron<sp/>fluence<sp/>in<sp/>lead<sp/>depending<sp/>on<sp/>the<sp/>radius</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceEdistribR<sp/>=<sp/>5;<sp/></highlight><highlight class="comment">//<sp/>1-5<sp/>if<sp/>graph<sp/>drawing<sp/>required.<sp/>otherwise<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>distribution<sp/>of<sp/>the<sp/>neutron<sp/>fluence<sp/>in<sp/>fuel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceEdistribFuel<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>graph<sp/>drawing<sp/>required.<sp/>otherwise<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>distribution<sp/>of<sp/>the<sp/>neutron<sp/>fluence<sp/>in<sp/>reflector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceEdistribReflec<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>graph<sp/>drawing<sp/>required.<sp/>otherwise<sp/>0<sp/>//<sp/>Beam<sp/>window<sp/>in<sp/>Rez<sp/>geom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>distribution<sp/>of<sp/>the<sp/>neutron<sp/>fluence<sp/>in<sp/>lead<sp/>from<sp/>target<sp/>to<sp/>fuel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceEdistribLead<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>graph<sp/>drawing<sp/>required.<sp/>otherwise<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>distribution<sp/>of<sp/>the<sp/>neutron<sp/>fluence<sp/>in<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceEdistribCore<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>graph<sp/>drawing<sp/>required.<sp/>otherwise<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>distribution<sp/>of<sp/>the<sp/>neutron<sp/>fluence<sp/>in<sp/>fuel<sp/>sample<sp/>to<sp/>be<sp/>transmuted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceEdistribSpentFuel<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>graph<sp/>drawing<sp/>required.<sp/>otherwise<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>distribution<sp/>of<sp/>the<sp/>neutron<sp/>fluence<sp/>in<sp/>Fuel<sp/>from<sp/>neutrons<sp/>which<sp/>induce<sp/>fissions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceEdistribFuelFis<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>graph<sp/>drawing<sp/>required.<sp/>otherwise<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceEdistribSecondary<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceEdistribInReactorVessel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>distribution<sp/>of<sp/>the<sp/>neutron<sp/>fluence<sp/>in<sp/>Fuel<sp/>from<sp/>spallation<sp/>neutrons<sp/>which<sp/>induce<sp/>fissions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FluenceTdistribFuelFis<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>graph<sp/>drawing<sp/>required.<sp/>otherwise<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>distribution<sp/>of<sp/>source<sp/>neutrons<sp/>at<sp/>birth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dN_dlogE_N0<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>graph<sp/>drawing<sp/>is<sp/>required.<sp/>otherwise<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>distribution<sp/>of<sp/>source<sp/>neutrons<sp/>at<sp/>counting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dN_dlogE_N0count<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>graph<sp/>drawing<sp/>is<sp/>required.<sp/>otherwise<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>distribution<sp/>of<sp/>proton<sp/>source<sp/>escaping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dN_dlogE_protonEscape<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Canva<sp/>names,<sp/>file<sp/>names<sp/>and<sp/>legend<sp/>headers<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FluenceEdistribTarget<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Physical<sp/>Volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_target&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>EnergyDistribFluenceVSvolume&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_target_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Target<sp/>tube&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FluenceEdistribBeamWindow<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Physical<sp/>Volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_beamWindow&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_beamWindow_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Beam<sp/>Window&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;TMath::Min(5,<sp/>FluenceEdistribR);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Distance<sp/>from<sp/>center&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_lead&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_lead&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==0)<sp/>{vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;B4C<sp/>layer&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;AlCarrier&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i-1));}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FluenceEdistribFuel<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Physical<sp/>Volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_fuel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_fuel_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Fuel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FluenceEdistribSecondary<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Physical<sp/>Volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_secondCool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_secondCool_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Secondary<sp/>Coolant&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FluenceEdistribInReactorVessel<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Physical<sp/>Volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_inReacVes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_inReacVes_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Reactor<sp/>Vessel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FluenceEdistribReflec<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Physical<sp/>Volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_Reflec&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_Reflec_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Heat<sp/>Shield&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FluenceEdistribLead<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Physical<sp/>Volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_lead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_lead_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Lead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FluenceEdistribCore<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Physical<sp/>Volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_water&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_water_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Core&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FluenceEdistribSpentFuel<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Physical<sp/>Volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_SpentFuel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_SpentFuel_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Fuel<sp/>sample&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FluenceEdistribFuelFis<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Physical<sp/>Volume&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dN_dlogE_FuelFis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dN_dlogE_FuelFis_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Fuel<sp/>for<sp/>Fission<sp/>only&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FluenceTdistribFuelFis<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Description&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;Logt_N0_FuelFis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;Logt_N0_FuelFis_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Fission<sp/>from<sp/>source<sp/>neutrons&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dN_dlogE_N0<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Description&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dN_dlogE_N0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dN_dlogE_N0_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Energy<sp/>at<sp/>birth<sp/>of<sp/>source<sp/>neutrons&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dN_dlogE_N0count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Description&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;dN_dlogE_N0count&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;dN_dlogE_N0count_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Energy<sp/>at<sp/>birth<sp/>of<sp/>source<sp/>neutrons&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dN_dlogE_protonEscape<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHeader.push_back(</highlight><highlight class="stringliteral">&quot;Description&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_CanvaName.push_back(</highlight><highlight class="stringliteral">&quot;spectrum_protonEscape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_FileName<sp/>.push_back(</highlight><highlight class="stringliteral">&quot;spectrum_protonEscape_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_legendHisto.push_back(</highlight><highlight class="stringliteral">&quot;Energy<sp/>when<sp/>proton<sp/>escape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Histogram<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_nbins<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dbl_Emin<sp/>=<sp/>1E-5;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dbl_Emax<sp/>=<sp/>1E9;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Emin_log<sp/>=<sp/>TMath::Log10(dbl_Emin);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Emax_log<sp/>=<sp/>TMath::Log10(dbl_Emax);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ebin_width<sp/>=<sp/>(<sp/>Emax_log<sp/>-<sp/>Emin_log)<sp/>/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>int_nbins;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ebins[int_nbins<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_log;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dbl_binContent_log;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vec_CanvaName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ebins[0]<sp/>=<sp/>dbl_Emin;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>int_nbins;<sp/>++k)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ebins[k]<sp/>=<sp/>dbl_Emin<sp/>+<sp/>TMath::Power(10,<sp/>Emin_log<sp/>+<sp/>k<sp/>*<sp/>Ebin_width);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>histoFluxE_log[vec_CanvaName.size()];</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flux<sp/>energy<sp/>spectrum<sp/>drawing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>vec_CanvaName.size();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(vec_FileName[0].c_str(),vec_FileName[0].c_str());</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogx();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nhisto;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Canvas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/>new<sp/>TCanvas(vec_FileName[i].c_str(),vec_FileName[i].c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogx();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Legend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLegend<sp/>legend(0.40,0.90,0.6,1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>legend.AddEntry(histoFluxE_log[i],vec_legendHisto[i].c_str(),&quot;l&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>legend.SetHeader(vec_legendHeader[i].c_str(),&quot;C&quot;);<sp/>//<sp/>option<sp/>&quot;C&quot;<sp/>allows<sp/>to<sp/>center<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;SetNameTitle(vec_FileName[i].c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;SetBins(int_nbins,<sp/>Ebins);<sp/></highlight><highlight class="comment">//<sp/>Logarithmic<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;Sumw2(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>histoLog<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(vec_CanvaName[i].c_str());</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec_CanvaName[i]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Logt_N0_FuelFis&quot;</highlight><highlight class="normal"><sp/>||<sp/>vec_CanvaName[i]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;spectrum_protonEscape&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoLog-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoLog-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j<sp/>&lt;<sp/>histoLog-&gt;GetNbinsX();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;Fill(TMath::Power(10,<sp/>histoLog-&gt;GetXaxis()-&gt;GetBinLowEdge(j)),<sp/>histoLog-&gt;GetBinContent(j));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;Fill(TMath::Power(10,<sp/>histoLog-&gt;GetXaxis()-&gt;GetBinCenter(j)),<sp/>histoLog-&gt;GetBinContent(j)/(std::log(TMath::Power(10,<sp/>histoLog-&gt;GetXaxis()-&gt;GetBinLowEdge(j+1)))-std::log(TMath::Power(10,<sp/>histoLog-&gt;GetXaxis()-&gt;GetBinLowEdge(j)))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>d<sp/>(Phi)<sp/>/<sp/>d<sp/>(ln(E))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_histoFluxElog<sp/>=<sp/>(int)<sp/>(int_nbins<sp/>*<sp/>(histoLog-&gt;GetXaxis()-&gt;GetBinCenter(j)<sp/>-<sp/>Emin_log)<sp/>/<sp/>(Emax_log<sp/>-<sp/>Emin_log));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;SetBinError(bin_histoFluxElog,<sp/>TMath::Sqrt(<sp/>TMath::Power(histoFluxE_log[i]-&gt;GetBinError(j),2)<sp/>+<sp/>TMath::Power(histoLog-&gt;GetBinError(j)<sp/>/<sp/>(std::log(TMath::Power(10,<sp/>histoLog-&gt;GetXaxis()-&gt;GetBinLowEdge(j+1)))-std::log(TMath::Power(10,<sp/>histoLog-&gt;GetXaxis()-&gt;GetBinLowEdge(j)))),<sp/>2)));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;SetBinContent(bin_histoFluxElog,<sp/>histoFluxE_log[i]-&gt;GetBinContent(bin_histoFluxElog)<sp/>+<sp/>histoLog-&gt;GetBinContent(j)<sp/>/<sp/>(std::log(TMath::Power(10,<sp/>histoLog-&gt;GetXaxis()-&gt;GetBinLowEdge(j+1)))-std::log(TMath::Power(10,<sp/>histoLog-&gt;GetXaxis()-&gt;GetBinLowEdge(j)))));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Neutron<sp/>flux<sp/>Phi_n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;SetBinError(bin_histoFluxElog,<sp/>TMath::Sqrt(<sp/>TMath::Power(histoFluxE_log[i]-&gt;GetBinError(j),2)<sp/>+<sp/>TMath::Power(histoLog-&gt;GetBinError(j),<sp/>2)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;SetBinContent(bin_histoFluxElog,<sp/>histoFluxE_log[i]-&gt;GetBinContent(bin_histoFluxElog)<sp/>+<sp/>histoLog-&gt;GetBinContent(j));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;Fill(TMath::Power(10,<sp/>histoLog-&gt;GetXaxis()-&gt;GetBinCenter(j)),<sp/>histoLog-&gt;GetBinContent(j));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec_CanvaName[i]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Logt_N0_FuelFis&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Time<sp/>[s]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Fissions<sp/>per<sp/>proton&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec_CanvaName[i]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;spectrum_protonEscape&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Neutron<sp/>Energy<sp/>[eV]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Escaped<sp/>Proton<sp/>/<sp/>Source<sp/>Proton&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Neutron<sp/>Energy<sp/>[eV]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;GetYaxis()-&gt;SetTitle(<sp/>&quot;Neutron<sp/>fluence<sp/>[cm^{-2}.s^{-1}]<sp/>at<sp/>50<sp/>kW_{beam}&quot;)<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;GetYaxis()-&gt;SetTitle(<sp/>(</highlight><highlight class="stringliteral">&quot;d{Phi}/d(ln(E))<sp/>[cm^{-2}.s^{-1}]<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str())<sp/>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;GetYaxis()-&gt;SetTitle(<sp/>&quot;d{Fluence}/d(ln(E))<sp/>[cm^{-2}.Primaries^{-1}]&quot;)<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;SetLineColorAlpha(i+1,<sp/>1);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;SetLineWidth(2);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>i==0)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>e<sp/>SAME&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>legend.Draw();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((vec_FileName[i]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoFluxE_log[i]-&gt;Write();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((vec_FileName[i]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error_integral<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral_th<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error_integral_th<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral_fast<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error_integral_fast<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>thermal<sp/>and<sp/>fast<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Emax_th<sp/>=<sp/>0.2;<sp/></highlight><highlight class="comment">//<sp/>eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Emin_fast<sp/>=<sp/>1E5;<sp/></highlight><highlight class="comment">//<sp/>eV<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j<sp/>&lt;<sp/>histoFluxE_log[i]-&gt;GetNbinsX();<sp/>++j)<sp/>{<sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/><sp/><sp/><sp/><sp/>=<sp/>histoFluxE_log[i]-&gt;GetBinError<sp/><sp/>(j)<sp/>*<sp/>(std::log(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j+1))-std::log(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j)));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>d<sp/>(Phi)<sp/>/<sp/>d<sp/>(ln(E))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integral<sp/>+=<sp/>histoFluxE_log[i]-&gt;GetBinContent(j)<sp/>*<sp/>(std::log(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j+1))-std::log(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j)));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_integral<sp/>=<sp/>std::sqrt(<sp/>error_integral*error_integral<sp/>+<sp/>error*error);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j)<sp/>&lt;<sp/>Emax_th)<sp/>{</highlight><highlight class="comment">//<sp/>If<sp/>thermal<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integral_th<sp/>+=<sp/>histoFluxE_log[i]-&gt;GetBinContent(j)<sp/>*<sp/>(std::log(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j+1))-std::log(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j)));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_integral_th<sp/>=<sp/>std::sqrt(<sp/>error_integral_th*error_integral_th<sp/>+<sp/>error*error);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j+1)<sp/>&gt;<sp/>Emin_fast)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>fast<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integral_fast<sp/>+=<sp/>histoFluxE_log[i]-&gt;GetBinContent(j)<sp/>*<sp/>(std::log(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j+1))-std::log(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j)));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_integral_fast<sp/>=<sp/>std::sqrt(<sp/>error_integral_fast*error_integral_fast<sp/>+<sp/>error*error);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Neutron<sp/>flux<sp/>Phi_n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integral<sp/>+=<sp/>histoFluxE_log[i]-&gt;GetBinContent(j);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j)<sp/>&lt;<sp/>Emax_th)<sp/>//<sp/>If<sp/>thermal<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integral_th<sp/>+=<sp/>histoFluxE_log[i]-&gt;GetBinContent(j);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(histoFluxE_log[i]-&gt;GetXaxis()-&gt;GetBinLowEdge(j+1)<sp/>&gt;<sp/>Emin_fast)<sp/>//<sp/>if<sp/>fast<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integral_fast<sp/>+=<sp/>histoFluxE_log[i]-&gt;GetBinContent(j);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vec_CanvaName[i].compare(</highlight><highlight class="stringliteral">&quot;dFlux_dlogE_lead&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i))<sp/>==<sp/>0<sp/>)<sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>Flux<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec_legendHisto[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>lead<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>integral<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error_integral<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>cm^{-2}.s^{-1}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tThermal<sp/>neutron<sp/>Flux<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec_legendHisto[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>lead<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>integral_th<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error_integral_th<sp/><sp/><sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>cm^{-2}.s^{-1}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFast<sp/><sp/><sp/><sp/>neutron<sp/>Flux<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec_legendHisto[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>lead<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>integral_fast<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error_integral_fast<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>cm^{-2}.s^{-1}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec_CanvaName[i]<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;Logt_N0_FuelFis&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>Flux<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec_legendHisto[i]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>integral<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error_integral<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>cm^{-2}.s^{-1}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tThermal<sp/>neutron<sp/>Flux<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec_legendHisto[i]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>integral_th<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error_integral_th<sp/><sp/><sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>cm^{-2}.s^{-1}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFast<sp/><sp/><sp/><sp/>neutron<sp/>Flux<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec_legendHisto[i]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>integral_fast<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error_integral_fast<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>cm^{-2}.s^{-1}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="490"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Energy<sp/>released<sp/>by<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="494"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;std::string&gt;<sp/>vec_2DhistoName<sp/>{</highlight><highlight class="stringliteral">&quot;d2N_dlogElogTime_n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d2N_dlogElogTime_g&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d2N_dlogElogTime_fission&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d2N_dlogElogTime_tot&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d2N_dlogElogTime_others&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d2N_dlogElogTime_FFe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d2N_dlogElogTime_FFn&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d2N_dlogElogTime_FFg&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;d2N_dlogElogTime_FFothers&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;d2N_dlogElogTime_FFantiNu&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;std::string&gt;<sp/>vec_1DhistoName<sp/>{&quot;dN_EdlogE_n&quot;,<sp/>&quot;dN_EdlogE_g&quot;,<sp/>&quot;dN_EdlogE_fission&quot;,<sp/>&quot;dN_EdlogE_tot&quot;};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;std::string&gt;<sp/>vec_2DhistoLinName{</highlight><highlight class="stringliteral">&quot;dN_dlogElogTime_n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dN_dlogElogTime_g&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dN_dlogElogTime_fission&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dN_dlogElogTime_tot&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dN_dlogElogTime_others&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dN_dlogElogTime_FFe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dN_dlogElogTime_FFn&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dN_dlogElogTime_FFg&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dN_dlogElogTime_FFothers&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dN_dlogElogTime_FFantiNu&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>vec_2DhistoName.size();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>histEfission[Nhisto];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>histEfission[Nhisto];</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nhisto;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Canvas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/>new<sp/>TCanvas(vec_1DhistoName[i].c_str(),vec_1DhistoName[i].c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(vec_2DhistoLinName[i].c_str(),vec_2DhistoLinName[i].c_str());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogx();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>histo2DLog<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(vec_2DhistoName[i].c_str());</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Histogram<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_nbins<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbl_Emin<sp/>=<sp/>std::pow(10,histo2DLog-&gt;GetYaxis()-&gt;GetBinLowEdge(1));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbl_Emax<sp/>=<sp/>std::pow(10,histo2DLog-&gt;GetYaxis()-&gt;GetBinLowEdge(histo2DLog-&gt;GetNbinsY()));</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Emin_log<sp/>=<sp/>TMath::Log10(dbl_Emin);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Emax_log<sp/>=<sp/>TMath::Log10(dbl_Emax);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ebin_width<sp/>=<sp/>(<sp/>Emax_log<sp/>-<sp/>Emin_log)<sp/>/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>int_nbins;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Etbins[int_nbins<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Etbins[0]<sp/>=<sp/>dbl_Emin;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>int_nbins;<sp/>++k)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Etbins[k]<sp/>=<sp/>dbl_Emin<sp/>+<sp/>TMath::Power(10,<sp/>Emin_log<sp/>+<sp/>k<sp/>*<sp/>Ebin_width);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_nbinst<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dbl_tmin<sp/>=<sp/>std::pow(10,histo2DLog-&gt;GetXaxis()-&gt;GetBinLowEdge(1));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dbl_tmax<sp/>=<sp/>std::pow(10,histo2DLog-&gt;GetXaxis()-&gt;GetBinLowEdge(histo2DLog-&gt;GetNbinsX()));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmin_log<sp/>=<sp/>TMath::Log10(dbl_tmin);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmax_log<sp/>=<sp/>TMath::Log10(dbl_tmax);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tbin_width<sp/>=<sp/>(<sp/>tmax_log<sp/>-<sp/>tmin_log)<sp/>/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>int_nbinst;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tbins[int_nbins<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tbins[0]<sp/>=<sp/>dbl_tmin;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>int_nbinst;<sp/>++k)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tbins[k]<sp/>=<sp/>dbl_tmin<sp/>+<sp/>TMath::Power(10,<sp/>tmin_log<sp/>+<sp/>k<sp/>*<sp/>tbin_width);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]<sp/>=<sp/>new<sp/>TH1D;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;SetNameTitle(vec_1DhistoName[i].c_str(),<sp/>&quot;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;SetBins(int_nbins,<sp/>Etbins);<sp/>//<sp/>Logarithmic<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH2D(vec_2DhistoLinName[i].c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>int_nbinst,<sp/>dbl_tmin,<sp/>dbl_tmax,<sp/>int_nbins,<sp/>dbl_Emin,<sp/>dbl_Emax);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]<sp/>=<sp/>new<sp/>TH2D;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;SetNameTitle(vec_2DhistoLinName[i].c_str(),<sp/>&quot;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;SetBins(int_nbinst,<sp/>tbins,<sp/>int_nbins,<sp/>Etbins);<sp/>//<sp/>Logarithmic<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;Sumw2(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>histoLog<sp/>=<sp/>histo2DLog-&gt;ProjectionY();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>j=1;<sp/>j<sp/>&lt;<sp/>histoLog-&gt;GetNbinsX();<sp/>++j)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j<sp/>&lt;<sp/>histo2DLog-&gt;GetNbinsX();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=1;<sp/>k<sp/>&lt;<sp/>histo2DLog-&gt;GetNbinsY();<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;Fill(TMath::Power(10,<sp/>histo2DLog-&gt;GetXaxis()-&gt;GetBinLowEdge(j)),<sp/></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TMath::Power(10,<sp/>histo2DLog-&gt;GetYaxis()-&gt;GetBinLowEdge(k)),<sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo2DLog-&gt;GetBinContent(j,k));</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;Fill(TMath::Power(10,<sp/>histoLog-&gt;GetXaxis()-&gt;GetBinLowEdge(j)),<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histoLog-&gt;GetBinContent(j)/TMath::Power(10,<sp/>histoLog-&gt;GetXaxis()-&gt;GetBinLowEdge(j)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;Scale(scaling_rawData);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Time<sp/>[s]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Energy<sp/>[eV]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;GetZaxis()-&gt;SetTitle(<sp/>(</highlight><highlight class="stringliteral">&quot;d^{2}N/d(log_{10}(E))/d(log_{10}(t))<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str())<sp/>;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;GetXaxis()-&gt;SetTitle(&quot;Neutron<sp/>Energy<sp/>[eV]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;GetYaxis()-&gt;SetTitle(<sp/>&quot;dN/Ed(log_{10}(E))<sp/>[eV^{-1}]<sp/>at<sp/>50<sp/>kW_{beam}&quot;)<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;Draw(&quot;HIST<sp/>e&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histEfission[i]-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((vec_1DhistoName[i]<sp/>+<sp/>&quot;.root&quot;).c_str());}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((vec_1DhistoName[i]<sp/>+<sp/>&quot;.png&quot;).c_str());}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((vec_2DhistoLinName[i]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((vec_2DhistoLinName[i]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>vec_1DhistoName[i]<sp/>&lt;&lt;<sp/>&quot;<sp/>Mean<sp/>Energy<sp/>[MeV]<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>histEfission[i]-&gt;GetMean()/1000000.<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>vec_2DhistoLinName[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Mean<sp/>Energy<sp/>[MeV]<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>histEfission[i]-&gt;GetMean(2)/1000000.<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Emin<sp/>=<sp/>1E-3;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Emax<sp/>=<sp/>1E5;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>Emin_log<sp/>=<sp/>TMath::Log10(dbl_Emin);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>Emax_log<sp/>=<sp/>TMath::Log10(dbl_Emax);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>Ebin_width<sp/>=<sp/>(<sp/>Emax_log<sp/>-<sp/>Emin_log)<sp/>/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>int_nbins;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>Ebins[0]<sp/>=<sp/>dbl_Emin;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>int_nbins;<sp/>++k)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ebins[k]<sp/>=<sp/>dbl_Emin<sp/>+<sp/>TMath::Power(10,<sp/>Emin_log<sp/>+<sp/>k<sp/>*<sp/>Ebin_width);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>deposit<sp/>(whatever<sp/>the<sp/>particle)<sp/>in<sp/>volume<sp/>of<sp/>interest<sp/>/cm^{3}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>MappingVol_Edep<sp/>=<sp/>GetAndDraw1D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingVol_Edep_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingVol_Edep&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Volume<sp/>number&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Power<sp/>deposition<sp/>[W<sp/>/<sp/>cm^{3}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower,<sp/>rescaling_Data<sp/>*<sp/>M_qe,<sp/></highlight><highlight class="stringliteral">&quot;HIST<sp/>e&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Printing<sp/>Volumic<sp/>thermal<sp/>Power<sp/>in<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n****<sp/>Volumic<sp/>thermal<sp/>Power<sp/>****&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>MappingVol_Edep-&gt;GetNbinsX();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>MappingVol_Edep-&gt;GetBinContent(i)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>(int)<sp/>MappingVol_Edep-&gt;GetBinLowEdge(i)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find<sp/>(strPhysVolNumber.begin(),<sp/>strPhysVolNumber.end(),<sp/>bin);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>strPhysVolNumber.end())</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>strPhysVolName[std::distance(strPhysVolNumber.begin(),<sp/>it)]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>MappingVol_Edep-&gt;GetBinContent(i)<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>:W<sp/>/<sp/>cm^{3}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin<sp/>&gt;=<sp/>60<sp/>&amp;&amp;<sp/>bin<sp/>&lt;=<sp/>123)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SpentFuel<sp/>:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>MappingVol_Edep-&gt;GetBinContent(i)<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>:W<sp/>/<sp/>cm^{3}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin<sp/>&gt;=<sp/>400<sp/>&amp;&amp;<sp/>bin<sp/>&lt;=<sp/>500)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fuel&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>400<sp/>-<sp/>bin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>MappingVol_Edep-&gt;GetBinContent(i)<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>:W<sp/>/<sp/>cm^{3}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>bin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>MappingVol_Edep-&gt;GetBinContent(i)<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>:W<sp/>/<sp/>cm^{3}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>deposition<sp/>(whatever<sp/>the<sp/>particle)<sp/>in<sp/>volume<sp/>of<sp/>interest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>Mapping_Edep<sp/>=<sp/>GetAndDraw1D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingEdep_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingEdep&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Volume<sp/>number&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Power<sp/>deposition<sp/>[W]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower,<sp/>rescaling_Data<sp/>*<sp/>M_qe,<sp/></highlight><highlight class="stringliteral">&quot;HIST<sp/>e&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Printing<sp/>thermal<sp/>Power<sp/>in<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Sum2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_Pth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Pth_device<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>MappingEdep_square<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(&quot;MappingEdep_square&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>N_entries<sp/>=<sp/>MappingEdep_square-&gt;GetEntries();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>N_entries<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>MappingEdep_N<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(&quot;MappingEdep_N&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingEdep_square-&gt;Scale(<sp/>*<sp/>Beam_Power/(double)Nparticles);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n****<sp/>Thermal<sp/>Power<sp/>****&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>Mapping_Edep-&gt;GetNbinsX();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>Mapping_Edep-&gt;GetBinContent(i)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>(int)<sp/>Mapping_Edep-&gt;GetBinLowEdge(i)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find<sp/>(strPhysVolNumber.begin(),<sp/>strPhysVolNumber.end(),<sp/>bin);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>strPhysVolNumber.end())</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>strPhysVolName[std::distance(strPhysVolNumber.begin(),<sp/>it)]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Mapping_Edep-&gt;GetBinContent(i)<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>:W<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin<sp/>&gt;=<sp/>60<sp/>&amp;&amp;<sp/>bin<sp/>&lt;=<sp/>123)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SpentFuel<sp/>:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Mapping_Edep-&gt;GetBinContent(i)<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>:W<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin<sp/>&gt;=<sp/>400<sp/>&amp;&amp;<sp/>bin<sp/>&lt;=<sp/>500)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fuel&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>400<sp/>-<sp/>bin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Mapping_Edep-&gt;GetBinContent(i)<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>:W<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>bin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Mapping_Edep-&gt;GetBinContent(i)<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>:W<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(bin<sp/>&gt;=<sp/>14<sp/>&amp;&amp;<sp/>bin<sp/>&lt;=<sp/>25)<sp/>||<sp/><sp/>bin<sp/>==<sp/>5<sp/>||<sp/>bin<sp/>==<sp/>7<sp/>||<sp/>(bin<sp/>&gt;=<sp/>400<sp/>&amp;&amp;<sp/>bin<sp/>&lt;=<sp/>500)<sp/>||<sp/>(bin<sp/>&gt;=<sp/>40<sp/>&amp;&amp;<sp/>bin<sp/>&lt;=<sp/>44)<sp/>||<sp/>(bin<sp/>&gt;=<sp/>50<sp/>&amp;&amp;<sp/>bin<sp/>&lt;=<sp/>55))</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pth_device<sp/>+=<sp/>Mapping_Edep-&gt;GetBinContent(i);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_Pth<sp/>+=<sp/>Mapping_Edep-&gt;GetBinContent(i);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum2<sp/>+=<sp/>MappingEdep_square-&gt;GetBinContent(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_entries<sp/>+=<sp/>MappingEdep_N-&gt;GetBinContent(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>i<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>Content<sp/>N<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>MappingEdep_N-&gt;GetBinContent(i)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>i<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>Content<sp/>N<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>MappingEdep_square-&gt;GetBinContent(i)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>To<sp/>calculate<sp/>the<sp/>error<sp/>with<sp/>the<sp/>sum<sp/>of<sp/>squares</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral<sp/>=<sp/>Mapping_Edep-&gt;IntegralAndError(0,<sp/>(Mapping_Edep-&gt;GetNbinsX()<sp/>+<sp/>1),<sp/>error,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;N_entries<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>N_entries<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>total_Pth<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>Sum2<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>total_Pth*total_Pth/N_entries<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(Sum2<sp/>-<sp/>total_Pth*total_Pth/N_entries)<sp/>/<sp/>(N_entries<sp/>-<sp/>1)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>TMath::Sqrt(<sp/>(Sum2<sp/>-<sp/>total_Pth*total_Pth/N_entries)<sp/>/<sp/>(N_entries<sp/>-<sp/>1)<sp/>)/1000.<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;****<sp/>Total<sp/>thermal<sp/>power<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>total_Pth/1000.<sp/>/*&lt;&lt;<sp/>&quot;:±:&quot;<sp/>&lt;&lt;<sp/>TMath::Sqrt(<sp/>(-Sum2<sp/>-<sp/>total_Pth*total_Pth/N_entries)<sp/>/<sp/>(N_entries<sp/>-<sp/>1)<sp/>)/1000.*/<sp/>&lt;&lt;<sp/>&quot;<sp/>:kW<sp/>@<sp/>50<sp/>kW_{beam}&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Thermal<sp/>power<sp/>in<sp/>the<sp/>device<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Pth_device<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>:W<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Total<sp/>thermal<sp/>power<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>integral<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>:W<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="686"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>Gain_error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="687"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>Pth_error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="688"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(Nhisto&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="690"><highlight class="comment">//<sp/>//<sp/>To<sp/>calculate<sp/>the<sp/>error<sp/>with<sp/>the<sp/>sum<sp/>of<sp/>squares</highlight></codeline>
<codeline lineno="691"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="692"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>integral<sp/>=<sp/>Mapping_Edep-&gt;IntegralAndError(0,<sp/>(Mapping_Edep-&gt;GetNbinsX()<sp/>+<sp/>1),<sp/>error,<sp/>&quot;&quot;)/1000.;</highlight></codeline>
<codeline lineno="693"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pth_error<sp/>=<sp/>TMath::Sqrt(<sp/>error/1000./integral<sp/>*<sp/>error/1000./integral<sp/>+<sp/>1/Nparticles)*integral;</highlight></codeline>
<codeline lineno="694"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Total<sp/>thermal<sp/>power<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>integral<sp/>&lt;&lt;<sp/>&quot;:±:&quot;<sp/>&lt;&lt;<sp/>Pth_error<sp/>&lt;&lt;<sp/>&quot;:<sp/>kW<sp/>@<sp/>50<sp/>kW_{beam}\n&quot;<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="695"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADS_gain<sp/>=<sp/>integral/(1000*Beam_Power)-1;</highlight></codeline>
<codeline lineno="696"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gain_error<sp/>=<sp/>ADS_gain<sp/>*<sp/>Pth_error/integral;</highlight></codeline>
<codeline lineno="697"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="698"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling_factor<sp/>=<sp/>nu_tot<sp/>*<sp/>core_PowerTh*1E6<sp/>/<sp/>(integral*1000.<sp/>*<sp/>M_qe);</highlight></codeline>
<codeline lineno="699"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;ADS<sp/>gain<sp/>G<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>ADS_gain<sp/>&lt;&lt;<sp/>&quot;:±:&quot;<sp/>&lt;&lt;<sp/>Gain_error<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="701"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="702"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;N<sp/>fission<sp/>per<sp/>second<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>scaling_factor/nu_tot<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="703"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;N<sp/>neutron<sp/>per<sp/>second<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>scaling_factor<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="704"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XY<sp/>of<sp/>energy<sp/>deposition<sp/>in<sp/>volume<sp/>of<sp/>interest<sp/>between<sp/>Z<sp/>=<sp/>-126<sp/>mm<sp/>and<sp/>Z<sp/>=<sp/>+126<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXY_Edep<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_Edeposit_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_Edeposit&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Power<sp/>deposition<sp/>density<sp/>[W<sp/>/<sp/>cm^{3}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower,<sp/>rescaling_Data<sp/>*<sp/>M_qe,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binX_max,<sp/>binY_max,<sp/>binZ_max;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Power<sp/>deposition<sp/>maximum<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MappingXY_Edep-&gt;GetBinContent(MappingXY_Edep-&gt;GetMaximumBin(binX_max,<sp/>binY_max,<sp/>binZ_max))<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>W<sp/>/<sp/>cm^{3}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>position<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MappingXY_Edep-&gt;GetXaxis()-&gt;GetBinCenter(binX_max)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mm;<sp/>Y<sp/>position<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MappingXY_Edep-&gt;GetYaxis()-&gt;GetBinCenter(binY_max)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mm&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbinsX<sp/>=<sp/>MappingXY_Edep-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbinsY<sp/>=<sp/>MappingXY_Edep-&gt;GetNbinsY();</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minX<sp/>=<sp/>MappingXY_Edep-&gt;GetXaxis()-&gt;GetBinLowEdge(1);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxX<sp/>=<sp/>MappingXY_Edep-&gt;GetXaxis()-&gt;GetBinLowEdge(nbinsX+1);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minY<sp/>=<sp/>MappingXY_Edep-&gt;GetYaxis()-&gt;GetBinLowEdge(1);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxY<sp/>=<sp/>MappingXY_Edep-&gt;GetYaxis()-&gt;GetBinLowEdge(nbinsY+1);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>binX_length<sp/>=<sp/>(<sp/>maxX<sp/>-<sp/>minX<sp/>)<sp/>/<sp/>nbinsX;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>binY_length<sp/>=<sp/>(<sp/>maxY<sp/>-<sp/>minY<sp/>)<sp/>/<sp/>nbinsY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;nbinsX<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>nbinsX<sp/>&lt;&lt;<sp/>&quot;<sp/>minX<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>minX<sp/>&lt;&lt;<sp/>&quot;<sp/>maxX<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>maxX<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;nbinsY<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>nbinsY<sp/>&lt;&lt;<sp/>&quot;<sp/>minY<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>minY<sp/>&lt;&lt;<sp/>&quot;<sp/>maxY<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>maxY<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;binX<sp/>length<sp/>&quot;<sp/>&lt;&lt;<sp/>(<sp/>maxX<sp/>-<sp/>minX<sp/>)<sp/>/<sp/>nbinsX<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;binY<sp/>length<sp/>&quot;<sp/>&lt;&lt;<sp/>(<sp/>maxY<sp/>-<sp/>minY<sp/>)<sp/>/<sp/>nbinsY<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Mean<sp/>Power<sp/>Density<sp/>[W/cm^3]<sp/>@<sp/>50<sp/>kW_beam&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>B<sp/>C<sp/>D<sp/>E<sp/>F<sp/>G<sp/>H&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pitch<sp/>=<sp/>71.5;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>4;<sp/>row&gt;-6;<sp/>--row)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>row+6<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>column<sp/>=<sp/>-4;<sp/>column&lt;4;<sp/>++column)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(int)((column*pitch)/binX_length)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(int)((row<sp/><sp/><sp/>*pitch)/binY_length)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>column<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>row<sp/>&lt;&lt;<sp/>&quot;)<sp/>:<sp/>minX<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>MappingXY_Edep-&gt;GetXaxis()-&gt;GetBinLowEdge(<sp/>MappingXY_Edep-&gt;GetXaxis()-&gt;FindBin(column*pitch)+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>minY<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>MappingXY_Edep-&gt;GetYaxis()-&gt;GetBinLowEdge(<sp/>MappingXY_Edep-&gt;GetXaxis()-&gt;FindBin(row*pitch)+1)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error<sp/>=0;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binXmin<sp/>=<sp/>MappingXY_Edep-&gt;GetXaxis()-&gt;FindBin(<sp/>column<sp/><sp/><sp/>*pitch);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binXmax<sp/>=<sp/>MappingXY_Edep-&gt;GetXaxis()-&gt;FindBin((column+1)*pitch)-1;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binYmin<sp/>=<sp/>MappingXY_Edep-&gt;GetYaxis()-&gt;FindBin(<sp/>row<sp/><sp/><sp/><sp/><sp/><sp/>*pitch);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binYmax<sp/>=<sp/>MappingXY_Edep-&gt;GetYaxis()-&gt;FindBin((row<sp/><sp/><sp/>+1)*pitch)-1;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;binXmin<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>binXmin<sp/>&lt;&lt;<sp/>&quot;<sp/>binXmax<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>binXmax<sp/>&lt;&lt;<sp/>&quot;<sp/>binYmin<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>binYmin<sp/>&lt;&lt;<sp/>&quot;<sp/>binYmax<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>binYmax<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>MappingXY_Edep-&gt;IntegralAndError(binXmin,<sp/>binXmax,<sp/>binYmin,<sp/>binYmax,<sp/>error)<sp/>/<sp/>(<sp/>(binXmax-binXmin+1)<sp/>*<sp/>(binYmax-binYmin+1)<sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>+-<sp/>&quot;<sp/>&lt;&lt;<sp/>error/((binXmax-binXmin)<sp/>*<sp/>(binYmax-binYmin))<sp/>&lt;&lt;<sp/>(&quot;<sp/>W<sp/>/<sp/>cm^{3}<sp/>@<sp/>&quot;<sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>&quot;\t&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>Mean<sp/>Power<sp/>Density<sp/>[W/cm^3]<sp/>@<sp/>50<sp/>kW_beam&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>B<sp/>C<sp/>D<sp/>E<sp/>F<sp/>G<sp/>H&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>4;<sp/>row&gt;-6;<sp/>--row)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>row+6<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>column<sp/>=<sp/>-4;<sp/>column&lt;4;<sp/>++column)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error<sp/>=0;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binXmin<sp/>=<sp/>MappingXY_Edep-&gt;GetXaxis()-&gt;FindBin(<sp/>column<sp/><sp/><sp/>*pitch);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binXmax<sp/>=<sp/>MappingXY_Edep-&gt;GetXaxis()-&gt;FindBin((column+1)*pitch)-1;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binYmin<sp/>=<sp/>MappingXY_Edep-&gt;GetYaxis()-&gt;FindBin(<sp/>row<sp/><sp/><sp/><sp/><sp/><sp/>*pitch);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binYmax<sp/>=<sp/>MappingXY_Edep-&gt;GetYaxis()-&gt;FindBin((row<sp/><sp/><sp/>+1)*pitch)-1;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_Edep-&gt;IntegralAndError(binXmin,<sp/>binXmax,<sp/>binYmin,<sp/>binYmax,<sp/>error);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>error/((binXmax-binXmin+1)<sp/>*<sp/>(binYmax-binYmin+1))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_Edep-&gt;GetXaxis()-&gt;SetRange(1,nbinsX);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_Edep-&gt;GetYaxis()-&gt;SetRange(1,nbinsY);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XZ<sp/>of<sp/>energy<sp/>deposition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXZ_Edeposit<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_Edep_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_Edep&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Power<sp/>deposition<sp/>density<sp/>[W<sp/>/<sp/>cm^{3}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower,<sp/>rescaling_Data<sp/>*<sp/>M_qe,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_Edeposit-&gt;SetAxisRange(dbl_Emin,dbl_Emax,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_Edeposit-&gt;GetZaxis()-&gt;SetTitleOffset(1.5);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binX_max,<sp/>binY_max,<sp/>binZ_max;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Power<sp/>deposition<sp/>XZ<sp/>maximum<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MappingXZ_Edeposit-&gt;GetBinContent(MappingXZ_Edeposit-&gt;GetMaximumBin(binX_max,<sp/>binY_max,<sp/>binZ_max))<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>W<sp/>/<sp/>cm^{3}<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>position<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MappingXZ_Edeposit-&gt;GetXaxis()-&gt;GetBinCenter(binX_max)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mm;<sp/>Z<sp/>position<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MappingXZ_Edeposit-&gt;GetYaxis()-&gt;GetBinCenter(binY_max)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mm&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XY<sp/>of<sp/>energy<sp/>deposition<sp/>of<sp/>protons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXY_Edep<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_Edep_p_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_Edep_p&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;proton<sp/>Power<sp/>deposition<sp/>density<sp/>[W<sp/>/<sp/>cm^{3}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower,<sp/>rescaling_Data<sp/>*<sp/>M_qe,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_Edep-&gt;SetAxisRange(dbl_Emin,dbl_Emax,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XY<sp/>of<sp/>energy<sp/>deposition<sp/>of<sp/>gamma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXY_Edep<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_Edep_g_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_Edep_g&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gamma<sp/>Power<sp/>deposition<sp/>density<sp/>[W<sp/>/<sp/>cm^{3}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower,<sp/>rescaling_Data<sp/>*<sp/>M_qe,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_Edep-&gt;SetAxisRange(dbl_Emin,dbl_Emax,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XY<sp/>of<sp/>energy<sp/>deposition<sp/>of<sp/>source<sp/>protons<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXY_Edep<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_Ede_ppSrc_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_Ede_ppSrc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;p_src<sp/>Power<sp/>deposition<sp/>density<sp/>[W<sp/>/<sp/>cm^{3}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower,<sp/>rescaling_Data<sp/>*<sp/>M_qe,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_Edep-&gt;SetAxisRange(dbl_Emin,dbl_Emax,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="comment">//<sp/><sp/>Flux<sp/>histograms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="818"><highlight class="comment"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Neutron<sp/>fluence<sp/>XY<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXY_FluxN;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_FluxN<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_FluxN_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_FluxN&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower,<sp/>rescaling_Data,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_FluxN-&gt;SetAxisRange(1e11,3.5e14,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Neutron<sp/>radial<sp/>fluence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_rbin<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_NbinX<sp/>=<sp/>MappingXY_FluxN-&gt;GetNbinsX(),<sp/>int_NbinY<sp/>=<sp/>MappingXY_FluxN-&gt;GetNbinsY();</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Xpos,<sp/>Ypos;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Rmax<sp/>=<sp/>TMath::Min(TMath::Abs(MappingXY_FluxN-&gt;GetXaxis()-&gt;GetBinCenter(1)),<sp/></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TMath::Min(<sp/>MappingXY_FluxN-&gt;GetXaxis()-&gt;GetBinCenter(int_NbinX),<sp/></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_FluxN-&gt;GetYaxis()-&gt;GetBinCenter(int_NbinY)));</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Radial_FluxN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>RadialFlux<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>int_rbin,<sp/>0,<sp/>Rmax);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>RadialCount<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(</highlight><highlight class="stringliteral">&quot;counts&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>int_rbin,<sp/>0,<sp/>Rmax);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadialFlux-&gt;GetYaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Neutron<sp/>Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadialFlux-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Radius<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i&lt;=int_NbinX;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xpos<sp/>=<sp/>MappingXY_FluxN-&gt;GetXaxis()-&gt;GetBinCenter(i);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xpos<sp/>=<sp/>MappingXY_FluxN-&gt;GetXaxis()-&gt;GetBinLowEdge(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j&lt;=int_NbinY;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ypos<sp/>=<sp/>MappingXY_FluxN-&gt;GetYaxis()-&gt;GetBinCenter(j);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ypos<sp/>=<sp/>MappingXY_FluxN-&gt;GetYaxis()-&gt;GetBinLowEdge(j);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadialFlux-&gt;Fill(TMath::Sqrt(Xpos*Xpos<sp/>+<sp/>Ypos*Ypos),<sp/>MappingXY_FluxN-&gt;GetBinContent(MappingXY_FluxN-&gt;GetBin(i,j)));</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadialCount-&gt;Fill(TMath::Sqrt(Xpos*Xpos<sp/>+<sp/>Ypos*Ypos));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadialFlux-&gt;Divide(RadialCount);<sp/><sp/></highlight><highlight class="comment">//<sp/>Mean<sp/>flux<sp/>for<sp/>each<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadialFlux-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Neutron<sp/>fluence<sp/>XZ<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXZ_FluxN;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_FluxN<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_FluxN_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_FluxN&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower,<sp/>rescaling_Data,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_FluxN-&gt;SetAxisRange(1e11,3.5e14,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gamma<sp/>fluence<sp/>XY<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXY_FluxG<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_FluxG_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_FluxG&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Gamma<sp/>Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower,<sp/>rescaling_Data,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_FluxG-&gt;SetAxisRange(1e10,1e15,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbinsX<sp/>=<sp/>MappingXY_FluxG-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbinsY<sp/>=<sp/>MappingXY_FluxG-&gt;GetNbinsY();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minX<sp/>=<sp/>MappingXY_FluxG-&gt;GetXaxis()-&gt;GetBinLowEdge(1);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxX<sp/>=<sp/>MappingXY_FluxG-&gt;GetXaxis()-&gt;GetBinLowEdge(nbinsX+1);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minY<sp/>=<sp/>MappingXY_FluxG-&gt;GetYaxis()-&gt;GetBinLowEdge(1);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxY<sp/>=<sp/>MappingXY_FluxG-&gt;GetYaxis()-&gt;GetBinLowEdge(nbinsY+1);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>binX_length<sp/>=<sp/>(<sp/>maxX<sp/>-<sp/>minX<sp/>)<sp/>/<sp/>nbinsX;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>binY_length<sp/>=<sp/>(<sp/>maxY<sp/>-<sp/>minY<sp/>)<sp/>/<sp/>nbinsY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;nbinsX<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>nbinsX<sp/>&lt;&lt;<sp/>&quot;<sp/>minX<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>minX<sp/>&lt;&lt;<sp/>&quot;<sp/>maxX<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>maxX<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;nbinsY<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>nbinsY<sp/>&lt;&lt;<sp/>&quot;<sp/>minY<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>minY<sp/>&lt;&lt;<sp/>&quot;<sp/>maxY<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>maxY<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;binX<sp/>length<sp/>&quot;<sp/>&lt;&lt;<sp/>(<sp/>maxX<sp/>-<sp/>minX<sp/>)<sp/>/<sp/>nbinsX<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;binY<sp/>length<sp/>&quot;<sp/>&lt;&lt;<sp/>(<sp/>maxY<sp/>-<sp/>minY<sp/>)<sp/>/<sp/>nbinsY<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;Mean<sp/>Gamma<sp/>Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal">+<sp/>str_beamPower).c_str()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>B<sp/>C<sp/>D<sp/>E<sp/>F<sp/>G<sp/>H&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pitch<sp/>=<sp/>71.5;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>4;<sp/>row&gt;-6;<sp/>--row)<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>row+6<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>column<sp/>=<sp/>-4;<sp/>column&lt;4;<sp/>++column)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(int)((column*pitch)/binX_length)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(int)((row<sp/><sp/><sp/>*pitch)/binY_length)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>column<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>row<sp/>&lt;&lt;<sp/>&quot;)<sp/>:<sp/>minX<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>MappingXY_FluxG-&gt;GetXaxis()-&gt;GetBinLowEdge(<sp/>MappingXY_FluxG-&gt;GetXaxis()-&gt;FindBin(column*pitch)+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>minY<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>MappingXY_FluxG-&gt;GetYaxis()-&gt;GetBinLowEdge(<sp/>MappingXY_FluxG-&gt;GetXaxis()-&gt;FindBin(row*pitch)+1)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error<sp/>=0;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binXmin<sp/>=<sp/>MappingXY_FluxG-&gt;GetXaxis()-&gt;FindBin(<sp/>column<sp/><sp/><sp/>*pitch);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binXmax<sp/>=<sp/>MappingXY_FluxG-&gt;GetXaxis()-&gt;FindBin((column+1)*pitch);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binYmin<sp/>=<sp/>MappingXY_FluxG-&gt;GetYaxis()-&gt;FindBin(<sp/>row<sp/><sp/><sp/><sp/><sp/><sp/>*pitch);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binYmax<sp/>=<sp/>MappingXY_FluxG-&gt;GetYaxis()-&gt;FindBin((row<sp/><sp/><sp/>+1)*pitch);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;binXmin<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>binXmin<sp/>&lt;&lt;<sp/>&quot;<sp/>binXmax<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>binXmax<sp/>&lt;&lt;<sp/>&quot;<sp/>binYmin<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>binYmin<sp/>&lt;&lt;<sp/>&quot;<sp/>binYmax<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>binYmax<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>MappingXY_FluxG-&gt;IntegralAndError(binXmin,<sp/>binXmax,<sp/>binYmin,<sp/>binYmax,<sp/>error)<sp/>/<sp/>(<sp/>(binXmax-binXmin)<sp/>*<sp/>(binYmax-binYmin)<sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>+-<sp/>&quot;<sp/>&lt;&lt;<sp/>error/((binXmax-binXmin)<sp/>*<sp/>(binYmax-binYmin))<sp/>&lt;&lt;<sp/>(&quot;<sp/>W<sp/>/<sp/>cm^{3}<sp/>@<sp/>&quot;<sp/>+<sp/>str_beamPower)<sp/>&lt;&lt;<sp/>&quot;\t&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>Mean<sp/>Gamma<sp/>Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal">+<sp/>str_beamPower).c_str()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>B<sp/>C<sp/>D<sp/>E<sp/>F<sp/>G<sp/>H&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>4;<sp/>row&gt;-6;<sp/>--row)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>row+6<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>column<sp/>=<sp/>-4;<sp/>column&lt;4;<sp/>++column)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error<sp/>=0;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binXmin<sp/>=<sp/>MappingXY_FluxG-&gt;GetXaxis()-&gt;FindBin(<sp/>column<sp/><sp/><sp/>*pitch);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binXmax<sp/>=<sp/>MappingXY_FluxG-&gt;GetXaxis()-&gt;FindBin((column+1)*pitch);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binYmin<sp/>=<sp/>MappingXY_FluxG-&gt;GetYaxis()-&gt;FindBin(<sp/>row<sp/><sp/><sp/><sp/><sp/><sp/>*pitch);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binYmax<sp/>=<sp/>MappingXY_FluxG-&gt;GetYaxis()-&gt;FindBin((row<sp/><sp/><sp/>+1)*pitch);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_FluxG-&gt;IntegralAndError(binXmin,<sp/>binXmax,<sp/>binYmin,<sp/>binYmax,<sp/>error);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>error/((binXmax-binXmin)<sp/>*<sp/>(binYmax-binYmin))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_FluxG-&gt;GetXaxis()-&gt;SetRange(1,nbinsX);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_FluxG-&gt;GetYaxis()-&gt;SetRange(1,nbinsY);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gamma<sp/>fluence<sp/>XZ<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXZ_FluxG<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_FluxG_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_FluxG&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Gamma<sp/>Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower,<sp/>rescaling_Data,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_FluxG-&gt;SetAxisRange(1e10,1e15,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X<sp/>projection<sp/>of<sp/>flux<sp/>Mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Xprojection_FluxN&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Xprojection_FluxN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>Xprojection_FluxN<sp/>=<sp/>MappingXY_FluxN-&gt;ProjectionX();</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_FluxN-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_FluxN-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_FluxN-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_FluxN-&gt;GetYaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Neutron<sp/>Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y<sp/>projection<sp/>of<sp/>flux<sp/>Mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Yprojection_FluxN&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Yprojection_FluxN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>Yprojection_FluxN<sp/>=<sp/>MappingXY_FluxN-&gt;ProjectionY();</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yprojection_FluxN-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yprojection_FluxN-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yprojection_FluxN-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yprojection_FluxN-&gt;GetYaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Neutron<sp/>Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Z<sp/>projection<sp/>of<sp/>flux<sp/>Mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Zprojection_FluxN&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Zprojection_FluxN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>Zprojection_FluxN<sp/>=<sp/>MappingXZ_FluxN-&gt;ProjectionY();</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Zprojection_FluxN-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Zprojection_FluxN-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Zprojection_FluxN-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Zprojection_FluxN-&gt;GetYaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Neutron<sp/>Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="984"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="comment">//<sp/><sp/>Other<sp/>histograms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dbl_min<sp/>=<sp/>1e-9;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dbl_max<sp/>=<sp/>1e+8;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_nbinsLog<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_log<sp/>=<sp/>TMath::Log10(dbl_min);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_log<sp/>=<sp/>TMath::Log10(dbl_max);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bin_width<sp/>=<sp/>(<sp/>max_log<sp/>-<sp/>min_log)<sp/>/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>int_nbinsLog;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>logbins[int_nbinsLog<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>TTree*<sp/>EverythingN<sp/>=<sp/>(TTree*)<sp/>f_ROOT-&gt;GetObjectChecked((</highlight><highlight class="stringliteral">&quot;EverythingN&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;TTree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>histo<sp/>Neutron<sp/>Energy<sp/>VS<sp/>Time<sp/>in<sp/>the<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>LogEvsLogTimeTarget;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogEvsLogTimeTarget<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;LogEvsLogTimeTarget_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;LogEvsLogTimeTarget&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Log10(Time<sp/>[s])&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Log10(Kinetic<sp/>Energy<sp/>[eV])&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>/<sp/>proton&quot;</highlight><highlight class="normal">,<sp/>1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogEvsLogTimeTarget-&gt;SetAxisRange(1e-6,1e-2,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X<sp/>projection<sp/>of<sp/>Neutron<sp/>Energy<sp/>VS<sp/>Time<sp/>in<sp/>the<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nhisto;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Xprojection_EvsTimetarget&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Xprojection_EvsTimetarget&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>Xprojection_EvsTimetarget<sp/>=<sp/>LogEvsLogTimeTarget-&gt;ProjectionX();</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimetarget-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimetarget-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimetarget-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Log10(Time<sp/>[s])&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimetarget-&gt;GetYaxis()-&gt;SetTitle(&quot;Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>50<sp/>kW_{beam}&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[i]-&gt;SetLogy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[i]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[i]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>histo<sp/>Neutron<sp/>Energy<sp/>VS<sp/>Time<sp/>in<sp/>the<sp/>Reflector+FeTop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>LogEvsLogTimeReflectorFeTop;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogEvsLogTimeReflectorFeTop<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;LogEvsLogTimeReflectorFeTop_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;LogEvsLogTimeReflectorFeTop&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Log10(Time<sp/>[s])&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Log10(Kinetic<sp/>Energy<sp/>[eV])&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>/<sp/>proton&quot;</highlight><highlight class="normal">,<sp/>1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogEvsLogTimeReflectorFeTop-&gt;SetAxisRange(1e-6,1e-2,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X<sp/>projection<sp/>of<sp/>Neutron<sp/>Energy<sp/>VS<sp/>Time<sp/>in<sp/>the<sp/>Reflector+FeTop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nhisto;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Xprojection_EvsTimeReflectorFeTop&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Xprojection_EvsTimeReflectorFeTop&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>Xprojection_EvsTimeReflectorFeTop<sp/>=<sp/>LogEvsLogTimeReflectorFeTop-&gt;ProjectionX();</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimeReflectorFeTop-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimeReflectorFeTop-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimeReflectorFeTop-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Log10(Time<sp/>[s])&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimeReflectorFeTop-&gt;GetYaxis()-&gt;SetTitle(&quot;Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>50<sp/>kW_{beam}&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[i]-&gt;SetLogy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[i]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[i]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>histo<sp/>Neutron<sp/>Energy<sp/>VS<sp/>Time<sp/>in<sp/>the<sp/>volume<sp/>surrounding<sp/>the<sp/>target<sp/>(lead<sp/>or<sp/>air)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>LogEvsLogTimeLead;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogEvsLogTimeLead<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;LogEvsLogTimeLead_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;LogEvsLogTimeLead&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Log10(Time<sp/>[s])&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Log10(Kinetic<sp/>Energy<sp/>[eV])&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>/<sp/>proton&quot;</highlight><highlight class="normal">,<sp/>1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogEvsLogTimeLead-&gt;SetAxisRange(1e-6,1e-2,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X<sp/>projection<sp/>of<sp/>Neutron<sp/>Energy<sp/>VS<sp/>Time<sp/>in<sp/>the<sp/>volume<sp/>surrounding<sp/>the<sp/>target<sp/>(lead<sp/>or<sp/>air)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Xprojection_EvsTimeLead&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Xprojection_EvsTimeLead&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>Xprojection_EvsTimeLead<sp/>=<sp/>LogEvsLogTimeLead-&gt;ProjectionX();</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimeLead-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimeLead-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimeLead-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Log10(Time<sp/>[s])&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xprojection_EvsTimeLead-&gt;GetYaxis()-&gt;SetTitle(&quot;Flux<sp/>[cm^{-2}.s^{-1}]<sp/>@<sp/>50<sp/>kW_{beam}&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>logbins[0]<sp/>=<sp/>dbl_min;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>int_nbinsLog;<sp/>++k)</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logbins[k]<sp/>=<sp/>dbl_min<sp/>+<sp/>TMath::Power(10,<sp/>min_log<sp/>+<sp/>k<sp/>*<sp/>bin_width);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>histo<sp/>Neutron<sp/>number<sp/>VS<sp/>Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NvsTime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NvsTime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_drawOption<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hist&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogx();</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLegend*<sp/>legend<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TLegend(0.2,0.3,0.6,0.6);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>NvsTime_lin_sum<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D();<sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>every<sp/>histograms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin_sum-&gt;SetBins(int_nbinsLog,<sp/>logbins);<sp/></highlight><highlight class="comment">//<sp/>Logarithmic<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin_sum-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;std::string&gt;<sp/>histo_names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;NbN_time_target&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;NbN_time_lead&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;NbN_time_core&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;NbN_time_graphi&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;std::string&gt;<sp/>legend_names<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Target&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Lead&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Driver<sp/>fuel&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Graphite<sp/>reflector&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>NvsTime_lin[histo_names.size()];</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)histo_names.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>NvsTime_log<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(histo_names[i].c_str());</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin[i]-&gt;SetBins(int_nbinsLog,<sp/>logbins);<sp/></highlight><highlight class="comment">//<sp/>Logarithmic<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j<sp/>&lt;<sp/>NvsTime_log-&gt;GetNbinsX();<sp/>++j)</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin[i]-&gt;Fill(TMath::Power(10,<sp/>NvsTime_log-&gt;GetXaxis()-&gt;GetBinLowEdge(j)),<sp/>NvsTime_log-&gt;GetBinContent(j));</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>legend-&gt;AddEntry(NvsTime_lin[i],<sp/>legend_names[i].c_str(),<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin_sum-&gt;Add(NvsTime_lin[i],1);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin[i]-&gt;SetNameTitle(histo_names[i].c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin[i]-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;dN<sp/>/<sp/>d(Log_{10}(t)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin[i]-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Time<sp/>[s]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin[i]-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin_sum-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin_sum-&gt;GetYaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;dN<sp/>/<sp/>d(Log_{10}(t)<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin_sum-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Time<sp/>[s]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin_sum-&gt;Draw(str_drawOption.c_str());</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_drawOption<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hist<sp/>same&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)histo_names.size();<sp/>++i)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NvsTime_lin[i]-&gt;Draw(str_drawOption.c_str());</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>legend-&gt;AddEntry(NvsTime_lin_sum,<sp/></highlight><highlight class="stringliteral">&quot;Total&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>legend-&gt;Draw();</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_bin<sp/>=<sp/>130;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>histo<sp/>Neutron<sp/>birth<sp/>VS<sp/>Volume<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NbBirthNeutrons<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>birthNvsVolume;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nhisto;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/>&quot;reasonID<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>energyK&gt;0&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;reasonID<sp/>==<sp/>-1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;birthNvsVolume&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;EveryVol&gt;&gt;<sp/>h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>int_bin<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>-1,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_bin-1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_drawOption<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;HIST<sp/>e&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EverythingN-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/>str_drawOption.c_str());</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>birthNvsVolume<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get((</highlight><highlight class="stringliteral">&quot;h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName).c_str());</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>birthNvsVolume-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>birthNvsVolume-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Generated<sp/>neutrons&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>birthNvsVolume-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Volume<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>birthNvsVolume-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>birth<sp/>in<sp/>the<sp/>target<sp/>per<sp/>proton<sp/>source<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>birthNvsVolume-&gt;Integral(14,24)<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;int_bin;<sp/>++i)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NbBirthNeutrons<sp/>+=<sp/>birthNvsVolume-&gt;GetBinContent(i);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Printing<sp/>neutron<sp/>birth<sp/>in<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_birth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n****<sp/>Neutron<sp/>Birth<sp/>****&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>int_bin;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(birthNvsVolume-&gt;GetBinContent(i)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find<sp/>(strPhysVolNumber.begin(),<sp/>strPhysVolNumber.end(),<sp/>birthNvsVolume-&gt;GetBinLowEdge(i));</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>strPhysVolNumber.end())</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>strPhysVolName[std::distance(strPhysVolNumber.begin(),<sp/>it)]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>birthNvsVolume-&gt;GetBinContent(i)<sp/>/<sp/>birthNvsVolume-&gt;Integral()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(birthNvsVolume-&gt;GetBinLowEdge(i)<sp/>&gt;=<sp/>60<sp/>&amp;&amp;<sp/>birthNvsVolume-&gt;GetBinLowEdge(i)<sp/>&lt;=<sp/>123)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SpentFuel<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>birthNvsVolume-&gt;GetBinContent(i)<sp/>/<sp/>birthNvsVolume-&gt;Integral()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>birthNvsVolume-&gt;GetBinLowEdge(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>birthNvsVolume-&gt;GetBinContent(i)<sp/>/<sp/>birthNvsVolume-&gt;Integral()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_birth<sp/>+=<sp/>birthNvsVolume-&gt;GetBinContent(i);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Total<sp/>birth<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>total_birth<sp/>/<sp/>birthNvsVolume-&gt;Integral()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>str_TargetEscapN<sp/>&lt;&lt;<sp/>NbNeutronEscape<sp/>-<sp/>NbNeutronEntering<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>histo<sp/>captured<sp/>neutrons<sp/>VS<sp/>Volume<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>capNvsVolume;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nhisto;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/>&quot;reasonID!=-1<sp/>&amp;&amp;<sp/>CaptureVol&gt;0<sp/>&amp;&amp;<sp/>energyK&gt;0&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;reasonID!=-1<sp/>&amp;&amp;<sp/>CaptureVol&gt;0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/>&quot;&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;capNvsVolume&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CaptureVol&gt;&gt;<sp/>h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>int_bin<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>-1,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_bin-1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_drawOption<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;HIST<sp/>e&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EverythingN-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/>str_drawOption.c_str());</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capNvsVolume<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get((</highlight><highlight class="stringliteral">&quot;h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName).c_str());</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capNvsVolume-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capNvsVolume-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Captured<sp/>neutrons<sp/>/<sp/>proton<sp/>source&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capNvsVolume-&gt;GetYaxis()-&gt;SetTitle(&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{th}&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capNvsVolume-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Volume<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capNvsVolume-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capNvsVolume-&gt;Scale(1./(double)(ADS_gain*Beam_Energy*1.602E-19*Nparticles));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>captured<sp/>in<sp/>the<sp/>target<sp/>per<sp/>proton<sp/>source<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>capNvsVolume-&gt;Integral(14,20)<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>captured<sp/>in<sp/>the<sp/>tube<sp/><sp/><sp/>per<sp/>proton<sp/>source<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>capNvsVolume-&gt;Integral(21,21)<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>captured<sp/>in<sp/>Al<sp/>parts<sp/><sp/><sp/>per<sp/>proton<sp/>source<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>capNvsVolume-&gt;Integral(22,22)<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>captured<sp/>in<sp/>water<sp/><sp/><sp/><sp/><sp/><sp/>per<sp/>proton<sp/>source<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>capNvsVolume-&gt;Integral(23,23)<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>histo<sp/>fission<sp/>neutrons<sp/>VS<sp/>Volume<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NbFissionNeutrons<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>fisNvsVolume;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nhisto;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/>&quot;reasonID<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>FissionVol&gt;0<sp/>&amp;&amp;<sp/>energyK&gt;0&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;reasonID<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>FissionVol&gt;0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;fisNvsVolume&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FissionVol&gt;&gt;<sp/>h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>int_bin<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>-1,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_bin-1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_drawOption<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;HIST<sp/>e&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EverythingN-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/>str_drawOption.c_str());</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fisNvsVolume<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get((</highlight><highlight class="stringliteral">&quot;h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName).c_str());</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fisNvsVolume-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fisNvsVolume-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Fission<sp/>neutrons&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fisNvsVolume-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Volume<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fisNvsVolume-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>inducing<sp/>fission<sp/>in<sp/>fuel<sp/>per<sp/>proton<sp/>source<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fisNvsVolume-&gt;Integral()<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetName(&quot;NeutronFromFission&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/>&quot;FissionNeutrons&gt;&gt;<sp/>h_&quot;<sp/>+<sp/>str_CanvaName<sp/>+<sp/>&quot;(&quot;<sp/>+<sp/>int_bin<sp/>+<sp/>&quot;,<sp/>-1,<sp/>49)&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_drawOption<sp/>=<sp/>&quot;HIST<sp/>e&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EverythingN-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/>str_drawOption.c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>NeutronFromFission<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get((&quot;h_&quot;<sp/>+<sp/>str_CanvaName).c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NeutronFromFission-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/>&quot;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NeutronFromFission-&gt;GetYaxis()-&gt;SetTitle(&quot;Count<sp/>per<sp/>proton<sp/>source&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NeutronFromFission-&gt;GetXaxis()-&gt;SetTitle(&quot;Number<sp/>of<sp/>secondary<sp/>neutrons&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NeutronFromFission-&gt;Scale(1./(double)Nparticles);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/>&quot;.root&quot;).c_str());}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/>&quot;.png&quot;<sp/>).c_str());}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i<sp/>=<sp/>0;<sp/>i&lt;int_bin;<sp/>++i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NbFissionNeutrons<sp/>+=<sp/>NeutronFromFission-&gt;GetBinContent(i)<sp/>*<sp/>NeutronFromFission-&gt;GetXaxis()-&gt;GetBinLowEdge(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Total<sp/>number<sp/>of<sp/>neutrons<sp/>induced<sp/>by<sp/>fission<sp/>in<sp/>fuel<sp/>per<sp/>proton<sp/>source<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>NbFissionNeutrons<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n***************\n<sp/>*<sp/>k<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>1<sp/>-<sp/>(NbNeutronEscape)<sp/>/<sp/>(NbFissionNeutrons<sp/>+<sp/>NbNeutronEscape)<sp/>&lt;&lt;<sp/>&quot;\n***************\n&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n***************\n<sp/>*<sp/>k<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>1<sp/>-<sp/>(NbNeutronEscape<sp/>-<sp/>NbNeutronEntering)<sp/>/<sp/>(NbFissionNeutrons<sp/>+<sp/>NbNeutronEscape<sp/>-<sp/>NbNeutronEntering)<sp/>&lt;&lt;<sp/>&quot;\n***************\n&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n***************\n<sp/>*<sp/>k<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>1<sp/>-<sp/>3./NbFissionNeutrons<sp/>&lt;&lt;<sp/>&quot;\n***************\n&quot;<sp/>&lt;&lt;<sp/>std::endl;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n***************\n<sp/>*<sp/>k<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>1<sp/>-<sp/>(NbNeutronEscape<sp/>-<sp/>NbNeutronEntering)<sp/>/<sp/>NbBirthNeutrons<sp/>&lt;&lt;<sp/>&quot;\n***************\n&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n***************\n<sp/>*<sp/>k<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>1<sp/>-<sp/>2.97<sp/>/<sp/>NbBirthNeutrons<sp/>&lt;&lt;<sp/>&quot;\n***************\n&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>histo<sp/>inelastic<sp/>neutrons<sp/>VS<sp/>Volume<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>inelNvsVolume;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nhisto;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/>&quot;reasonID<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>InelasticVol&gt;0<sp/>&amp;&amp;<sp/>energyK&gt;0&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;reasonID<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>InelasticVol&gt;0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inelNvsVolume&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;InelasticVol&gt;&gt;<sp/>h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>int_bin<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>-1,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_bin-1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_drawOption<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;HIST<sp/>e&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EverythingN-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/>str_drawOption.c_str());</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inelNvsVolume<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get((</highlight><highlight class="stringliteral">&quot;h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName).c_str());</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inelNvsVolume-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inelNvsVolume-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Inelastic<sp/>neutrons&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inelNvsVolume-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Volume<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inelNvsVolume-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Neutron<sp/>inducing<sp/>inelastic<sp/>in<sp/>the<sp/>target<sp/>per<sp/>proton<sp/>source<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inelNvsVolume-&gt;Integral(14,24)<sp/>&lt;&lt;std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>histo<sp/>(n,Xn)<sp/>neutrons<sp/>VS<sp/>Volume<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>nXnVolume;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nhisto;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/>&quot;reasonID<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>nXnVol&gt;0<sp/>&amp;&amp;<sp/>energyK&gt;0&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;reasonID<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>nXnVol&gt;0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;nXnVolume&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;nXnVol&gt;&gt;<sp/>h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>int_bin<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>-1,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_bin-1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_drawOption<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;HIST<sp/>e&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EverythingN-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/>str_drawOption.c_str());</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nXnVolume<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get((</highlight><highlight class="stringliteral">&quot;h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName).c_str());</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nXnVolume-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nXnVolume-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;(n,Xn)<sp/>neutrons&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nXnVolume-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Volume<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nXnVolume-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>histo<sp/>(n,n&apos;)<sp/>neutrons<sp/>VS<sp/>Volume<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>nnPrimeVolume;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Nhisto;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/>&quot;reasonID<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>nnPrimeVol&gt;0<sp/>&amp;&amp;<sp/>energyK&gt;0&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;reasonID<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>nnPrimeVol&gt;0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;nnPrimeVolume&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;nnPrimeVol&gt;&gt;<sp/>h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>int_bin<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>-1,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_bin-1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_drawOption<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;HIST<sp/>e&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EverythingN-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/>str_drawOption.c_str());</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnPrimeVolume<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get((</highlight><highlight class="stringliteral">&quot;h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName).c_str());</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnPrimeVolume-&gt;SetNameTitle(str_CanvaName.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnPrimeVolume-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;(n,n&apos;)<sp/>neutrons&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnPrimeVolume-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Volume<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnPrimeVolume-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Printing<sp/>neutron<sp/>absorption<sp/>in<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_abs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n****<sp/>Neutron<sp/>Absorption<sp/>****&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>int_bin;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((capNvsVolume-&gt;GetBinContent(i)<sp/>+<sp/>inelNvsVolume-&gt;GetBinContent(i))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find<sp/>(strPhysVolNumber.begin(),<sp/>strPhysVolNumber.end(),<sp/>capNvsVolume-&gt;GetBinLowEdge(i));</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>strPhysVolNumber.end())</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>strPhysVolName[std::distance(strPhysVolNumber.begin(),<sp/>it)]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>(capNvsVolume-&gt;GetBinContent(i)<sp/>+<sp/>inelNvsVolume-&gt;GetBinContent(i))<sp/>/<sp/>(capNvsVolume-&gt;Integral()<sp/>+<sp/>inelNvsVolume-&gt;Integral())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capNvsVolume-&gt;GetBinLowEdge(i)<sp/>&gt;=<sp/>60<sp/>&amp;&amp;<sp/>capNvsVolume-&gt;GetBinLowEdge(i)<sp/>&lt;=<sp/>123)</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SpentFuel<sp/>:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>(capNvsVolume-&gt;GetBinContent(i)<sp/>+<sp/>inelNvsVolume-&gt;GetBinContent(i))<sp/>/<sp/>(capNvsVolume-&gt;Integral()<sp/>+<sp/>inelNvsVolume-&gt;Integral())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>capNvsVolume-&gt;GetBinLowEdge(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>(capNvsVolume-&gt;GetBinContent(i)<sp/>+<sp/>inelNvsVolume-&gt;GetBinContent(i))<sp/>/<sp/>(capNvsVolume-&gt;Integral()<sp/>+<sp/>inelNvsVolume-&gt;Integral())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_abs<sp/>+=<sp/>capNvsVolume-&gt;GetBinContent(i)<sp/>+<sp/>inelNvsVolume-&gt;GetBinContent(i);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Total<sp/>absorption<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>total_abs<sp/>/<sp/>(capNvsVolume-&gt;Integral()<sp/>+<sp/>inelNvsVolume-&gt;Integral())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Printing<sp/>reaction<sp/>proportion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n****<sp/>Neutron<sp/>Reaction<sp/>****&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Capture<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>capNvsVolume<sp/>-&gt;Integral()<sp/>/<sp/>(birthNvsVolume-&gt;Integral()<sp/>-<sp/>nnPrimeVolume-&gt;Integral())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fission<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>fisNvsVolume<sp/>-&gt;Integral()<sp/>/<sp/>(birthNvsVolume-&gt;Integral()<sp/>-<sp/>nnPrimeVolume-&gt;Integral())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Inelast<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>inelNvsVolume-&gt;Integral()<sp/>/<sp/>(birthNvsVolume-&gt;Integral()<sp/>-<sp/>nnPrimeVolume-&gt;Integral())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(n,Xn)<sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>nXnVolume<sp/><sp/><sp/><sp/>-&gt;Integral()<sp/>/<sp/>(birthNvsVolume-&gt;Integral()<sp/>-<sp/>nnPrimeVolume-&gt;Integral())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Escape<sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>(birthNvsVolume-&gt;Integral()<sp/>-<sp/>capNvsVolume<sp/>-&gt;Integral()<sp/>-<sp/>fisNvsVolume<sp/>-&gt;Integral()<sp/>-<sp/>inelNvsVolume-&gt;Integral()<sp/>-<sp/>nXnVolume-&gt;Integral()<sp/>-<sp/>nnPrimeVolume-&gt;Integral())<sp/></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(birthNvsVolume-&gt;Integral()<sp/>-<sp/>nnPrimeVolume-&gt;Integral())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>int_xbin<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>int_ybin<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>int_zbin<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Xmin<sp/>=<sp/>-600;<sp/></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Xmax<sp/>=<sp/><sp/>0;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Ymin<sp/>=<sp/>-50;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Ymax<sp/>=<sp/><sp/>50;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Zmin<sp/>=<sp/>-647./2.;<sp/></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Zmax<sp/>=<sp/><sp/>647./2.;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XY<sp/>for<sp/>death<sp/>position<sp/>of<sp/>spallation<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXYposAbsorption;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;(FissionVol<sp/>&gt;<sp/>0<sp/>||<sp/>CaptureVol<sp/>&gt;<sp/>0<sp/>||<sp/>InelasticVol<sp/>&gt;<sp/>0<sp/>||<sp/>nXnVol<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>pID<sp/>==<sp/>1&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_AbsorptionN0_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NPosY:NPosX&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_xbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_ybin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EverythingN-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorption<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorption-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorption-&gt;GetZaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Absorption<sp/>rate<sp/>of<sp/>spallation<sp/>neutrons<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal">+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorption-&gt;GetYaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorption-&gt;GetZaxis()-&gt;SetTitleOffset(1.4);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorption-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorption-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorption-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorption-&gt;GetZaxis()-&gt;SetRangeUser(0,5e+12);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorption-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XY<sp/>for<sp/>death<sp/>position<sp/>of<sp/>spallation<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_DeathN0_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_DeathN0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXYposAbsorptionN0<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_histoName.c_str());</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetZaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Absorption<sp/>rate<sp/>of<sp/>source<sp/>neutrons<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal">+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetZaxis()-&gt;SetTitleOffset(1.4);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetYaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetZaxis()-&gt;SetRangeUser(0,5e+12);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetXaxis()-&gt;SetRangeUser(-300,400);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XZ<sp/>for<sp/>death<sp/>position<sp/>of<sp/>spallation<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_DeathN0_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_DeathN0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXYposAbsorptionN0<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_histoName.c_str());</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetZaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Absorption<sp/>rate<sp/>of<sp/>source<sp/>neutrons<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal">+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetZaxis()-&gt;SetTitleOffset(1.4);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetYaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetZaxis()-&gt;SetRangeUser(0,5e+12);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;GetXaxis()-&gt;SetRangeUser(-300,400);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"></codeline>
<codeline lineno="1454"><highlight class="comment">//<sp/>Source<sp/>neutrons<sp/>position</highlight></codeline>
<codeline lineno="1456"><highlight class="comment"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_min<sp/>=<sp/>1e-6;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_max<sp/>=<sp/>1e-3;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XY<sp/>of<sp/>source<sp/>neutron<sp/>birth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXY_N0<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_N0birth_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_N0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Source<sp/>neutrons<sp/>at<sp/>birth<sp/>/<sp/>Source<sp/>proton&quot;</highlight><highlight class="normal">,<sp/>1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_N0-&gt;SetAxisRange(dbl_min,<sp/>dbl_max,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XZ<sp/>of<sp/>source<sp/>neutron<sp/>birth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXZ_N0<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_N0birth_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_N0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Source<sp/>neutrons<sp/>at<sp/>birth<sp/>/<sp/>Source<sp/>proton&quot;</highlight><highlight class="normal">,<sp/>1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);<sp/></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_N0-&gt;SetAxisRange(dbl_min,<sp/>dbl_max,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_min<sp/>=<sp/>1e-5;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_max<sp/>=<sp/>1e-2;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XY<sp/>of<sp/>source<sp/>neutron<sp/>at<sp/>counting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXY_N0count<sp/>=<sp/>GetAndDraw2D_histoFromTree(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;NeutronSource&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_N0_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXY_N0&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/>100,<sp/>-250,<sp/>0,<sp/></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>100,<sp/>-50,<sp/>50,<sp/></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Source<sp/>neutrons<sp/>at<sp/>counting<sp/>/<sp/>Source<sp/>proton&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXY_N0count<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/>&quot;MappingXY_N0count_&quot;<sp/>+<sp/>FileName,<sp/>&quot;MappingXY_N0count&quot;,<sp/>&quot;X<sp/>[mm]&quot;,<sp/>&quot;Y<sp/>[mm]&quot;,<sp/>&quot;Source<sp/>neutrons<sp/>at<sp/>counting<sp/>/<sp/>Source<sp/>proton&quot;,<sp/>1./(double)Nparticles,<sp/>&quot;colz&quot;,<sp/>save_root,<sp/>save_png);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXY_N0count-&gt;SetAxisRange(dbl_min,<sp/>dbl_max,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XZ<sp/>of<sp/>source<sp/>neutron<sp/>at<sp/>counting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto)<sp/>{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXZ_N0count<sp/>=<sp/>GetAndDraw2D_histoFromTree(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;NeutronSource&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_N0count_&quot;</highlight><highlight class="normal"><sp/>+<sp/>FileName,<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_N0count&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">,<sp/>100,<sp/>-250,<sp/>0,<sp/></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>100,<sp/>-50,<sp/>50,<sp/></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Source<sp/>neutrons<sp/>at<sp/>counting<sp/>/<sp/>Source<sp/>proton&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXZ_N0count<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/>&quot;MappingXZ_N0count_&quot;<sp/>+<sp/>FileName,<sp/>&quot;MappingXZ_N0count&quot;,<sp/>&quot;X<sp/>[mm]&quot;,<sp/>&quot;Z<sp/>[mm]&quot;,<sp/>&quot;Source<sp/>neutrons<sp/>at<sp/>counting<sp/>/<sp/>Source<sp/>proton&quot;,<sp/>1./(double)Nparticles,<sp/>&quot;colz&quot;,<sp/>save_root,<sp/>save_png);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_N0count-&gt;SetAxisRange(dbl_min,<sp/>dbl_max,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="comment">//<sp/>Neutron<sp/>Rate</highlight></codeline>
<codeline lineno="1506"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXZ_N0<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_BirthN0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_N0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Source<sp/>neutrons<sp/>at<sp/>birth<sp/>/<sp/>Source<sp/>proton&quot;</highlight><highlight class="normal">,<sp/>1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_N0-&gt;SetAxisRange(dbl_min,<sp/>dbl_max,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXYposAbsorptionN0<sp/>=<sp/>GetAndDraw2D_histo(histo[0],<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_DeathN0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_DeathN0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Source<sp/>neutrons<sp/>at<sp/>death<sp/>/<sp/>Source<sp/>proton&quot;</highlight><highlight class="normal">,<sp/>1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nparticles,<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">,<sp/>save_root,<sp/>save_png);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposAbsorptionN0-&gt;SetAxisRange(dbl_min,<sp/>dbl_max,</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TCanvas*<sp/>rate<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;MappingXZ_BDRateN0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MappingXZ_BDRateN0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXZ_BDRateN0<sp/>=<sp/>(TH2D*)MappingXZ_N0-&gt;Clone(</highlight><highlight class="stringliteral">&quot;MappingXZ_BDRateN0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_BDRateN0-&gt;Divide(MappingXYposAbsorptionN0);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_BDRateN0-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Birth/Death&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_BDRateN0-&gt;GetYaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_BDRateN0-&gt;GetZaxis()-&gt;SetTitleOffset(1.6);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_BDRateN0-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_BDRateN0-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZ_BDRateN0-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="comment">//<sp/>Transmutation<sp/>rates</highlight></codeline>
<codeline lineno="1539"><highlight class="comment"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>TTree*<sp/>TransmutationInfo<sp/>=<sp/>(TTree*)<sp/>f_ROOT-&gt;GetObjectChecked((</highlight><highlight class="stringliteral">&quot;TransmutationInfo&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;TTree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbr_bar<sp/>=<sp/>36;<sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>fuel<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>material_density<sp/>=<sp/>10.407;<sp/></highlight><highlight class="comment">//9.88;<sp/>//10.71;<sp/>//6.16;<sp/>//3.04;<sp/>//9.7;<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>volume<sp/>=<sp/>1*1*TMath::Pi()/4*2.6;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberOfSamples<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AtomicMass<sp/>=<sp/>239;</highlight><highlight class="comment">//241;//232;//237;//99;//237;//129;//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AtomicNumb<sp/>=<sp/><sp/>94;</highlight><highlight class="comment">//<sp/>95;//<sp/>90;//<sp/>93;//43;//<sp/>93;//<sp/>53;//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass_tot<sp/>=<sp/>volume<sp/>*<sp/>material_density<sp/>*<sp/>numberOfSamples;<sp/></highlight><highlight class="comment">//79.23<sp/>*<sp/>3;<sp/>//<sp/>g<sp/>//<sp/>Pu-239</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>int_xbin<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>int_ybin<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>int_zbin<sp/>=<sp/>150;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Xmin<sp/>=<sp/>-100;<sp/></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Xmax<sp/>=<sp/><sp/>100;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Ymin<sp/>=<sp/>-100;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Ymax<sp/>=<sp/><sp/>-40;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Zmin<sp/>=<sp/>-20;<sp/></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Zmax<sp/>=<sp/><sp/>20;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XY<sp/>for<sp/>fission<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXYposFission;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FissionVol<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;XvsY_TransmuteFis&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NPosY:NPosX&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_xbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_ybin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposFission<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposFission-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposFission-&gt;GetZaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Fission<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal">+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposFission-&gt;GetZaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposFission-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Ypos<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposFission-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Xpos<sp/>[mm]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposFission-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposFission-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XZ<sp/>for<sp/>fission<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXZposFission;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FissionVol<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;XvsZ_TransmuteFis&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NPosZ:NPosX&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_xbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_zbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Zmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Zmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposFission<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposFission-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposFission-&gt;GetZaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Fission<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal">+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposFission-&gt;GetZaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposFission-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Zpos<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposFission-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Xpos<sp/>[mm]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposFission-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposFission-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Radius<sp/>for<sp/>capture<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>MappingRadiusCapture;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CaptureVol<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>TMath::ATan2(NPosY,NPosX)*180./TMath::Pi()<sp/>&gt;<sp/>-25<sp/>&amp;&amp;<sp/>TMath::ATan2(NPosY,NPosX)*180./TMath::Pi()<sp/>&lt;<sp/>25<sp/><sp/>&amp;&amp;<sp/>NPosZ<sp/>&lt;<sp/>150<sp/>&amp;&amp;<sp/>NPosZ&gt;-150&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Radius_TransmuteCap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TMath::Sqrt(NPosY*NPosY<sp/>+<sp/>NPosX*NPosX)&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(8,0,800)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;hist<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusCapture<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusCapture-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusCapture-&gt;GetYaxis()-&gt;SetTitle((&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;<sp/>+<sp/>str_beamPower).c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusCapture-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Radius<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusCapture-&gt;GetYaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ADS_gain<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusCapture-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{th}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusCapture-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{beam}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/>MappingRadiusCapture-&gt;Scale(scaling_rawData);<sp/>}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>MappingRadiusCapture-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(ADS_gain*Beam_Energy*1.602E-19*Nparticles));}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusCapture-&gt;Draw(</highlight><highlight class="stringliteral">&quot;hist<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Radius<sp/>for<sp/>Fission<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>MappingRadiusFission;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FissionVol<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>TMath::ATan2(NPosY,NPosX)*180./TMath::Pi()<sp/>&gt;<sp/>-25<sp/>&amp;&amp;<sp/>TMath::ATan2(NPosY,NPosX)*180./TMath::Pi()<sp/>&lt;<sp/>25<sp/>&amp;&amp;<sp/>NPosZ<sp/>&lt;<sp/>150<sp/>&amp;&amp;<sp/>NPosZ&gt;-150&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Radius_TransmuteFis&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TMath::Sqrt(NPosY*NPosY<sp/>+<sp/>NPosX*NPosX)&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(8,0,800)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;hist<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusFission<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusFission-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusFission-&gt;GetYaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Fission<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal">+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusFission-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Radius<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusFission-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusFission-&gt;Draw(</highlight><highlight class="stringliteral">&quot;hist<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fission<sp/>over<sp/>absorption<sp/>as<sp/>a<sp/>function<sp/>of<sp/>Radial<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>RadiusFisOverAbs;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRadiusCapture-&gt;Add(MappingRadiusFission,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>Fission<sp/>to<sp/>capture<sp/>to<sp/>get<sp/>total<sp/>absorption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dFisOverAbs_dRadius&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadiusFisOverAbs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D<sp/>(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>8,0,800);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadiusFisOverAbs-&gt;Sumw2(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadiusFisOverAbs-&gt;Add(MappingRadiusFission,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>of<sp/>fission<sp/>rate<sp/>histo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadiusFisOverAbs-&gt;Divide(MappingRadiusCapture);<sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>Fission<sp/>by<sp/>Absorption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadiusFisOverAbs-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Radius<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadiusFisOverAbs-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Fission<sp/>over<sp/>Absorption<sp/>Ratio&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RadiusFisOverAbs-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Theta<sp/>for<sp/>fission<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>MappingThetaFission;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FissionVol<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(TMath::Sqrt(NPosY*NPosY<sp/>+<sp/>NPosX*NPosX)<sp/>&lt;<sp/>300<sp/>||<sp/>TMath::Sqrt(NPosY*NPosY<sp/>+<sp/>NPosX*NPosX)<sp/>&gt;<sp/>450)<sp/>&amp;&amp;<sp/>NPosZ<sp/>&lt;<sp/>150<sp/>&amp;&amp;<sp/>NPosZ&gt;-150&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Theta_TransmuteFis&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TMath::ATan2(NPosY,NPosX)*180./TMath::Pi()&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(9,-202.5,202.5)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaFission<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaFission-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaFission-&gt;GetYaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Fission<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal">+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaFission-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;{Theta}<sp/>[degree]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaFission-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaFission-&gt;Draw(</highlight><highlight class="stringliteral">&quot;hist<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Theta<sp/>for<sp/>capture<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>MappingThetaCapture;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CaptureVol<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(TMath::Sqrt(NPosY*NPosY<sp/>+<sp/>NPosX*NPosX)<sp/>&lt;<sp/>300<sp/>||<sp/>TMath::Sqrt(NPosY*NPosY<sp/>+<sp/>NPosX*NPosX)<sp/>&gt;<sp/>450)<sp/>&amp;&amp;<sp/>NPosZ<sp/>&lt;<sp/>150<sp/>&amp;&amp;<sp/>NPosZ&gt;-150&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Theta_TransmuteCap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TMath::ATan2(NPosY,NPosX)*180./TMath::Pi()&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(9,-202.5,202.5)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaCapture<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaCapture-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaCapture-&gt;GetYaxis()-&gt;SetTitle((&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;<sp/>+<sp/>str_beamPower).c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaCapture-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;{Theta}<sp/>[degree]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaCapture-&gt;GetYaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ADS_gain<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaCapture-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{th}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaCapture-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{beam}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/>MappingThetaCapture-&gt;Scale(scaling_rawData);<sp/>}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{MappingThetaCapture-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(ADS_gain*Beam_Energy*1.602E-19*Nparticles));}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaCapture-&gt;Draw(</highlight><highlight class="stringliteral">&quot;hist<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fission<sp/>over<sp/>absorption<sp/>as<sp/>a<sp/>function<sp/>of<sp/>azimutal<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>ThetaFisOverAbs;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingThetaCapture-&gt;Add(MappingThetaFission,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>Fission<sp/>to<sp/>capture<sp/>to<sp/>get<sp/>total<sp/>absorption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dFisOverAbs_dTheta&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThetaFisOverAbs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D<sp/>(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>9,-202.5,202.5);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThetaFisOverAbs-&gt;Sumw2(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThetaFisOverAbs-&gt;Add(MappingThetaFission,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>of<sp/>fission<sp/>rate<sp/>histo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThetaFisOverAbs-&gt;Divide(MappingThetaCapture);<sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>Fission<sp/>by<sp/>Absorption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThetaFisOverAbs-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;{Theta}<sp/>[degree]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThetaFisOverAbs-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Fission<sp/>over<sp/>Absorption<sp/>Ratio&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThetaFisOverAbs-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Z<sp/>for<sp/>fission<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>ZposFission;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FissionVol<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Z_TransmuteFis&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NPosZ&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_zbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Zmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Zmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;hist<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFission<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFission-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFission-&gt;GetYaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Fission<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFission-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Zpos<sp/>[mm]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFission-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFission-&gt;Draw(</highlight><highlight class="stringliteral">&quot;hist<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Z<sp/>for<sp/>capture<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>ZposCapture;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CaptureVol<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Z_TransmuteCap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NPosZ&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_zbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Zmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Zmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;hist<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposCapture<sp/>=<sp/>(TH1D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposCapture-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposCapture-&gt;GetYaxis()-&gt;SetTitle((&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;<sp/>+<sp/>str_beamPower).c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposCapture-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Zpos<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposCapture-&gt;GetYaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ADS_gain<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposCapture-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{th}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposCapture-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{beam}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/>ZposCapture-&gt;Scale(scaling_rawData);<sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>ZposCapture-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(ADS_gain*Beam_Energy*1.602E-19*Nparticles));}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposCapture-&gt;Draw(</highlight><highlight class="stringliteral">&quot;hist<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fission<sp/>over<sp/>absorption<sp/>as<sp/>a<sp/>function<sp/>of<sp/>Z-position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>ZposFisOverAbs;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposCapture-&gt;Add(ZposFission,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>Fission<sp/>to<sp/>capture<sp/>to<sp/>get<sp/>total<sp/>absorption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dFisOverAbs_dZ&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFisOverAbs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D<sp/>(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>int_zbin,<sp/>dbl_Zmin,<sp/>dbl_Zmax);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFisOverAbs-&gt;Sumw2(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFisOverAbs-&gt;Add(ZposFission,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>of<sp/>fission<sp/>rate<sp/>histo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFisOverAbs-&gt;Divide(ZposCapture);<sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>Fission<sp/>by<sp/>Absorption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFisOverAbs-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Zpos<sp/>[mm]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFisOverAbs-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Fission<sp/>over<sp/>Absorption<sp/>Ratio&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZposFisOverAbs-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XY<sp/>for<sp/>capture<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXYposCapture;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CaptureVol<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;XvsY_TransmuteCap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NPosY:NPosX&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_xbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_ybin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposCapture<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposCapture-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposCapture-&gt;GetZaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposCapture-&gt;GetZaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposCapture-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Ypos<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposCapture-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Xpos<sp/>[mm]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposCapture-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXYposCapture-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>XZ<sp/>for<sp/>capture<sp/>position<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingXZposCapture;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CaptureVol<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;XvsZ_TransmuteCap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NPosZ:NPosX&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_xbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_zbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Zmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Zmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposCapture<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposCapture-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposCapture-&gt;GetZaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposCapture-&gt;GetZaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposCapture-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Zpos<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposCapture-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Xpos<sp/>[mm]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposCapture-&gt;Scale(scaling_rawData);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingXZposCapture-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>int_xbin<sp/>=<sp/>480;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>int_ybin<sp/>=<sp/>880;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Xmin<sp/>=<sp/><sp/>40;<sp/></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Xmax<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Ymin<sp/>=<sp/><sp/>90;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Ymax<sp/>=<sp/>300;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A:Z<sp/>for<sp/>fission<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingAZposFission;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FissionVol<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/><sp/>&amp;&amp;<sp/>NPosX*NPosX<sp/>+<sp/>NPosY*NPosY<sp/>&lt;<sp/>100*100<sp/>&amp;&amp;<sp/>NPosZ<sp/>&gt;<sp/>-150&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;AvsZ_TransmuteFis&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A:Z&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_xbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_ybin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposFission<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposFission-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposFission-&gt;GetZaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Fission<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ADS_gain<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposFission-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Fission<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{th}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposFission-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Fission<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{beam}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposFission-&gt;GetZaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposFission-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposFission-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/>MappingAZposFission-&gt;Scale(scaling_rawData);<sp/>}</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>MappingAZposFission-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(ADS_gain*Beam_Energy*1.602E-19*Nparticles));}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposFission-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Printing<sp/>fission<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n****<sp/>Fission<sp/>Rate<sp/>****&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str_unit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%_{wt}.GWh_beam-1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ADS_gain<sp/>!=<sp/>1<sp/>||<sp/>bool_critical_reactor)</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_unit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%_{wt}.GWh_th-1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>int_xbin;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>int_ybin;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Content<sp/>=<sp/>MappingAZposFission-&gt;GetBinContent(i,j);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>std::sqrt(MappingAZposFission-&gt;GetBinContent(i,j));<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>square<sp/>root<sp/>of<sp/>the<sp/>bin<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/>error<sp/>=<sp/>error*std::sqrt(scaling_rawData);<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Renormalize<sp/>by<sp/>the<sp/>square<sp/>root<sp/>of<sp/>the<sp/>scaling<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>error<sp/>=<sp/>error<sp/>/std::sqrt(ADS_gain*Beam_Energy*1.602E-19*Nparticles);}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Content<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion_GWh<sp/>=<sp/>1E3<sp/>*<sp/>3600.<sp/>/<sp/>core_PowerTh;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass_fission<sp/>=<sp/>TMath::Nint(MappingAZposFission-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/>*<sp/>Content<sp/>/<sp/>TMath::Na();</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposFission-&gt;GetXaxis()-&gt;GetBinLowEdge(i))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposFission-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>conversion_GWh<sp/>*<sp/>mass_fission/mass_tot<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>conversion_GWh<sp/>*<sp/>TMath::Nint(MappingAZposFission-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/>*<sp/>error<sp/>/<sp/>TMath::Na()/mass_tot<sp/>&lt;&lt;<sp/>str_unit<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposFission-&gt;GetXaxis()-&gt;GetBinLowEdge(i))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposFission-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>200<sp/>*<sp/>M_qe<sp/>*<sp/>Content/(mass_tot*1E-3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>200<sp/>*<sp/>M_qe<sp/>*<sp/>error/(mass_tot*1E-3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MW/kg_fuel&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposFission-&gt;GetXaxis()-&gt;GetBinLowEdge(i))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposFission-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Content<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>s-1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposFission-&gt;GetXaxis()-&gt;GetBinLowEdge(i))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposFission-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>3600<sp/>*<sp/>1E6<sp/>*<sp/>Content/(material_density<sp/>*<sp/>nbr_bar<sp/>*<sp/>50*TMath::Pi()<sp/>*<sp/>0.5*0.5)<sp/>*<sp/>TMath::Nint(MappingAZposFission-&gt;GetYaxis()-&gt;GetBinCenter(j))/TMath::Na()<sp/>&lt;&lt;<sp/>str_unit<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A:Z<sp/>for<sp/>capture<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingAZposCapture;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CaptureVol<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>&amp;&amp;<sp/>NPosX*NPosX<sp/>+<sp/>NPosY*NPosY<sp/>&gt;<sp/>100*100<sp/>&amp;&amp;<sp/>NPosX*NPosX<sp/>+<sp/>NPosY*NPosY<sp/>&gt;<sp/>200*200<sp/>&amp;&amp;<sp/>NPosZ<sp/>&gt;<sp/>150<sp/>&amp;&amp;<sp/>NPosZ<sp/>&gt;<sp/>-150&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;AvsZ_TransmuteCap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A:Z&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_xbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_ybin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposCapture<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposCapture-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposCapture-&gt;GetZaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ADS_gain<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposCapture-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{th}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposCapture-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Capture<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{beam}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposCapture-&gt;GetZaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposCapture-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposCapture-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/>MappingAZposCapture-&gt;Scale(scaling_rawData);<sp/>}</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{MappingAZposCapture-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(ADS_gain*Beam_Energy*1.602E-19*Nparticles));}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposCapture-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n****<sp/>Capture<sp/>Rate<sp/>****&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str_unit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%_{wt}.GWh_beam-1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ADS_gain<sp/>!=<sp/>1<sp/>||<sp/>bool_critical_reactor)</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_unit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%_{wt}.GWh_th-1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>int_xbin;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>int_ybin;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Content<sp/>=<sp/>MappingAZposCapture-&gt;GetBinContent(i,j);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>std::sqrt(MappingAZposCapture-&gt;GetBinContent(i,j));<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>square<sp/>root<sp/>of<sp/>the<sp/>bin<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/>error<sp/>=<sp/>error*std::sqrt(scaling_rawData);<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Renormalize<sp/>by<sp/>the<sp/>square<sp/>root<sp/>of<sp/>the<sp/>scaling<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>error<sp/>=<sp/>error<sp/>/std::sqrt(ADS_gain*Beam_Energy*1.602E-19*Nparticles);}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Content<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion_GWh<sp/>=<sp/>1E3<sp/>*<sp/>3600.<sp/>/<sp/>core_PowerTh;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass_capture<sp/>=<sp/>TMath::Nint(MappingAZposCapture-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/>*<sp/>Content<sp/>/<sp/>TMath::Na();</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposCapture-&gt;GetXaxis()-&gt;GetBinLowEdge(i))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposCapture-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>conversion_GWh<sp/>*<sp/>mass_capture/mass_tot<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>conversion_GWh<sp/>*<sp/>TMath::Nint(MappingAZposCapture-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/>*<sp/>error<sp/>/<sp/>TMath::Na()/mass_tot<sp/>&lt;&lt;<sp/>str_unit<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposCapture-&gt;GetXaxis()-&gt;GetBinLowEdge(i))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposCapture-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Content<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>s-1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposCapture-&gt;GetXaxis()-&gt;GetBinLowEdge(i))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposCapture-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>3600<sp/>*<sp/>1E6<sp/>*<sp/>Content/(material_density<sp/>*<sp/>nbr_bar<sp/>*<sp/>50*TMath::Pi()<sp/>*<sp/>0.5*0.5)<sp/>*<sp/>TMath::Nint(MappingAZposCapture-&gt;GetYaxis()-&gt;GetBinCenter(j))/TMath::Na()<sp/>&lt;&lt;<sp/>str_unit<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A:Z<sp/>for<sp/>capture<sp/>in<sp/>transmutation<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>MappingAZposInelastic;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cut<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;nXnVol&gt;0<sp/>&amp;&amp;<sp/>InelasticVol&gt;0&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>&amp;&amp;<sp/>NPosX*NPosX<sp/>+<sp/>NPosY*NPosY<sp/>&gt;<sp/>100*100<sp/>&amp;&amp;<sp/>NPosX*NPosX<sp/>+<sp/>NPosY*NPosY<sp/>&gt;<sp/>200*200<sp/>&amp;&amp;<sp/>NPosZ<sp/>&gt;<sp/>150<sp/>&amp;&amp;<sp/>NPosZ<sp/>&gt;<sp/>-150&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;AvsZ_TransmuteInel&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_histoName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A:Z&gt;&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_xbin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Xmax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(int_ybin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(dbl_Ymax)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;Draw(str_histoName.c_str(),<sp/>str_cut.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposInelastic<sp/>=<sp/>(TH2D*)gDirectory-&gt;Get(str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(MappingAZposInelastic)<sp/>{</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposInelastic-&gt;SetNameTitle(str_CanvaName.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposInelastic-&gt;GetZaxis()-&gt;SetTitle((</highlight><highlight class="stringliteral">&quot;Inelastic<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_beamPower).c_str());</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ADS_gain<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposInelastic-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Inelastic<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{th}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposInelastic-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Inelastic<sp/>rate<sp/>[s^{-1}]<sp/>@<sp/>1<sp/>MW_{beam}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposInelastic-&gt;GetZaxis()-&gt;SetTitleOffset(1.3);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposInelastic-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposInelastic-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/>MappingAZposInelastic-&gt;Scale(scaling_rawData);<sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{MappingAZposInelastic-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(ADS_gain*Beam_Energy*1.602E-19*Nparticles));}</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingAZposInelastic-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ADS_gain<sp/>!=<sp/>1<sp/>||<sp/>bool_critical_reactor)</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n****<sp/>Inelastic<sp/>Rate<sp/>[%_{wt}.GWh_th-1]<sp/>****&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n****<sp/>Inelastic<sp/>Rate<sp/>[%_{wt}.GWh_beam-1]<sp/>****&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>int_xbin;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>int_ybin;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Content<sp/>=<sp/>MappingAZposInelastic-&gt;GetBinContent(i,j);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Content<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion_GWh<sp/>=<sp/>1E3<sp/>*<sp/>3600.<sp/>/<sp/>core_PowerTh;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass_capture<sp/>=<sp/>TMath::Nint(MappingAZposInelastic-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/>*<sp/>Content<sp/>/<sp/>TMath::Na();</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposInelastic-&gt;GetXaxis()-&gt;GetBinLowEdge(i))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposInelastic-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>conversion_GWh<sp/>*<sp/>mass_capture/mass_tot<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposInelastic-&gt;GetXaxis()-&gt;GetBinLowEdge(i))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TMath::Nint(MappingAZposInelastic-&gt;GetYaxis()-&gt;GetBinCenter(j))<sp/></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>100<sp/>*<sp/>3600<sp/>*<sp/>1E6<sp/>*<sp/>Content/(material_density<sp/>*<sp/>nbr_bar<sp/>*<sp/>50*TMath::Pi()<sp/>*<sp/>0.5*0.5)<sp/>*<sp/>TMath::Nint(MappingAZposInelastic-&gt;GetYaxis()-&gt;GetBinCenter(j))/TMath::Na()<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fission<sp/>and<sp/>capture<sp/>energy<sp/>spectrum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Emin<sp/>=<sp/>1E-5;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/>dbl_Emax<sp/>=<sp/>1E9;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/>Emin_log<sp/>=<sp/>TMath::Log10(dbl_Emin);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/>Emax_log<sp/>=<sp/>TMath::Log10(dbl_Emax);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>Ebin_width<sp/>=<sp/>(<sp/>Emax_log<sp/>-<sp/>Emin_log)<sp/>/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>int_nbins;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>Ebins[0]<sp/>=<sp/>dbl_Emin;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>int_nbins;<sp/>++k)</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ebins[k]<sp/>=<sp/>dbl_Emin<sp/>+<sp/>TMath::Power(10,<sp/>Emin_log<sp/>+<sp/>k<sp/>*<sp/>Ebin_width);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>FissionSpectrum;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>FissionVolume<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(</highlight><highlight class="stringliteral">&quot;dNdVol_Fis&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>61,<sp/>60,<sp/>120);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dNdE_TranmuteFis_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(AtomicMass)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(AtomicNumb);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionSpectrum<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionSpectrum-&gt;SetBins(int_nbins,<sp/>Ebins);<sp/></highlight><highlight class="comment">//<sp/>Logarithmic<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionSpectrum-&gt;SetNameTitle(<sp/>(</highlight><highlight class="stringliteral">&quot;h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName).c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionSpectrum-&gt;Sumw2(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionVolume-&gt;Sumw2(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nentries<sp/>=<sp/>(int)TransmutationInfo-&gt;GetEntries();</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energyK,<sp/>n_Fluence;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>NPosX,NPosY,NPosZ,<sp/>A,<sp/>Z;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FissionVol;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;nentries;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;GetEntry(k);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionVol<sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;FissionVol&quot;</highlight><highlight class="normal">)-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPosX<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosX&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPosY<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosY&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPosZ<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosZ&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energyK<sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;energyK&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_Fluence<sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;n_Fluence&quot;</highlight><highlight class="normal">)<sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>FissionVol<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>A<sp/>&gt;<sp/>AtomicMass-0.5<sp/>&amp;&amp;<sp/>A<sp/>&lt;<sp/>AtomicMass+0.5<sp/>&amp;&amp;<sp/>Z<sp/>&gt;<sp/>AtomicNumb-0.5<sp/>&amp;&amp;<sp/>Z<sp/>&lt;<sp/>AtomicNumb+0.5)<sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>NPosX*NPosX<sp/>+<sp/>NPosY*NPosY<sp/>&gt;<sp/>100*100<sp/>&amp;&amp;<sp/>NPosX*NPosX<sp/>+<sp/>NPosY*NPosY<sp/>&lt;<sp/>200*200<sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionSpectrum-&gt;Fill(energyK);<sp/></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionVolume-&gt;Fill(FissionVol);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogx();</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionSpectrum-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Energy<sp/>[eV]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionSpectrum-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;dN/d(log_{10}(E))<sp/>@<sp/>1<sp/>MW_{th}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/>FissionSpectrum-&gt;Scale(scaling_rawData);<sp/>}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{FissionSpectrum-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(ADS_gain*Beam_Energy*1.602E-19*Nparticles));}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionSpectrum-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>CaptureSpectrum;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>CaptureVolume<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(</highlight><highlight class="stringliteral">&quot;dNdVol_Cap&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>61,<sp/>60,<sp/>120);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dNdE_TranmuteCap_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(AtomicMass)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(AtomicNumb);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureSpectrum<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureSpectrum-&gt;SetBins(int_nbins,<sp/>Ebins);<sp/></highlight><highlight class="comment">//<sp/>Logarithmic<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureSpectrum-&gt;SetNameTitle(<sp/>(</highlight><highlight class="stringliteral">&quot;h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>str_CanvaName).c_str(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureSpectrum-&gt;Sumw2(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureVolume-&gt;Sumw2(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nentries<sp/>=<sp/>(int)TransmutationInfo-&gt;GetEntries();</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energyK,<sp/>n_Fluence;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>NPosX,NPosY,NPosZ,<sp/>A,<sp/>Z;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CaptureVol;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;nentries;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;GetEntry(k);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureVol<sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;CaptureVol&quot;</highlight><highlight class="normal">)-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPosX<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosX&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPosY<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosY&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NPosZ<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosZ&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>energyK<sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;energyK&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_Fluence<sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(&quot;n_Fluence&quot;)<sp/>-&gt;GetValue(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>CaptureVol<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>A<sp/>&gt;<sp/>AtomicMass-0.5<sp/>&amp;&amp;<sp/>A<sp/>&lt;<sp/>AtomicMass+0.5<sp/>&amp;&amp;<sp/>Z<sp/>&gt;<sp/>AtomicNumb-0.5<sp/>&amp;&amp;<sp/>Z<sp/>&lt;<sp/>AtomicNumb+0.5<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>NPosX*NPosX<sp/>+<sp/>NPosY*NPosY<sp/>&gt;<sp/>100*100<sp/>&amp;&amp;<sp/>NPosX*NPosX<sp/>+<sp/>NPosY*NPosY<sp/>&lt;<sp/>200*200<sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureSpectrum-&gt;Fill(energyK);<sp/></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureVolume-&gt;Fill(CaptureVol);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogx();</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogy();</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureSpectrum-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Energy<sp/>[eV]&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureSpectrum-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;dN/d(log(E))<sp/>@<sp/>1<sp/>MW_{th}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/>CaptureSpectrum-&gt;Scale(scaling_rawData);<sp/>}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{CaptureSpectrum-&gt;Scale(1./(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(ADS_gain*Beam_Energy*1.602E-19*Nparticles));}</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureSpectrum-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/>Nhisto<sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Histogram<sp/>of<sp/>fissions<sp/>over<sp/>absorptions<sp/>ratio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>FisOverAbsSpectrum<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(</highlight><highlight class="stringliteral">&quot;dNdVol_FisOverAbs&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>61,<sp/>60,<sp/>120);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nhisto<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_CanvaName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dNdVol_FisOverAbs_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(AtomicMass)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(AtomicNumb);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FisOverAbsSpectrum-&gt;Sumw2(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FisOverAbsSpectrum-&gt;Add(FissionVolume,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>of<sp/>fission<sp/>rate<sp/>histo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaptureVolume-&gt;Add(FissionVolume,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>Fission<sp/>to<sp/>capture<sp/>to<sp/>get<sp/>total<sp/>absorption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FisOverAbsSpectrum-&gt;Divide(CaptureVolume);<sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>Fission<sp/>by<sp/>Absorption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(str_CanvaName.c_str(),str_CanvaName.c_str());</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FisOverAbsSpectrum-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Volume<sp/>number&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FisOverAbsSpectrum-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Fission<sp/>over<sp/>Absorption&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FisOverAbsSpectrum-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_root)<sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(save_png)<sp/><sp/>{<sp/>histo[0]-&gt;SaveAs((str_CanvaName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal"><sp/>).c_str());}</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongZ1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(</highlight><highlight class="stringliteral">&quot;AlongZ1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>60,<sp/>-3,<sp/>3);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongR1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(</highlight><highlight class="stringliteral">&quot;AlongR1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>30,<sp/>0,<sp/>30);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongTheta1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(</highlight><highlight class="stringliteral">&quot;AlongTheta1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>24,<sp/>0,<sp/>360.);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>ProjZ1<sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH2D(</highlight><highlight class="stringliteral">&quot;ProjZ1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>60,<sp/>-3,<sp/>3,<sp/>60,<sp/>-30,<sp/>30);</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>RTheta1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH2D(</highlight><highlight class="stringliteral">&quot;RTheta1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>60,-30,<sp/>30,<sp/>60,-30,<sp/>30);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/>TTree*<sp/>TransmutationInfo<sp/>=<sp/>(TTree*)<sp/>f_ROOT-&gt;GetObjectChecked((</highlight><highlight class="stringliteral">&quot;TransmutationInfo&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;TTree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nentries<sp/>=<sp/>(int)TransmutationInfo-&gt;GetEntries(),<sp/>counter<sp/>=<sp/>nentries/15;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eDep,<sp/>Xpos,<sp/>Ypos,<sp/>Zpos;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>vec_XYZ;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vec_Edep;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>Edep_target_file;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>Edep_target_file.open(&quot;Edep_target_50kW.txt&quot;,std::ios::out);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;nentries;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;GetEntry(k);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xpos<sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosX&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ypos<sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosY&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Zpos<sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosZ&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eDep<sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;energyK&quot;</highlight><highlight class="normal">)-&gt;GetValue(0)<sp/>*<sp/>Beam_Power/(double)Nparticles;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;k<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;k/counter<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k/counter<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;counter<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>counter<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(vec_XYZ.size()<sp/>&lt;<sp/>counter)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_XYZ.push_back(<sp/>{Xpos,<sp/>Ypos,<sp/>Zpos}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep.push_back(<sp/>eDep<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep[k-(k/counter)<sp/>*<sp/>counter]<sp/>+=<sp/>eDep;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongZ1-&gt;Fill(Xpos,<sp/>eDep);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongR1-&gt;Fill(std::sqrt(Ypos*Ypos+<sp/>Zpos*Zpos),<sp/>eDep);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>std::atan2(Zpos,Ypos)<sp/>*<sp/>180./TMath::Pi();</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theta<sp/>&lt;<sp/>0)<sp/>{<sp/>theta<sp/>=<sp/>360.<sp/>+<sp/>theta;}</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongTheta1-&gt;Fill(theta,<sp/>eDep);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProjZ1<sp/>-&gt;Fill(Xpos,<sp/>std::sqrt(<sp/>Ypos*Ypos<sp/>+<sp/>Zpos*Zpos)*std::sin(theta*TMath::Pi()/180.),<sp/>eDep);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTheta-&gt;Fill(Rpos*std::cos(Theta_pos*3.14/180.),<sp/>Rpos*std::sin(Theta_pos*3.14/180.),<sp/>eDep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;Fill(Zpos,<sp/>Ypos,<sp/>eDep<sp/>/<sp/>(0.1*0.1*0.5));</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>found<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec_XYZ.size();<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(vec_XYZ[i][0]<sp/>==<sp/>Xpos<sp/>&amp;&amp;<sp/>vec_XYZ[i][1]<sp/>==<sp/>Ypos<sp/>&amp;&amp;<sp/>vec_XYZ[i][2]<sp/>==<sp/>Zpos)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep[i]<sp/>+=<sp/>eDep;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Found<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>(!found)<sp/>&amp;&amp;<sp/>eDep<sp/>&gt;<sp/>1E-10)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_XYZ.push_back(<sp/>{Xpos,<sp/>Ypos,<sp/>Zpos}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep.push_back(<sp/>eDep<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Not<sp/>found<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>vec_XYZ.size()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>counter<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(vec_XYZ.size()<sp/>==<sp/>0<sp/>||<sp/>(vec_XYZ[k-k/counter][0]<sp/>!=<sp/>Xpos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][1]<sp/>!=<sp/>Ypos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][2]<sp/>!=<sp/>Zpos))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_XYZ.push_back(<sp/>{Xpos,<sp/>Ypos,<sp/>Zpos}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep.push_back(<sp/>eDep<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(vec_XYZ[k-k/counter][0]<sp/>==<sp/>Xpos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][1]<sp/>==<sp/>Ypos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][2]<sp/>==<sp/>Zpos)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep[k-k/counter]<sp/>+=<sp/>eDep;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edep_target_file<sp/>&lt;&lt;<sp/>Xpos<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>Ypos<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>Zpos<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>eDep<sp/>/*&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>eDep<sp/>*<sp/>Volume*/<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec_XYZ.size();<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edep_target_file<sp/>&lt;&lt;<sp/>vec_XYZ[i][0]<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>vec_XYZ[i][1]<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>vec_XYZ[i][2]<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>vec_Edep[i]<sp/>/*&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>eDep<sp/>*<sp/>Volume*/<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>Edep_target_file.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;AlongR_c1&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;AlongR_c1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongR1-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;ProjZ_c1&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;ProjZ_c1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>ProjZ1-&gt;Draw(</highlight><highlight class="stringliteral">&quot;COLZ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;RTheta_c1&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;RTheta_c1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogz();</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongZ1-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Power<sp/>density<sp/>[W/cm^{3}]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>RTheta1-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>RTheta1-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>RTheta1-&gt;GetZaxis()-&gt;SetRangeUser(0,12000);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>RTheta1-&gt;Draw(</highlight><highlight class="stringliteral">&quot;COLZ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>TCanvas*<sp/>can<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;c1&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;c1&quot;</highlight><highlight class="normal">,1200,800);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>can-&gt;Divide(2,2);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>can-&gt;cd(1);</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetXaxis()-&gt;SetRangeUser(-30,30);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetYaxis()-&gt;SetRangeUser(-30,30);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetZaxis()-&gt;SetTitle(&quot;Number<sp/>of<sp/>source<sp/>protons&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetYaxis()-&gt;SetTitle(&quot;Z<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetXaxis()-&gt;SetTitle(&quot;Y<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;Draw(&quot;colz&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>can-&gt;cd(2);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongZ1-&gt;Scale(1/<sp/>(0.01<sp/>*<sp/>TMath::Pi()*3*3)<sp/>);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongZ1-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Power<sp/>density<sp/>[W/cm^{3}]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongZ1-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Depth<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongZ1-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>can-&gt;cd(3);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>RTheta1-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>RTheta1-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/>RTheta1-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Power<sp/>density<sp/>[W/cm^{3}]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>RTheta1-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edep<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongZ1<sp/>=<sp/>new<sp/>TH1D(&quot;AlongZ1&quot;,<sp/>&quot;&quot;,<sp/>13,<sp/>-305.5,<sp/>305.5);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongR1<sp/>=<sp/>new<sp/>TH1D(&quot;AlongR1&quot;,<sp/>&quot;&quot;,<sp/>60,<sp/>0,<sp/>60);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongTheta1<sp/>=<sp/>new<sp/>TH1D(&quot;AlongTheta1&quot;,<sp/>&quot;&quot;,<sp/>24,<sp/>0,<sp/>360.);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>ProjZ1<sp/><sp/>=<sp/>new<sp/>TH2D(&quot;ProjZ1&quot;,<sp/>&quot;&quot;,<sp/>50,<sp/>-15,<sp/>15,<sp/>60,<sp/>-30,<sp/>30);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>RTheta1<sp/>=<sp/>new<sp/>TH2D(&quot;RTheta1&quot;,<sp/>&quot;&quot;,<sp/>60,-30,<sp/>30,<sp/>60,-30,<sp/>30);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>TTree*<sp/>TransmutationInfo<sp/>=<sp/>(TTree*)<sp/>f_ROOT-&gt;GetObjectChecked((</highlight><highlight class="stringliteral">&quot;TransmutationInfo&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;TTree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nentries<sp/>=<sp/>(int)TransmutationInfo-&gt;GetEntries(),<sp/>counter<sp/>=<sp/>nentries/15;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eDep,<sp/>Xpos,<sp/>Ypos,<sp/>Zpos;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>vec_XYZ;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vec_Edep;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>Edep_target_file;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>Edep_target_file.open(&quot;Edep_target_50kW.txt&quot;,std::ios::out);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;nentries;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TransmutationInfo-&gt;GetEntry(k);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xpos<sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosX&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ypos<sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosY&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Zpos<sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosZ&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eDep<sp/>=<sp/>TransmutationInfo-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;energyK&quot;</highlight><highlight class="normal">)-&gt;GetValue(0)<sp/>*<sp/>Beam_Power/(double)Nparticles;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;k<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;k/counter<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k/counter<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;counter<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>counter<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(vec_XYZ.size()<sp/>&lt;<sp/>counter)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_XYZ.push_back(<sp/>{Xpos,<sp/>Ypos,<sp/>Zpos}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep.push_back(<sp/>eDep<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep[k-(k/counter)<sp/>*<sp/>counter]<sp/>+=<sp/>eDep;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongZ1-&gt;Fill(Zpos,<sp/>eDep);</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongZ1-&gt;Fill(Xpos,<sp/>eDep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongR1-&gt;Fill(std::sqrt(Ypos*Ypos+<sp/>Zpos*Zpos),<sp/>eDep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>theta<sp/>=<sp/>std::atan2(Zpos,Ypos)<sp/>*<sp/>180./TMath::Pi();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(theta<sp/>&lt;<sp/>0)<sp/>{<sp/>theta<sp/>=<sp/>360.<sp/>+<sp/>theta;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongTheta1-&gt;Fill(theta,<sp/>eDep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProjZ1<sp/>-&gt;Fill(Xpos,<sp/>Ypos,<sp/>eDep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTheta-&gt;Fill(Rpos*std::cos(Theta_pos*3.14/180.),<sp/>Rpos*std::sin(Theta_pos*3.14/180.),<sp/>eDep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;Fill(Zpos,<sp/>Ypos,<sp/>eDep<sp/>/<sp/>(0.1*0.1*3));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>found<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec_XYZ.size();<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(vec_XYZ[i][0]<sp/>==<sp/>Xpos<sp/>&amp;&amp;<sp/>vec_XYZ[i][1]<sp/>==<sp/>Ypos<sp/>&amp;&amp;<sp/>vec_XYZ[i][2]<sp/>==<sp/>Zpos)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep[i]<sp/>+=<sp/>eDep;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Found<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>(!found)<sp/>&amp;&amp;<sp/>eDep<sp/>&gt;<sp/>1E-10)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_XYZ.push_back(<sp/>{Xpos,<sp/>Ypos,<sp/>Zpos}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep.push_back(<sp/>eDep<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Not<sp/>found<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>vec_XYZ.size()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>counter<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(vec_XYZ.size()<sp/>==<sp/>0<sp/>||<sp/>(vec_XYZ[k-k/counter][0]<sp/>!=<sp/>Xpos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][1]<sp/>!=<sp/>Ypos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][2]<sp/>!=<sp/>Zpos))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_XYZ.push_back(<sp/>{Xpos,<sp/>Ypos,<sp/>Zpos}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep.push_back(<sp/>eDep<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(vec_XYZ[k-k/counter][0]<sp/>==<sp/>Xpos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][1]<sp/>==<sp/>Ypos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][2]<sp/>==<sp/>Zpos)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep[k-k/counter]<sp/>+=<sp/>eDep;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edep_target_file<sp/>&lt;&lt;<sp/>Xpos<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>Ypos<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>Zpos<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>eDep<sp/>/*&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>eDep<sp/>*<sp/>Volume*/<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec_XYZ.size();<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edep_target_file<sp/>&lt;&lt;<sp/>vec_XYZ[i][0]<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>vec_XYZ[i][1]<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>vec_XYZ[i][2]<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>vec_Edep[i]<sp/>/*&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>eDep<sp/>*<sp/>Volume*/<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>Edep_target_file.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;AlongZ_c1&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;AlongZ_c1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongZ1-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/>new<sp/>TCanvas(&quot;AlongR_c1&quot;,&quot;AlongR_c1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>AlongR1-&gt;Draw(&quot;HIST<sp/>E&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/>new<sp/>TCanvas(&quot;ProjZ_c1&quot;,&quot;ProjZ_c1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>ProjZ1-&gt;Draw(&quot;COLZ&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/>new<sp/>TCanvas(&quot;RTheta_c1&quot;,&quot;RTheta_c1&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogz();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>AlongZ1-&gt;GetZaxis()-&gt;SetTitle(&quot;Power<sp/>density<sp/>[W/cm^{3}]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;GetYaxis()-&gt;SetTitle(&quot;Z<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;GetXaxis()-&gt;SetTitle(&quot;Y<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;GetZaxis()-&gt;SetRangeUser(0,2000);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;Draw(&quot;COLZ&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>TCanvas*<sp/>can<sp/>=<sp/>new<sp/>TCanvas(&quot;c1&quot;,&quot;c1&quot;,1200,800);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>can-&gt;Divide(2,2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>can-&gt;cd(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetXaxis()-&gt;SetRangeUser(-30,30);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetYaxis()-&gt;SetRangeUser(-30,30);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetZaxis()-&gt;SetTitle(&quot;Number<sp/>of<sp/>source<sp/>protons&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetYaxis()-&gt;SetTitle(&quot;Z<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetXaxis()-&gt;SetTitle(&quot;Y<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;Draw(&quot;colz&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>can-&gt;cd(2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>AlongZ1-&gt;Scale(1/<sp/>(0.03<sp/>*<sp/>TMath::Pi()*3*3)<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>AlongZ1-&gt;GetYaxis()-&gt;SetTitle(&quot;Power<sp/>density<sp/>[W/cm^{3}]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>AlongZ1-&gt;GetXaxis()-&gt;SetTitle(&quot;Depth<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>AlongZ1-&gt;Draw(&quot;HIST<sp/>E&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>can-&gt;cd(3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;GetYaxis()-&gt;SetTitle(&quot;Z<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;GetXaxis()-&gt;SetTitle(&quot;Y<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;GetZaxis()-&gt;SetTitle(&quot;Power<sp/>density<sp/>[W/cm^{3}]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;Draw(&quot;colz&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/>TTree*<sp/>DepostiedPower<sp/>=<sp/>(TTree*)<sp/>f_ROOT-&gt;GetObjectChecked((</highlight><highlight class="stringliteral">&quot;DepostiedPower&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;TTree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nentries<sp/>=<sp/>(int)DepostiedPower-&gt;GetEntries(),<sp/>counter<sp/>=<sp/>nentries/15;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eDep,<sp/>Xpos,<sp/>Ypos,<sp/>Zpos;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxEdep<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>pos<sp/>(3,0);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DeltaX<sp/>=<sp/>286.<sp/><sp/><sp/><sp/>/12.;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DeltaY<sp/>=<sp/>357.5<sp/><sp/><sp/>/15.;</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DeltaZ<sp/>=<sp/>305.5*2<sp/>/13.;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongZ<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(</highlight><highlight class="stringliteral">&quot;AlongZ&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>13,<sp/>-305.5,<sp/>305.5);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongR<sp/>=<sp/>new<sp/>TH1D(&quot;AlongR&quot;,<sp/>&quot;&quot;,<sp/>60,<sp/>0,<sp/>60);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>ProjZ<sp/><sp/>=<sp/>new<sp/>TH2D(&quot;ProjZ&quot;,<sp/>&quot;&quot;,<sp/>40,<sp/>-20,<sp/>20,<sp/>60,<sp/>-30,<sp/>30);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>RTheta<sp/>=<sp/>new<sp/>TH2D(&quot;RTheta&quot;,<sp/>&quot;&quot;,<sp/>60,-30,<sp/>30,<sp/>60,<sp/>0.,<sp/>2.*TMath::Pi());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>RTheta<sp/>=<sp/>new<sp/>TH2D(&quot;RTheta&quot;,<sp/>&quot;&quot;,<sp/>60,-30,<sp/>30,<sp/>60,-30,<sp/>30);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/>TH3D*<sp/>h_XYZ<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH3D(</highlight><highlight class="stringliteral">&quot;h_XYZ&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>24,-DeltaX*12,<sp/>DeltaX*12,<sp/>30,-DeltaY*15,<sp/>DeltaY*15,<sp/>13,<sp/>-DeltaZ/2.*13,<sp/>DeltaZ/2.*13);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>vec_XYZ;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vec_Edep;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>Edep_target_file;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Edep_target_file.open(&quot;Edep_target_50kW.txt&quot;,std::ios::out);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;nentries;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DepostiedPower-&gt;GetEntry(k);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xpos<sp/>=<sp/>DepostiedPower-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosX&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);<sp/><sp/></highlight><highlight class="comment">//<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ypos<sp/>=<sp/>DepostiedPower-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosY&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);<sp/><sp/></highlight><highlight class="comment">//<sp/>theta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Zpos<sp/>=<sp/>DepostiedPower-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosZ&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eDep<sp/>=<sp/>DepostiedPower-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;energyK&quot;</highlight><highlight class="normal">)-&gt;GetValue(0)<sp/>*<sp/>Beam_Power/(double)Nparticles;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_XYZ-&gt;Fill(Xpos,Ypos,Zpos,eDep);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongZ-&gt;Fill(Zpos,<sp/>eDep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongR-&gt;Fill(Xpos,<sp/>eDep<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProjZ<sp/>-&gt;Fill(Zpos,<sp/>Xpos,<sp/>eDep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTheta-&gt;Fill(Xpos,<sp/>Ypos,<sp/>eDep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>Xpos<sp/>&lt;<sp/><sp/>8*DeltaX<sp/>&amp;&amp;<sp/>Xpos<sp/>&gt;=<sp/><sp/>7*DeltaX</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>Ypos<sp/>&lt;<sp/>-3*DeltaY<sp/>&amp;&amp;<sp/>Ypos<sp/>&gt;=<sp/>-4*DeltaY)<sp/>{</highlight><highlight class="comment">//<sp/>8/7<sp/>-3/-4<sp/>//<sp/>9/6<sp/>-3/-6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongZ-&gt;Fill(Zpos,<sp/>eDep*1000./(DeltaX*DeltaY*DeltaZ)</highlight><highlight class="comment">/*/9.*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>Xpos<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Ypos<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Zpos<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongZ-&gt;Fill(Xpos,<sp/>eDep<sp/>*<sp/>Beam_Power/(double)Nparticles);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongR-&gt;Fill(std::sqrt(Ypos*Ypos<sp/>+<sp/>Zpos*Zpos),<sp/>eDep<sp/>*<sp/>Beam_Power/(double)Nparticles<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProjZ<sp/>-&gt;Fill(Xpos,<sp/>std::sqrt(Ypos*Ypos<sp/>+<sp/>Zpos*Zpos),<sp/>eDep<sp/>*<sp/>Beam_Power/(double)Nparticles);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTheta-&gt;Fill(Ypos,<sp/>Zpos,<sp/>eDep<sp/>*<sp/>Beam_Power/(double)Nparticles);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;k<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;k/counter<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k/counter<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;counter<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>counter<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(vec_XYZ.size()<sp/>&lt;<sp/>counter)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_XYZ.push_back(<sp/>{Xpos,<sp/>Ypos,<sp/>Zpos}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep.push_back(<sp/>eDep<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep[k-(k/counter)<sp/>*<sp/>counter]<sp/>+=<sp/>eDep;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>found<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec_XYZ.size();<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(vec_XYZ[i][0]<sp/>==<sp/>Xpos<sp/>&amp;&amp;<sp/>vec_XYZ[i][1]<sp/>==<sp/>Ypos<sp/>&amp;&amp;<sp/>vec_XYZ[i][2]<sp/>==<sp/>Zpos)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep[i]<sp/>+=<sp/>eDep;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Found<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>(!found)<sp/>&amp;&amp;<sp/>eDep<sp/>&gt;<sp/>1E-10)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_XYZ.push_back(<sp/>{Xpos,<sp/>Ypos,<sp/>Zpos}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep.push_back(<sp/>eDep<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Not<sp/>found<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>vec_XYZ.size()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>counter<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(vec_XYZ.size()<sp/>==<sp/>0<sp/>||<sp/>(vec_XYZ[k-k/counter][0]<sp/>!=<sp/>Xpos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][1]<sp/>!=<sp/>Ypos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][2]<sp/>!=<sp/>Zpos))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_XYZ.push_back(<sp/>{Xpos,<sp/>Ypos,<sp/>Zpos}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep.push_back(<sp/>eDep<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(vec_XYZ[k-k/counter][0]<sp/>==<sp/>Xpos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][1]<sp/>==<sp/>Ypos<sp/>&amp;&amp;<sp/>vec_XYZ[k-k/counter][2]<sp/>==<sp/>Zpos)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_Edep[k-k/counter]<sp/>+=<sp/>eDep;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edep_target_file<sp/>&lt;&lt;<sp/>Xpos<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>Ypos<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>Zpos<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>eDep<sp/>/*&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>eDep<sp/>*<sp/>Volume*/<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>binX=0;<sp/>binX&lt;<sp/>h_XYZ-&gt;GetNbinsX();++binX)<sp/>{</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>binY=0;<sp/>binY&lt;<sp/>h_XYZ-&gt;GetNbinsY();++binY)<sp/>{</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>binZ=0;<sp/>binZ&lt;<sp/>h_XYZ-&gt;GetNbinsZ();++binZ)<sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>maxEdep<sp/>&lt;<sp/>h_XYZ-&gt;GetBinContent(h_XYZ-&gt;GetBin(binX,binY,binZ)))<sp/>{</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxEdep<sp/>=<sp/>h_XYZ-&gt;GetBinContent(h_XYZ-&gt;GetBin(binX,binY,binZ));</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>{h_XYZ-&gt;GetXaxis()-&gt;GetBinCenter(binX),<sp/>h_XYZ-&gt;GetYaxis()-&gt;GetBinCenter(binY),<sp/>h_XYZ-&gt;GetZaxis()-&gt;GetBinCenter(binZ)};</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec_XYZ.size();<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edep_target_file<sp/>&lt;&lt;<sp/>vec_XYZ[i][0]<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>vec_XYZ[i][1]<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>vec_XYZ[i][2]<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>vec_Edep[i]<sp/>/*&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>eDep<sp/>*<sp/>Volume*/<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>Edep_target_file.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;max<sp/>Edep<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>maxEdep*1000./(DeltaX*DeltaY*DeltaZ)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>W/cm3<sp/>at<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pos[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pos[1]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pos[2]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;AlongZ_c&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;AlongZ_c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongZ-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/>new<sp/>TCanvas(&quot;AlongR_c&quot;,&quot;AlongR_c&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>AlongR-&gt;Draw(&quot;HIST<sp/>E&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/>new<sp/>TCanvas(&quot;ProjZ_c&quot;,&quot;ProjZ_c&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>ProjZ-&gt;Draw(&quot;COLZ&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/>new<sp/>TCanvas(&quot;RTheta_c&quot;,&quot;RTheta_c&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogz();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta-&gt;Draw(&quot;POL<sp/>COLZ&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TTree*<sp/>DepostiedPower<sp/>=<sp/>(TTree*)<sp/>f_ROOT-&gt;GetObjectChecked((&quot;DepostiedPower&quot;),<sp/>&quot;TTree&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/>TTree*<sp/>DepostiedPower<sp/>=<sp/>(TTree*)<sp/>f_ROOT-&gt;GetObjectChecked((</highlight><highlight class="stringliteral">&quot;DepositedPower&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;TTree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nentries<sp/>=<sp/>(int)DepostiedPower-&gt;GetEntries(),<sp/>counter<sp/>=<sp/>nentries/15;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eDep,<sp/>Rpos,<sp/>Theta_pos,<sp/>Zpos;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h_nbinsR<sp/><sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_minR<sp/>=<sp/><sp/>0;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_maxR<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h_nbinsTheta<sp/><sp/>=<sp/><sp/><sp/>1;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_minTheta<sp/>=<sp/><sp/><sp/>0;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_maxTheta<sp/>=<sp/>360;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h_nbinsZ<sp/><sp/>=<sp/><sp/>110;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_minZ<sp/>=<sp/><sp/>-21;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_maxZ<sp/>=<sp/><sp/><sp/><sp/>1;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>int<sp/>h_nbinsZ<sp/><sp/>=<sp/><sp/>140;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>h_minZ<sp/>=<sp/>-7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>h_maxZ<sp/>=<sp/><sp/>7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>int<sp/>h_nbinsZ<sp/><sp/>=<sp/><sp/>220;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>h_minZ<sp/>=<sp/>-115;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>h_maxZ<sp/>=<sp/>-<sp/><sp/>5;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>Target_thickness<sp/>=<sp/>2.8;<sp/>//<sp/>cm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>Target_thickness<sp/>=<sp/>0.5;<sp/>//<sp/>cm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>Target_thickness<sp/>=<sp/>1.3;<sp/>//<sp/>cm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongZ<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(</highlight><highlight class="stringliteral">&quot;AlongZ&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>h_nbinsZ,<sp/>h_minZ,<sp/>h_maxZ);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongZ<sp/>=<sp/>new<sp/>TH1D(&quot;AlongZ&quot;,<sp/>&quot;&quot;,<sp/>h_nbinsZ,<sp/>-10,<sp/>10);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongR<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(</highlight><highlight class="stringliteral">&quot;AlongR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>h_nbinsR,<sp/>h_minR,<sp/>h_maxR);</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>AlongTheta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D(</highlight><highlight class="stringliteral">&quot;AlongTheta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>h_nbinsTheta,<sp/>h_minTheta,<sp/>h_maxTheta);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>ProjZ<sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH2D(</highlight><highlight class="stringliteral">&quot;ProjZ&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>2*h_nbinsR,<sp/>-h_maxR,<sp/>h_maxR,<sp/>h_nbinsZ,<sp/>h_minZ,<sp/>h_maxZ);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>RTheta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH2D(</highlight><highlight class="stringliteral">&quot;RTheta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>h_nbinsTheta,<sp/>h_minTheta,<sp/>h_maxTheta*TMath::Pi()/180.,<sp/>h_nbinsR,h_minR,<sp/>h_maxR);</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TH2D*<sp/>RTheta<sp/>=<sp/>new<sp/>TH2D(&quot;RTheta&quot;,<sp/>&quot;&quot;,<sp/>2*h_nbinsR,-h_maxR,<sp/>h_maxR,<sp/>2*h_nbinsR,-h_maxR,<sp/>h_maxR);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/>TH3D*<sp/>RThetaZ_Edep<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH3D(</highlight><highlight class="stringliteral">&quot;RThetaZ_Edep&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>h_nbinsR,<sp/>h_minR,<sp/>h_maxR,<sp/>h_nbinsTheta,<sp/>h_minTheta,<sp/>h_maxTheta,<sp/>h_nbinsZ,<sp/>h_minZ,<sp/>h_maxZ);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TH3D*<sp/>RThetaZ_Eden<sp/>=<sp/>new<sp/>TH3D(&quot;RThetaZ_Eden&quot;,<sp/>&quot;&quot;,<sp/>h_nbinsR,<sp/>h_minR,<sp/>h_maxR,<sp/>h_nbinsTheta,<sp/>h_minTheta,<sp/>h_maxTheta,<sp/>h_nbinsZ,<sp/>h_minZ,<sp/>h_maxZ);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>vec_XYZ;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vec_Edep;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>Edep_target_file;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>Edep_target_file.open(</highlight><highlight class="stringliteral">&quot;Edep_FastZone.txt&quot;</highlight><highlight class="normal">,std::ios::out);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;nentries;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DepostiedPower-&gt;GetEntry(k);</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rpos<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DepostiedPower-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosX&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);<sp/><sp/></highlight><highlight class="comment">//<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Theta_pos<sp/>=<sp/>DepostiedPower-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosY&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);<sp/><sp/></highlight><highlight class="comment">//<sp/>theta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Zpos<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DepostiedPower-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;NPosZ&quot;</highlight><highlight class="normal">)<sp/><sp/>-&gt;GetValue(0);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bool_critical_reactor)<sp/>{<sp/>eDep<sp/>=<sp/>DepostiedPower-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;energyK&quot;</highlight><highlight class="normal">)-&gt;GetValue(0)<sp/>*<sp/>scaling_factor*M_qe;}</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>eDep<sp/>=<sp/>DepostiedPower-&gt;GetLeaf(</highlight><highlight class="stringliteral">&quot;energyK&quot;</highlight><highlight class="normal">)-&gt;GetValue(0)<sp/>*<sp/>rescaling_Data*M_qe;}</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Theta_pos<sp/>+=<sp/>60;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(Theta_pos<sp/>&gt;<sp/>360)<sp/>{<sp/>Theta_pos<sp/>-=<sp/>360;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Zpos<sp/>+=<sp/>95./30.<sp/>*<sp/>Rpos<sp/>+<sp/>18.;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongZ-&gt;Fill(Zpos,<sp/>eDep);</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongR-&gt;Fill(Rpos,<sp/>eDep);</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongTheta-&gt;Fill(Theta_pos,<sp/>eDep);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProjZ<sp/>-&gt;Fill(Rpos*std::cos(Theta_pos*TMath::Pi()/180.),<sp/>Zpos,<sp/>eDep);</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTheta-&gt;Fill(Rpos*std::cos(Theta_pos*TMath::Pi()/180.),<sp/>Rpos*std::sin(Theta_pos*TMath::Pi()/180.),<sp/>eDep*1000./((h_maxZ-h_minZ)<sp/>*<sp/>h_maxR*h_maxR/h_nbinsR/h_nbinsR));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTheta-&gt;Fill(Theta_pos*TMath::Pi()/180.,<sp/>Rpos,<sp/>eDep);</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RThetaZ_Edep-&gt;Fill(Rpos,Theta_pos,Zpos,eDep);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RThetaZ_Eden-&gt;Fill(Rpos,Theta_pos,Zpos,eDep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for(int<sp/>r<sp/>=1;<sp/>r&lt;<sp/>AlongR-&gt;GetXaxis()-&gt;GetNbins()+1;<sp/>++r)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlongR-&gt;SetBinContent(r,<sp/>AlongR-&gt;GetBinContent(r)<sp/>/<sp/>((h_maxZ-h_minZ)/10.<sp/>*<sp/>TMath::Pi()/180.*(h_maxTheta-h_minTheta)<sp/>*<sp/>(AlongR-&gt;GetXaxis()-&gt;GetBinLowEdge(r+1)*AlongR-&gt;GetXaxis()-&gt;GetBinLowEdge(r+1)<sp/>-<sp/>AlongR-&gt;GetXaxis()-&gt;GetBinLowEdge(r)*AlongR-&gt;GetXaxis()-&gt;GetBinLowEdge(r))/2./100.));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>theta<sp/>=1;<sp/>theta&lt;<sp/>RTheta-&gt;GetXaxis()-&gt;GetNbins()+1;<sp/>++theta)<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=1;<sp/>r&lt;<sp/>RTheta-&gt;GetYaxis()-&gt;GetNbins()+1;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTheta-&gt;SetBinContent(theta,<sp/>r,<sp/>RTheta-&gt;GetBinContent(theta,<sp/>r)<sp/>/<sp/>((h_maxZ-h_minZ)/10.<sp/>*<sp/>TMath::Pi()/180.*(h_maxTheta-h_minTheta)/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)h_nbinsTheta<sp/>*<sp/>(RTheta-&gt;GetYaxis()-&gt;GetBinLowEdge(r+1)*RTheta-&gt;GetYaxis()-&gt;GetBinLowEdge(r+1)<sp/>-<sp/>RTheta-&gt;GetYaxis()-&gt;GetBinLowEdge(r)*RTheta-&gt;GetYaxis()-&gt;GetBinLowEdge(r))/2./100.));</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTheta-&gt;SetBinContent(theta,<sp/>r,<sp/>RTheta-&gt;GetBinContent(theta,<sp/>r)<sp/>/<sp/>(Target_thickness<sp/>*<sp/>2*TMath::Pi()/(double)h_nbinsTheta<sp/>*<sp/>(RTheta-&gt;GetYaxis()-&gt;GetBinLowEdge(r+1)*RTheta-&gt;GetYaxis()-&gt;GetBinLowEdge(r+1)<sp/>-<sp/>RTheta-&gt;GetYaxis()-&gt;GetBinLowEdge(r)*RTheta-&gt;GetYaxis()-&gt;GetBinLowEdge(r))/2./100.));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=1;<sp/>z&lt;<sp/>ProjZ-&gt;GetYaxis()-&gt;GetNbins()+1;<sp/>++z)<sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=1;<sp/>y&lt;<sp/>ProjZ-&gt;GetXaxis()-&gt;GetNbins()+1;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProjZ-&gt;SetBinContent(y,<sp/>z,<sp/>ProjZ-&gt;GetBinContent(y,<sp/>z)<sp/>/<sp/>(<sp/>(h_maxZ-h_minZ)/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)h_nbinsZ/10.<sp/>*<sp/>TMath::Pi()<sp/>*<sp/>std::abs(ProjZ-&gt;GetXaxis()-&gt;GetBinLowEdge(y+1)*ProjZ-&gt;GetXaxis()-&gt;GetBinLowEdge(y+1)<sp/>-<sp/>ProjZ-&gt;GetXaxis()-&gt;GetBinLowEdge(y)*ProjZ-&gt;GetXaxis()-&gt;GetBinLowEdge(y))/100.));</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for(int<sp/>r<sp/>=0;<sp/>r&lt;<sp/>RThetaZ_Eden-&gt;GetXaxis()-&gt;GetNbins()+1;<sp/>++r)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>theta<sp/>=0;<sp/>theta&lt;<sp/>RThetaZ_Eden-&gt;GetYaxis()-&gt;GetNbins()+1;<sp/>++theta)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>z<sp/>=0;<sp/>z&lt;<sp/>RThetaZ_Eden-&gt;GetZaxis()-&gt;GetNbins()+1;<sp/>++z)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RThetaZ_Eden-&gt;SetBinContent(r,<sp/>theta,<sp/>z,<sp/>RThetaZ_Eden-&gt;GetBinContent(r,<sp/>theta,<sp/>z)<sp/>/<sp/>(0.01<sp/>*<sp/>TMath::Pi()/12.<sp/>*<sp/>(RThetaZ_Eden-&gt;GetXaxis()-&gt;GetBinLowEdge(r+1)*RThetaZ_Eden-&gt;GetXaxis()-&gt;GetBinLowEdge(r+1)<sp/>-<sp/>RThetaZ_Eden-&gt;GetXaxis()-&gt;GetBinLowEdge(r)*RThetaZ_Eden-&gt;GetXaxis()-&gt;GetBinLowEdge(r))/2./100.));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Text<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Edep_target_file<sp/>&lt;&lt;<sp/>&quot;R[mm]\tTheta\tZ[mm]\tVolume<sp/>[cm3]\tPdep[W]\tPdep[W/cm3]\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>binX=1;<sp/>binX&lt;<sp/>RThetaZ_Edep-&gt;GetNbinsX()+1;++binX)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>volume<sp/>=<sp/>(h_maxZ-h_minZ)/(double)h_nbinsZ/10.<sp/>*<sp/>TMath::Pi()/180.*(h_maxTheta-h_minTheta)/(double)h_nbinsTheta<sp/>*<sp/>(RThetaZ_Edep-&gt;GetXaxis()-&gt;GetBinLowEdge(binX+1)*RThetaZ_Edep-&gt;GetXaxis()-&gt;GetBinLowEdge(binX+1)<sp/>-<sp/>RThetaZ_Edep-&gt;GetXaxis()-&gt;GetBinLowEdge(binX)*RThetaZ_Edep-&gt;GetXaxis()-&gt;GetBinLowEdge(binX))/2./100.;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>binY=1;<sp/>binY&lt;<sp/>RThetaZ_Edep-&gt;GetNbinsY()+1;++binY)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>binZ=1;<sp/>binZ&lt;<sp/>RThetaZ_Edep-&gt;GetNbinsZ()+1;++binZ)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(RThetaZ_Edep-&gt;GetBinContent(RThetaZ_Edep-&gt;GetBin(binX,binY,binZ))/volume<sp/>&gt;<sp/>1.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edep_target_file<sp/>&lt;&lt;<sp/>RThetaZ_Edep-&gt;GetXaxis()-&gt;GetBinCenter(binX)<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>RThetaZ_Edep-&gt;GetYaxis()-&gt;GetBinCenter(binY)<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>RThetaZ_Edep-&gt;GetZaxis()-&gt;GetBinCenter(binZ)<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>volume<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>RThetaZ_Edep-&gt;GetBinContent(RThetaZ_Edep-&gt;GetBin(binX,binY,binZ))<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>RThetaZ_Edep-&gt;GetBinContent(RThetaZ_Edep-&gt;GetBin(binX,binY,binZ))/volume<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;AlongZ_c&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;AlongZ_c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongZ-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Power<sp/>deposition<sp/>[W]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongZ-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongZ-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;AlongR_c&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;AlongR_c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongR-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Power<sp/>deposition<sp/>[W]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongR-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;R<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongR-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>AlongR1-&gt;Draw(&quot;HIST<sp/>E<sp/>SAME&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;AlongTheta_c&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;AlongTheta_c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongTheta-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>AlongTheta1-&gt;Draw(</highlight><highlight class="stringliteral">&quot;HIST<sp/>E<sp/>SAME&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;ProjZ_c&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;ProjZ_c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>ProjZ-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Power<sp/>density<sp/>[W/cm^{3}]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>ProjZ-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Z<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/>ProjZ-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogz();</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/>ProjZ-&gt;Draw(</highlight><highlight class="stringliteral">&quot;COLZ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Edep<sp/>maximum<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ProjZ-&gt;GetMaximum()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/>new<sp/>TCanvas(&quot;RTheta_c&quot;,&quot;RTheta_c&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>TCanvas*<sp/>can<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,1200,800);</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>can-&gt;Divide(2,2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>can-&gt;cd(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetXaxis()-&gt;SetRangeUser(-h_maxR,h_maxR);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetYaxis()-&gt;SetRangeUser(-h_maxR,h_maxR);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetZaxis()-&gt;SetTitle(&quot;Number<sp/>of<sp/>source<sp/>protons&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetYaxis()-&gt;SetTitle(&quot;Z<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;GetXaxis()-&gt;SetTitle(&quot;Y<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MappingYZ_pSource-&gt;Draw(&quot;colz&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>can-&gt;cd(2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>AlongZ-&gt;Scale(1/<sp/>(0.01<sp/>*<sp/>TMath::Pi()*3*3)<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>AlongZ-&gt;GetYaxis()-&gt;SetTitle(&quot;Power<sp/>density<sp/>[W/cm^{3}]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>AlongZ-&gt;GetXaxis()-&gt;SetTitle(&quot;Depth<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>AlongZ-&gt;Draw(&quot;HIST<sp/>E&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>AlongZ1-&gt;Draw(&quot;HIST<sp/>E<sp/>SAME&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>can-&gt;cd(3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>dummy_his<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH2D(</highlight><highlight class="stringliteral">&quot;dummy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>2*h_nbinsR,<sp/>-h_maxR,<sp/>h_maxR,<sp/>2*h_nbinsR,<sp/>-h_maxR,<sp/>h_maxR);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>dummy_his-&gt;GetZaxis()-&gt;SetRangeUser(1000,1600);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy_his-&gt;GetZaxis()-&gt;SetRangeUser(0,RTheta-&gt;GetMaximum());</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy_his-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Power<sp/>density<sp/>[W/cm^{3}]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy_his-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Y<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy_his-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;X<sp/>[mm]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy_his-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/>can-&gt;SetLogz();</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/><sp/><sp/><sp/>auto<sp/>frame<sp/>=<sp/>can-&gt;DrawFrame(-h_maxR,<sp/>h_maxR,<sp/>-h_maxR,<sp/>h_maxR);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/>RTheta-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Power<sp/>density<sp/>[W/cm^{3}]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/>RTheta-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz<sp/>same<sp/>pol&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>RTheta-&gt;Draw(&quot;SURF7<sp/>POL&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>can-&gt;cd(4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;GetYaxis()-&gt;SetTitle(&quot;Z<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;GetXaxis()-&gt;SetTitle(&quot;Y<sp/>[mm]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;GetZaxis()-&gt;SetTitle(&quot;Power<sp/>density<sp/>[W/cm^{3}]&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/>RTheta1-&gt;Draw(&quot;colz&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>histo[0]-&gt;SetLogz();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>RTheta-&gt;Draw(&quot;POL<sp/>COLZ&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>gPad-&gt;DrawFrame(-h_maxR,<sp/>h_maxR,<sp/>-h_maxR,<sp/>h_maxR);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>histo[0]<sp/>=<sp/>new<sp/>TCanvas(&quot;RThetaZ_Edep_c&quot;,&quot;RThetaZ_Edep_c&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>RThetaZ_Edep-&gt;Draw(&quot;box&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>Edep_target_file.close();</highlight></codeline>
<codeline lineno="2662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Impossible<sp/>d&apos;ouvrir<sp/>le<sp/>fichier&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-1/Graphes_ROOT.C"/>
  </compounddef>
</doxygen>
