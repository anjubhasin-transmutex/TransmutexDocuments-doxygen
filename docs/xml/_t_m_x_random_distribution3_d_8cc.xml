<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_t_m_x_random_distribution3_d_8cc" kind="file" language="C++">
    <compoundname>TMXRandomDistribution3D.cc</compoundname>
    <includes refid="_t_m_x_random_distribution3_d_8hh" local="yes">TMXRandomDistribution3D.hh</includes>
    <includes local="no">iostream</includes>
    <includes local="no">random</includes>
    <incdepgraph>
      <node id="2">
        <label>TMXRandomDistribution3D.hh</label>
        <link refid="_t_m_x_random_distribution3_d_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/src/TMXRandomDistribution3D.cc</label>
        <link refid="_t_m_x_random_distribution3_d_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>random</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TMXRandomDistribution3D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Donovan<sp/>Maire,<sp/>Transmutex,<sp/>02/03/2020</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXRandomDistribution3D.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>Class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="class_t_m_x_random_distribution3_d_1ad5696c0d8acb0ef545a30c2edaae1c81" refkind="member"><highlight class="normal"><ref refid="class_t_m_x_random_distribution3_d_1ad5696c0d8acb0ef545a30c2edaae1c81" kindref="member">TMXRandomDistribution3D::TMXRandomDistribution3D</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbinsX,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Xmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Xmax,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbinsY,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ymin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ymax,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbinsZ,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Zmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Zmax)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/>:<sp/>fnbinsX{nbinsX},</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/>fnbinsY{nbinsY},</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/>fnbinsZ{nbinsZ},</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/>fXmin{Xmin},</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/>fYmin{Ymin},</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/>fZmin{Zmin},</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/>fXmax{Xmax},</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/>fYmax{Ymax},</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/>fZmax{Zmax},</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/>fWeights{0}</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>Initialize();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fnbinsX*fnbinsY*fnbinsZ;<sp/>++i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fWeights.push_back(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ChangeAllWeights(<sp/>fWeights<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/><sp/><sp/><sp/>ChangeAllWeights(<sp/>{1,1,1,1,1,1,1,1,1,1}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>generator.seed<sp/>(rd());<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::uniform_real_distribution&lt;double&gt;<sp/>d1(0.0,1.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Uniform.param(d1.param());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">TMXRandomDistribution3D::~TMXRandomDistribution3D(){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXRandomDistribution3D::ChangeAllWeights(std::vector&lt;double&gt;<sp/>weight)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;weight.size();<sp/>++i)<sp/>{<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(weight[i])<sp/>&gt;=<sp/>2E9)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>!!<sp/>Overflow<sp/>of<sp/>the<sp/>3D<sp/>distribution<sp/>with<sp/>bin<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>weight[i]<sp/>&lt;&lt;<sp/>std::endl;}}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::discrete_distribution&lt;long&gt;<sp/>d(weight.begin(),<sp/>weight.end());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>distribution.param(d.param());</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXRandomDistribution3D::AddBinWeight(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Z)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(X<sp/>&gt;=<sp/>fXmin<sp/>&amp;&amp;<sp/>X<sp/>&lt;<sp/>fXmax<sp/>&amp;&amp;<sp/>fnbinsY<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>fnbinsZ<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>std::floor(<sp/>fnbinsX<sp/>*<sp/>(X<sp/>-<sp/>fXmin)<sp/>/<sp/>(fXmax<sp/>-<sp/>fXmin)<sp/>)<sp/>*<sp/>fnbinsY<sp/>*<sp/>fnbinsZ;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Y<sp/>&gt;=<sp/>fYmin<sp/>&amp;&amp;<sp/>Y<sp/>&lt;<sp/>fYmax<sp/>&amp;&amp;<sp/>fYmax<sp/>-<sp/>fYmin<sp/>&gt;<sp/>0)<sp/>{<sp/>bin<sp/>+=<sp/>std::floor(<sp/>fnbinsY<sp/>*<sp/>(Y<sp/>-<sp/>fYmin)<sp/>/<sp/>(fYmax<sp/>-<sp/>fYmin)<sp/>)<sp/>*<sp/>fnbinsZ;}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Z<sp/>&gt;=<sp/>fZmin<sp/>&amp;&amp;<sp/>Z<sp/>&lt;<sp/>fZmax<sp/>&amp;&amp;<sp/>fZmax<sp/>-<sp/>fZmin<sp/>&gt;<sp/>0)<sp/>{<sp/>bin<sp/>+=<sp/>std::floor(<sp/>fnbinsZ<sp/>*<sp/>(Z<sp/>-<sp/>fZmin)<sp/>/<sp/>(fZmax<sp/>-<sp/>fZmin)<sp/>);}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fWeights[bin]<sp/>&gt;=<sp/>2E9)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>!!<sp/>Overflow<sp/>of<sp/>the<sp/>3D<sp/>distribution<sp/>with<sp/>bin<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fWeights[bin]<sp/>&lt;&lt;<sp/>std::endl;}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++fWeights[bin];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChangeAllWeights(fWeights);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>X<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>out<sp/>of<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fXmin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fXmax<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnbinsY<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>Y<sp/>&lt;<sp/>fYmin<sp/>&amp;&amp;<sp/>Y<sp/>&gt;<sp/>fYmax)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>out<sp/>of<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fYmin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fYmax<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnbinsZ<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>Z<sp/>&lt;<sp/>fZmin<sp/>&amp;&amp;<sp/>Z<sp/>&gt;<sp/>fZmax)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>Z=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Z<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>out<sp/>of<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fZmin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fZmax<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;.<sp/>Distribution<sp/>unchanged.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXRandomDistribution3D::AddBinWeights(std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;<sp/>vec_pos)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec_pos.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X=0,<sp/>Y=0,<sp/>Z=0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>=<sp/>vec_pos[i][0];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vec_pos[i].size()<sp/>&gt;<sp/>1)<sp/>{Y<sp/>=<sp/>vec_pos[i][1];}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vec_pos[i].size()<sp/>&gt;<sp/>2)<sp/>{Z<sp/>=<sp/>vec_pos[i][2];}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(X<sp/>&gt;=<sp/>fXmin<sp/>&amp;&amp;<sp/>X<sp/>&lt;<sp/>fXmax<sp/>&amp;&amp;<sp/>fnbinsY<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>fnbinsZ<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>std::floor(<sp/>fnbinsX<sp/>*<sp/>(X<sp/>-<sp/>fXmin)<sp/>/<sp/>(fXmax<sp/>-<sp/>fXmin)<sp/>)<sp/>*<sp/>fnbinsY<sp/>*<sp/>fnbinsZ;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Y<sp/>&gt;=<sp/>fYmin<sp/>&amp;&amp;<sp/>Y<sp/>&lt;<sp/>fYmax<sp/>&amp;&amp;<sp/>fYmax<sp/>-<sp/>fYmin<sp/>&gt;<sp/>0)<sp/>{<sp/>bin<sp/>+=<sp/>std::floor(<sp/>fnbinsY<sp/>*<sp/>(Y<sp/>-<sp/>fYmin)<sp/>/<sp/>(fYmax<sp/>-<sp/>fYmin)<sp/>)<sp/>*<sp/>fnbinsZ;}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Z<sp/>&gt;=<sp/>fZmin<sp/>&amp;&amp;<sp/>Z<sp/>&lt;<sp/>fZmax<sp/>&amp;&amp;<sp/>fZmax<sp/>-<sp/>fZmin<sp/>&gt;<sp/>0)<sp/>{<sp/>bin<sp/>+=<sp/>std::floor(<sp/>fnbinsZ<sp/>*<sp/>(Z<sp/>-<sp/>fZmin)<sp/>/<sp/>(fZmax<sp/>-<sp/>fZmin)<sp/>);}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fWeights[bin]<sp/>&gt;=<sp/>2E9)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>!!<sp/>Overflow<sp/>of<sp/>the<sp/>3D<sp/>distribution<sp/>with<sp/>bin<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fWeights[bin]<sp/>&lt;&lt;<sp/>std::endl;}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++fWeights[bin];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>X<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>out<sp/>of<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fXmin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fXmax<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnbinsY<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>Y<sp/>&lt;<sp/>fYmin<sp/>&amp;&amp;<sp/>Y<sp/>&gt;<sp/>fYmax)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>out<sp/>of<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fYmin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fYmax<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnbinsZ<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>Z<sp/>&lt;<sp/>fZmin<sp/>&amp;&amp;<sp/>Z<sp/>&gt;<sp/>fZmax)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>Z=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Z<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>out<sp/>of<sp/>range<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fZmin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fZmax<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;.<sp/>Distribution<sp/>unchanged.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>ChangeAllWeights(fWeights);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXRandomDistribution3D::Fire(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>Y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>Z)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>distribution(generator);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_x=bin,<sp/>i_y=0,<sp/>i_z=0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnbinsY<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>fnbinsZ<sp/>!=<sp/>0)<sp/>{i_x<sp/>=<sp/>std::floor(bin<sp/>/<sp/>(fnbinsY*fnbinsZ));}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnbinsZ<sp/>!=<sp/>0)<sp/>{i_y<sp/>=<sp/>std::floor((bin<sp/>-<sp/>i_x<sp/>*<sp/>(fnbinsY*fnbinsZ))<sp/>/<sp/>fnbinsZ);}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>i_z<sp/>=<sp/>bin<sp/>-<sp/>i_x<sp/>*<sp/>(fnbinsY*fnbinsZ)<sp/>-<sp/>i_y<sp/>*<sp/>fnbinsZ;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>in<sp/>the<sp/>bin<sp/>between<sp/>0<sp/>and<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>uniform_bin<sp/>=<sp/>Uniform(generator);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uniform_binZ<sp/>=<sp/>Uniform(generator);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnbinsZ<sp/>!=<sp/>0)<sp/>{Z<sp/>=<sp/>(i_z<sp/>+<sp/>uniform_binZ)<sp/>*<sp/>(fZmax<sp/>-<sp/>fZmin)/(double)fnbinsZ<sp/>+<sp/>fZmin;}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uniform_binY<sp/>=<sp/>Uniform(generator);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnbinsY<sp/>!=<sp/>0)<sp/>{Y<sp/>=<sp/>(i_y<sp/>+<sp/>uniform_binY)<sp/>*<sp/>(fYmax<sp/>-<sp/>fYmin)/(double)fnbinsY<sp/>+<sp/>fYmin;}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uniform_binX<sp/>=<sp/>Uniform(generator);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i_x<sp/>+<sp/>uniform_binX)<sp/>*<sp/>(fXmax<sp/>-<sp/>fXmin)/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)fnbinsX<sp/>+<sp/>fXmin;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">std::vector&lt;double&gt;<sp/>TMXRandomDistribution3D::GetWeights()<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distribution.probabilities();</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">std::vector&lt;double&gt;<sp/>TMXRandomDistribution3D::GetUnnormedWeights()<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fWeights;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">std::vector&lt;double&gt;<sp/>TMXRandomDistribution3D::GetInitialUnnormedWeights()<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fInitialWeights;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXRandomDistribution3D::Initialize()<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>fWeights.clear();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fnbinsX*fnbinsY*fnbinsZ;<sp/>++i)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fWeights.push_back(1);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>ChangeAllWeights(<sp/>fWeights<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>fInitialWeights<sp/>=<sp/>fWeights;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>generator.seed<sp/>(rd());<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_real_distribution&lt;double&gt;<sp/>d1(0.0,1.0);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>Uniform.param(d1.param());</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/src/TMXRandomDistribution3D.cc"/>
  </compounddef>
</doxygen>
