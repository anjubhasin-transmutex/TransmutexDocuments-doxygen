<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_benchmark-2_2src_2_t_m_x_burnup_8cc" kind="file" language="C++">
    <compoundname>TMXBurnup.cc</compoundname>
    <includes local="yes">TMXBurnup.hh</includes>
    <includes local="yes">TMXElements.hh</includes>
    <includes local="yes">DetectorConstruction.hh</includes>
    <includes local="yes">G4SystemOfUnits.hh</includes>
    <includes local="yes">G4NistManager.hh</includes>
    <includes local="yes">G4RunManager.hh</includes>
    <includes local="yes">G4Isotope.hh</includes>
    <includes local="yes">G4HadronicProcess.hh</includes>
    <includes local="yes">G4Ions.hh</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-2/src/TMXBurnup.cc</label>
        <link refid="_benchmark-2_2src_2_t_m_x_burnup_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>DetectorConstruction.hh</label>
      </node>
      <node id="9">
        <label>G4HadronicProcess.hh</label>
      </node>
      <node id="10">
        <label>G4Ions.hh</label>
      </node>
      <node id="8">
        <label>G4Isotope.hh</label>
      </node>
      <node id="6">
        <label>G4NistManager.hh</label>
      </node>
      <node id="7">
        <label>G4RunManager.hh</label>
      </node>
      <node id="5">
        <label>G4SystemOfUnits.hh</label>
      </node>
      <node id="2">
        <label>TMXBurnup.hh</label>
      </node>
      <node id="3">
        <label>TMXElements.hh</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TMXBurnup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Donovan<sp/>Maire,<sp/>Transmutex,<sp/>01/09/2020</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2020<sp/>Transmutex<sp/>SA<sp/>--<sp/>all<sp/>rights<sp/>reserved</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Transmutex<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXBurnup.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXElements.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DetectorConstruction.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GEANT4<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4SystemOfUnits.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4NistManager.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4RunManager.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4Isotope.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4HadronicProcess.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4Ions.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="class_t_m_x_burnup_1a5d28367eda495a6f1aa7d631a8b27459" kindref="member">TMXBurnup::TMXBurnup</ref>()<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>Initialize();</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">TMXBurnup::~TMXBurnup()<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBurnup::Initialize()<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>fMap_N0.clear();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>fDecimal_place<sp/>=<sp/>14;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>TMXElementStore::Store().size()<sp/>)<sp/>{TMXElementStore::BuildElementDB();}<sp/></highlight><highlight class="comment">//<sp/>Build<sp/>the<sp/>database</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBurnup::ChangeMaterial(<ref refid="class_t_m_x_input_parameters" kindref="compound">TMXInputParameters</ref>&amp;<sp/>p,<sp/>G4LogicalVolumeStore<sp/>*LVStore,<sp/><ref refid="class_t_m_x_bateman_decay" kindref="compound">TMXBatemanDecay</ref>&amp;<sp/>batemanDecay,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_step)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>G4cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n******************&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>G4endl;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>G4cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Begin<sp/>of<sp/>Run:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i_step<sp/>&lt;&lt;<sp/>G4endl;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>G4cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;******************\n\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>G4endl;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Decayt<sp/>=<sp/>p.TimeOfRun;<sp/></highlight><highlight class="comment">//<sp/>Decay<sp/>time<sp/>[s]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>fMap_Nt.clear();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i_step<sp/>==<sp/>p.Nrun<sp/>&amp;&amp;<sp/>p.CoolingTime<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decayt<sp/>=<sp/>p.CoolingTime;<sp/></highlight><highlight class="comment">//<sp/>Decay<sp/>time<sp/>[s]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.MultiplyTransmutedElem(<sp/>1<sp/>/p.Nparticles<sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_detector_construction" kindref="compound">DetectorConstruction</ref>*<sp/>det<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="class_detector_construction" kindref="compound">DetectorConstruction</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(G4RunManager::GetRunManager()-&gt;GetUserDetectorConstruction());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N_fuelrods<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.Geometry<sp/>==<sp/>1<sp/>)<sp/>N_fuelrods<sp/>=<sp/>det-&gt;GetTotalCopyNumberFuelRods();<sp/></highlight><highlight class="comment">//<sp/>Total<sp/>number<sp/>of<sp/>fuel<sp/>rods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>number<sp/>of<sp/>transmuted<sp/>elements<sp/>to<sp/>a<sp/>transmutation<sp/>rate<sp/>[s-1]<sp/>per<sp/>fuel<sp/>rods<sp/>because<sp/>the<sp/>logical<sp/>volume<sp/>corresponds<sp/>to<sp/>only<sp/>1<sp/>fuel<sp/>rod<sp/>WARNING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>batemanDecay.MultiplyTransmutedElem(<sp/>Decayt<sp/>*<sp/>p.P_beam/(p.Nparticles*e_SI*p.BeamEnergy)<sp/>/(double)<sp/>N_fuelrods);<sp/><sp/>//<sp/>Number<sp/>of<sp/>elements<sp/>converted<sp/>in<sp/>reaction<sp/>rate<sp/>[s-1]<sp/>@<sp/>p.P_beam</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>batemanDecay.MultiplyTransmutedElem(<sp/>1.<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>amount<sp/>of<sp/>transmuted<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>batemanDecay.DumpTransmutedElements();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(G4LogicalVolumeStore::iterator<sp/>it_LV=LVStore-&gt;begin();<sp/>it_LV!=LVStore-&gt;end();<sp/>++it_LV)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>logical<sp/>volume<sp/>store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4LogicalVolume<sp/>*LV<sp/>=<sp/>*it_LV;<sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>logical<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>LVName<sp/>=<sp/>LV-&gt;GetName();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LVName.find(</highlight><highlight class="stringliteral">&quot;Scoring&quot;</highlight><highlight class="normal">)<sp/>==<sp/>std::string::npos<sp/>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>consider<sp/>the<sp/>parallel<sp/>Scoring<sp/>World<sp/>or<sp/>the<sp/>Scoring<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\t&quot;&lt;&lt;LVName&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p.Geometry<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.MultiplyTransmutedElem(<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(1.<sp/>/<sp/>det-&gt;getGeomSVBR()-&gt;getNumberOfCopies(LV)),<sp/>LVName);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.MultiplyTransmutedElem(<sp/>1.,<sp/>LVName);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\t\t\t&quot;&lt;&lt;LVName&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;det-&gt;getGeomSVBR()-&gt;getNumberOfCopies(LV)&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstructMapN0AndDecayChain(LV,<sp/>i_step,<sp/>batemanDecay);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstructMapN0WithTransmutedElem(LV,<sp/>i_step,<sp/>batemanDecay);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>decay<sp/>of<sp/>element<sp/>already<sp/>present<sp/>in<sp/>the<sp/>material<sp/>or<sp/>added<sp/>by<sp/>the<sp/>proton<sp/>beam<sp/>or<sp/>fissions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.CalculateDecayNtNoTransmutation(Decayt,<sp/>LVName);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>new<sp/>material</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>and<sp/>Calculate<sp/>element<sp/>and<sp/>material<sp/>masses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;<sp/>MapNt(batemanDecay.GetMapNt().begin(),batemanDecay.GetMapNt().end());<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>amount<sp/>of<sp/>isotopes<sp/>after<sp/>decay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newMaterialMass<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;int,<sp/>std::pair&lt;int,<sp/>long<sp/>double&gt;<sp/>&gt;<sp/>MassElement;<sp/></highlight><highlight class="comment">//<sp/>Total<sp/>mass<sp/>and<sp/>number<sp/>of<sp/>isotopes<sp/>for<sp/>every<sp/>elements<sp/>in<sp/>the<sp/>new<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CalculateNbElementsAndMass(MassElement,<sp/>MapNt,<sp/>newMaterialMass);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(LVName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/><sp/>&quot;MASS<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/><sp/><sp/><sp/>newMaterialMass&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>material<sp/>with<sp/>new<sp/>elements<sp/>composed<sp/>of<sp/>one<sp/>or<sp/>several<sp/>isotopes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Material*<sp/>LVMaterial<sp/>=<sp/>LV-&gt;GetMaterial();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LV-&gt;SetMaterial(DefineNewMaterial(LVName,<sp/>i_step,<sp/>LVMaterial,<sp/>MassElement,<sp/>MapNt,<sp/>newMaterialMass));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMap_Nt[LVName]<sp/>=<sp/>MapNt;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(LVName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\nInside<sp/>BURNUP1&quot;&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::map&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>it_isotope=MapNt.begin();<sp/>it_isotope!=MapNt.end();<sp/>++it_isotope)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;it_isotope-&gt;first&lt;&lt;&quot;<sp/>&quot;&lt;&lt;it_isotope-&gt;second&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>LVMass<sp/>=<sp/>LV-&gt;GetMass(true)/g;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;testMass<sp/>&quot;&lt;&lt;LV-&gt;GetMass(true,<sp/>false,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(true,<sp/>true,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(false,<sp/>false,<sp/>LV-&gt;GetMaterial())/g</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(false,<sp/>true,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;Mass<sp/>&quot;&lt;&lt;LVMass&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;testMass<sp/>&quot;&lt;&lt;LV-&gt;GetMass(true,<sp/>false,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(true,<sp/>true,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(false,<sp/>false,<sp/>LV-&gt;GetMaterial())/g</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(false,<sp/>true,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4double*<sp/>MassFractionVector<sp/><sp/><sp/><sp/>=<sp/>LVMaterial-&gt;GetFractionVector();</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4int*<sp/>AtomsVector<sp/><sp/><sp/><sp/>=<sp/>LVMaterial-&gt;GetAtomsVector();</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(long<sp/>unsigned<sp/>int<sp/>j=0;<sp/>j<sp/>&lt;<sp/>LVMaterial-&gt;GetNumberOfElements();<sp/>++j)<sp/>{<sp/><sp/>//<sp/>Read<sp/>every<sp/>elements<sp/>in<sp/>the<sp/>material</highlight></codeline>
<codeline lineno="114"><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4Element*<sp/>Element<sp/>=<sp/>LVMaterial-&gt;GetElement(j);</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double*<sp/>RelativAbundanceVec=<sp/>Element-&gt;GetRelativeAbundanceVector();</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(long<sp/>unsigned<sp/>int<sp/>i=0;<sp/>i<sp/>&lt;<sp/>Element-&gt;GetNumberOfIsotopes();<sp/>++i)<sp/>{<sp/>//<sp/>Read<sp/>every<sp/>isotopes<sp/>in<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="118"><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4Isotope*<sp/>Isotope<sp/>=<sp/>Element-&gt;GetIsotope(i);</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>IZA<sp/>=<sp/>Isotope-&gt;GetZ()*10000<sp/>+<sp/>Isotope-&gt;GetN()*10<sp/>+<sp/>Isotope-&gt;Getm();<sp/><sp/>//<sp/>IZA<sp/>identifier</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>MolarMass<sp/>=<sp/>Isotope-&gt;GetN();<sp/>//<sp/>Isotope-&gt;GetA()/(g/(mole*amu_c2));</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double<sp/>N0<sp/>=<sp/>MassFractionVector[j]<sp/>*<sp/>RelativAbundanceVec[i]<sp/>*<sp/>LVMass<sp/>/<sp/>MolarMass<sp/>*<sp/>CLHEP::Avogadro;</highlight></codeline>
<codeline lineno="123"><highlight class="comment"></highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;IZA&lt;&lt;&quot;<sp/>&quot;&lt;&lt;<sp/>N0&lt;&lt;&quot;<sp/>&quot;&lt;&lt;<sp/>AtomsVector[j]&lt;&lt;std::endl;<sp/>//<sp/>Store<sp/>N0<sp/>for<sp/>post-analysis</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(LVName<sp/>==<sp/>&quot;lfuelmat23&quot;){</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\n<sp/>Inside<sp/>BURNUP2&quot;&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::map&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>it_isotope2=fMap_Nt[&quot;lfuelmat23&quot;].begin();<sp/>it_isotope2!=fMap_Nt[&quot;lfuelmat23&quot;].end();<sp/>++it_isotope2)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;it_isotope2-&gt;first&lt;&lt;&quot;<sp/>&quot;&lt;&lt;it_isotope2-&gt;second&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(G4LogicalVolumeStore::iterator<sp/>it_LV2=LVStore-&gt;begin();<sp/>it_LV2!=LVStore-&gt;end();<sp/>++it_LV2)<sp/>{<sp/>//<sp/>Read<sp/>the<sp/>logical<sp/>volume<sp/>store</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4LogicalVolume<sp/>*LV2<sp/>=<sp/>*it_LV2;<sp/>//<sp/>Define<sp/>the<sp/>logical<sp/>volume</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>LVName2<sp/>=<sp/>LV2-&gt;GetName();</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LVName2.find(&quot;Scoring&quot;)<sp/>==<sp/>std::string::npos<sp/>)<sp/>{<sp/><sp/>//<sp/>Do<sp/>not<sp/>consider<sp/>the<sp/>parallel<sp/>Scoring<sp/>World<sp/>or<sp/>the<sp/>Scoring<sp/>world</highlight></codeline>
<codeline lineno="141"><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(LVName2<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Material*<sp/>LVMaterial<sp/>=<sp/>LV2-&gt;GetMaterial();</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>LVMass<sp/>=<sp/>LV-&gt;GetMass(true)/g;</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;testMass<sp/>&quot;&lt;&lt;LV-&gt;GetMass(true,<sp/>false,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(true,<sp/>true,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(false,<sp/>false,<sp/>LV-&gt;GetMaterial())/g</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(false,<sp/>true,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;Mass<sp/>&quot;&lt;&lt;LVMass&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;testMass<sp/>&quot;&lt;&lt;LV-&gt;GetMass(true,<sp/>false,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(true,<sp/>true,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(false,<sp/>false,<sp/>LV-&gt;GetMaterial())/g</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;LV-&gt;GetMass(false,<sp/>true,<sp/>LV-&gt;GetMaterial())/g&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4double*<sp/>MassFractionVector<sp/><sp/><sp/><sp/>=<sp/>LVMaterial-&gt;GetFractionVector();</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4int*<sp/>AtomsVector<sp/><sp/><sp/><sp/>=<sp/>LVMaterial-&gt;GetAtomsVector();</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(long<sp/>unsigned<sp/>int<sp/>j=0;<sp/>j<sp/>&lt;<sp/>LVMaterial-&gt;GetNumberOfElements();<sp/>++j)<sp/>{<sp/><sp/>//<sp/>Read<sp/>every<sp/>elements<sp/>in<sp/>the<sp/>material</highlight></codeline>
<codeline lineno="155"><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4Element*<sp/>Element<sp/>=<sp/>LVMaterial-&gt;GetElement(j);</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double*<sp/>RelativAbundanceVec=<sp/>Element-&gt;GetRelativeAbundanceVector();</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(long<sp/>unsigned<sp/>int<sp/>i=0;<sp/>i<sp/>&lt;<sp/>Element-&gt;GetNumberOfIsotopes();<sp/>++i)<sp/>{<sp/>//<sp/>Read<sp/>every<sp/>isotopes<sp/>in<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="159"><highlight class="comment"></highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4Isotope*<sp/>Isotope<sp/>=<sp/>Element-&gt;GetIsotope(i);</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>IZA<sp/>=<sp/>Isotope-&gt;GetZ()*10000<sp/>+<sp/>Isotope-&gt;GetN()*10<sp/>+<sp/>Isotope-&gt;Getm();<sp/><sp/>//<sp/>IZA<sp/>identifier</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>MolarMass<sp/>=<sp/>Isotope-&gt;GetN();<sp/>//<sp/>Isotope-&gt;GetA()/(g/(mole*amu_c2));</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double<sp/>N0<sp/>=<sp/>MassFractionVector[j]<sp/>*<sp/>RelativAbundanceVec[i]<sp/>*<sp/>LVMass<sp/>/<sp/>MolarMass<sp/>*<sp/>CLHEP::Avogadro;</highlight></codeline>
<codeline lineno="164"><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;IZA&lt;&lt;&quot;<sp/>&quot;&lt;&lt;<sp/>N0&lt;&lt;&quot;<sp/>&quot;&lt;&lt;<sp/>AtomsVector[j]&lt;&lt;std::endl;<sp/>//<sp/>Store<sp/>N0<sp/>for<sp/>post-analysis</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.ClearMapN_0();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.ClearMapS_0();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.ClearMapNt();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.ClearMapChains();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>G4cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n******************&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>G4endl;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>G4cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>Run:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i_step<sp/>&lt;&lt;<sp/>G4endl;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>G4cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;******************\n\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>G4endl;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>G4cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n******************&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>G4endl;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>G4cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>Run:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i_step<sp/>&lt;&lt;<sp/>G4endl;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>G4cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;******************\n\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>G4endl;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>batemanDecay.ClearMapTransmutedSrcElem();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>batemanDecay.ClearMapTransmutedElement();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>stored<sp/>linear<sp/>decay<sp/>chains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>batemanDecay.DumpStoredChains();</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBurnup::ConstructMapN0AndDecayChain(G4LogicalVolume<sp/>*LV,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_step,<sp/><ref refid="class_t_m_x_bateman_decay" kindref="compound">TMXBatemanDecay</ref>&amp;<sp/>batemanDecay)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>LVMass<sp/>=<sp/>LV-&gt;GetMass()/g;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Material*<sp/>LVMaterial<sp/>=<sp/>LV-&gt;GetMaterial();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>LVName<sp/>=<sp/>LV-&gt;GetName();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;LVmass<sp/>[g]<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>LVMass<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4double*<sp/>MassFractionVector<sp/><sp/><sp/><sp/>=<sp/>LVMaterial-&gt;GetFractionVector();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>LVMaterial-&gt;GetNumberOfElements();<sp/>++j)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>every<sp/>elements<sp/>in<sp/>the<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Element*<sp/>Element<sp/>=<sp/>LVMaterial-&gt;GetElement(j);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double*<sp/>RelativAbundanceVec=<sp/>Element-&gt;GetRelativeAbundanceVector();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;LVmat<sp/>n<sp/>isotop<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>Element-&gt;GetNumberOfIsotopes()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>Element-&gt;GetNumberOfIsotopes();<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Read<sp/>every<sp/>isotopes<sp/>in<sp/>the<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Isotope*<sp/>Isotope<sp/>=<sp/>Element-&gt;GetIsotope(i);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA<sp/>=<sp/>Isotope-&gt;GetZ()*10000<sp/>+<sp/>Isotope-&gt;GetN()*10<sp/>+<sp/>Isotope-&gt;Getm();<sp/><sp/></highlight><highlight class="comment">//<sp/>IZA<sp/>identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MolarMass<sp/>=<sp/><sp/>Isotope-&gt;GetA()/(g/mole);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>MolarMass<sp/>=<sp/><sp/>G4NistManager::Instance()-&gt;GetAtomicMass(Isotope-&gt;GetZ(),Isotope-&gt;GetN());<sp/>//<sp/>Isotope-&gt;GetA()/(g/mole);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N0<sp/>=<sp/>MassFractionVector[j]<sp/>*<sp/>RelativAbundanceVec[i]<sp/>*<sp/>LVMass<sp/>/<sp/>MolarMass<sp/>*<sp/>CLHEP::Avogadro;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMap_N0[IZA][LVName][i_step]<sp/>+=<sp/>N0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;IZA<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA<sp/>&lt;&lt;<sp/>&quot;<sp/>MassFrac<sp/>&quot;<sp/>&lt;&lt;<sp/>MassFractionVector[j]<sp/>&lt;&lt;<sp/>&quot;<sp/>Relabun<sp/>&quot;<sp/>&lt;&lt;<sp/>RelativAbundanceVec[i]<sp/>&lt;&lt;<sp/>&quot;<sp/>LVMass<sp/>&quot;<sp/>&lt;&lt;<sp/>LVMass<sp/>&lt;&lt;<sp/>&quot;<sp/>MolarMass<sp/>&quot;<sp/>&lt;&lt;<sp/>MolarMass<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.ConstructMapN_0(IZA,<sp/>N0);<sp/></highlight><highlight class="comment">//<sp/>Give<sp/>initial<sp/>amount<sp/>of<sp/>each<sp/>isotope<sp/>before<sp/>decay<sp/>(t=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.NormalizeTransmutedElem(IZA,<sp/>LVName);<sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>number<sp/>of<sp/>transmuted<sp/>elements<sp/>(or<sp/>transmutation<sp/>rate)<sp/>by<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>already<sp/>in<sp/>the<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.ConstructChain(IZA,<sp/>LVName);<sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>linear<sp/>decay<sp/>paths<sp/>for<sp/>every<sp/>isotopes<sp/>in<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IZA<sp/>==<sp/>922380)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;IZA<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>LVmass<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>LVMass<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>Relabund<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>RelativAbundanceVec[i]<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>MolarMass<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>MolarMass<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>mass<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>MassFractionVector[j]<sp/>*<sp/>RelativAbundanceVec[i]<sp/>*<sp/>LVMass<sp/>&lt;&lt;<sp/>&quot;<sp/>N0<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>N0<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBurnup::ConstructMapN0WithTransmutedElem(G4LogicalVolume<sp/>*LV,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_step,<sp/><ref refid="class_t_m_x_bateman_decay" kindref="compound">TMXBatemanDecay</ref>&amp;<sp/>batemanDecay)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>LVMass<sp/>=<sp/>LV-&gt;GetMass(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)/g;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Material*<sp/>LVMaterial<sp/>=<sp/>LV-&gt;GetMaterial();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>LVName<sp/>=<sp/>LV-&gt;GetName();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4double*<sp/>MassFractionVector<sp/><sp/><sp/><sp/>=<sp/>LVMaterial-&gt;GetFractionVector();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>LVMaterial-&gt;GetNumberOfElements();<sp/>++j)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>every<sp/>elements<sp/>in<sp/>the<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Element*<sp/>Element<sp/>=<sp/>LVMaterial-&gt;GetElement(j);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double*<sp/>RelativAbundanceVec=<sp/>Element-&gt;GetRelativeAbundanceVector();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>Element-&gt;GetNumberOfIsotopes();<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Read<sp/>every<sp/>isotopes<sp/>in<sp/>the<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Isotope*<sp/>Isotope<sp/>=<sp/>Element-&gt;GetIsotope(i);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA<sp/>=<sp/>Isotope-&gt;GetZ()*10000<sp/>+<sp/>Isotope-&gt;GetN()*10<sp/>+<sp/>Isotope-&gt;Getm();<sp/><sp/></highlight><highlight class="comment">//<sp/>IZA<sp/>identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MolarMass<sp/>=<sp/>Isotope-&gt;GetN();<sp/></highlight><highlight class="comment">//<sp/>Isotope-&gt;GetA()/(g/(mole*amu_c2));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N0<sp/>=<sp/>MassFractionVector[j]<sp/>*<sp/>RelativAbundanceVec[i]<sp/>*<sp/>LVMass<sp/>/<sp/>MolarMass<sp/>*<sp/>CLHEP::Avogadro;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMap_N0[IZA][LVName][i_step]<sp/>+=<sp/>N0;<sp/></highlight><highlight class="comment">//<sp/>Store<sp/>N0<sp/>for<sp/>post-analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batemanDecay.ConstructMapN_0(IZA,<sp/>N0);<sp/></highlight><highlight class="comment">//<sp/>Give<sp/>initial<sp/>amount<sp/>of<sp/>each<sp/>isotope<sp/>before<sp/>decay<sp/>(t=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Direct<sp/>addition<sp/>or<sp/>substraction<sp/>of<sp/>the<sp/>build<sp/>up<sp/>or<sp/>depletion<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Consider<sp/>transmuted<sp/>elem&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>batemanDecay.ConsiderTransmutedElements(LVName);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;End<sp/>Consider<sp/>transmuted<sp/>elem&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBurnup::CalculateNbElementsAndMass(std::unordered_map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::pair&lt;int,<sp/>long<sp/>double&gt;<sp/>&gt;&amp;<sp/>MassElement,<sp/>std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;&amp;<sp/>MapNt,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>newMaterialMass)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>isotope=MapNt.begin();<sp/>isotope!=MapNt.end();<sp/>++isotope)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA<sp/>=<sp/>isotope-&gt;first;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref><sp/>*TMXElem<sp/>=<sp/>TMXElementStore::GetElement(IZA);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass<sp/>=<sp/>isotope-&gt;second/CLHEP::Avogadro<sp/>*<sp/>TMXElem-&gt;Mweight();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++MassElement[IZA].first;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MassElement[IZA].second<sp/>+=<sp/>mass;<sp/></highlight><highlight class="comment">//<sp/>Mass<sp/>=<sp/>N0/N_Avogadro<sp/>*<sp/>MolarMass(=A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMaterialMass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+=<sp/>mass;<sp/></highlight><highlight class="comment">//<sp/>Mass<sp/>=<sp/>N0/N_Avogadro<sp/>*<sp/>MolarMass(=A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">G4Material*<sp/>TMXBurnup::DefineNewMaterial(std::string<sp/>LVName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_step,<sp/>G4Material*<sp/>LVMaterial,<sp/>std::unordered_map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::pair&lt;int,<sp/>long<sp/>double&gt;<sp/>&gt;&amp;<sp/>MassElement,<sp/>std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;&amp;<sp/>MapNt,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newMaterialMass)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>material<sp/>with<sp/>new<sp/>elements<sp/>composed<sp/>of<sp/>one<sp/>or<sp/>several<sp/>isotopes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4ElementVector*<sp/>elemVec<sp/>=<sp/>LVMaterial-&gt;GetElementVector()<sp/>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>new<sp/>material<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>matName<sp/>=<sp/>LVMaterial-&gt;GetName();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>found<sp/>=<sp/>matName.find(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(found==std::string::npos)<sp/>{<sp/>matName<sp/>=<sp/>LVMaterial-&gt;GetName()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>LVName<sp/>+<sp/>std::to_string(i_step+1);<sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>matName<sp/>=<sp/>matName.substr(0,<sp/>found)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>LVName<sp/>+<sp/>std::to_string(i_step+1);}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Material*<sp/>newMaterial<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4Material(matName,<sp/>LVMaterial-&gt;GetDensity(),<sp/>MassElement.size(),<sp/>LVMaterial-&gt;GetState(),<sp/>LVMaterial-&gt;GetTemperature());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>G4Material*<sp/>newMaterial<sp/>=<sp/>LVMaterial-&gt;ResetMaterial(matName,<sp/>LVMaterial-&gt;GetDensity(),<sp/>MassElement.size(),<sp/>LVMaterial-&gt;GetState(),<sp/>LVMaterial-&gt;GetTemperature(),<sp/>LVMaterial-&gt;GetPressure());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>isotope1=MapNt.begin();<sp/>isotope1!=MapNt.end();<sp/>++isotope1)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Element*<sp/>g4Elem<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA<sp/>=<sp/>isotope1-&gt;first;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref><sp/>*TMXElem<sp/>=<sp/>TMXElementStore::GetElement(IZA);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass<sp/>=<sp/>isotope1-&gt;second/CLHEP::Avogadro<sp/>*<sp/>TMXElem-&gt;Mweight();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>G4NistManager::Instance()-&gt;GetAtomicMass(Z,N))*g/mole</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(LVName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;MASS<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>mass&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>name<sp/>of<sp/>element<sp/>and<sp/>isotope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>g4IsotSymb<sp/>=<sp/>TMXElem-&gt;Sym()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(TMXElem-&gt;A())+<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(TMXElem-&gt;ISO());</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>g4ElemSymb<sp/>=<sp/>g4IsotSymb;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>g4ElemName<sp/>=<sp/>TMXElem-&gt;Name();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;elemVec-&gt;size();<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>of<sp/>neutron<sp/>thermal<sp/>scattering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(G4String)((*elemVec)[i]-&gt;GetName()).substr(0,3)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;TS_&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(*elemVec)[i]-&gt;GetZ()<sp/>==<sp/>TMXElem-&gt;Z()<sp/>&amp;&amp;<sp/>(*elemVec)[i]-&gt;GetN()<sp/>==<sp/>TMXElem-&gt;A())<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g4ElemName<sp/>=<sp/>(*elemVec)[i]-&gt;GetName();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>1<sp/>isotope<sp/>per<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>element<sp/>does<sp/>not<sp/>exists<sp/>in<sp/>the<sp/>G4TableOfElement,<sp/>it<sp/>is<sp/>created.<sp/>Same<sp/>for<sp/>G4Isotope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g4Elem<sp/>=<sp/>G4Element::GetElement(g4ElemName,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g4Elem)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g4Elem<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4Element(g4ElemName,<sp/>g4ElemSymb,<sp/>1);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Isotope*<sp/>g4Isot<sp/>=<sp/>G4Isotope::GetIsotope(g4IsotSymb,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;g4ElemName&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>g4ElemSymb<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;g4IsotSymb&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g4Isot)<sp/>{<sp/>g4Isot<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4Isotope(g4IsotSymb,<sp/>TMXElem-&gt;Z(),<sp/>TMXElem-&gt;A(),<sp/>TMXElem-&gt;Mweight()*g/mole,<sp/>TMXElem-&gt;ISO());}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g4Elem-&gt;AddIsotope(g4Isot,<sp/>1.);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMaterial-&gt;AddElement(g4Elem,<sp/>(G4double)(mass/newMaterialMass));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(LVName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;New<sp/>/<sp/>Old<sp/>mass<sp/>&quot;&lt;&lt;IZA<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>newMaterialMass<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>mass<sp/>&lt;&lt;<sp/>&quot;<sp/>RATIO<sp/>&quot;<sp/>&lt;&lt;<sp/>(G4double)(mass/newMaterialMass)&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newMaterial;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBurnup::WriteResults(std::string<sp/>str_ROOTFileName)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Results<sp/>file<sp/>is<sp/>used<sp/>to<sp/>record<sp/>evolution<sp/>of<sp/>the<sp/>material<sp/>composition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ResultsFileName<sp/>=<sp/>str_ROOTFileName.substr(0,str_ROOTFileName.find(</highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_Transmutation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>ResultsFile;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>ResultsFile.open((ResultsFileName<sp/>+<sp/>(std::string)</highlight><highlight class="stringliteral">&quot;.txt&quot;</highlight><highlight class="normal">).c_str(),<sp/>std::ios::out);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>transmutation<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map<sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::unordered_map<sp/>&lt;std::string,<sp/>std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;&gt;&gt;::iterator<sp/>isotope=fMap_N0.begin();<sp/>isotope!=fMap_N0.end();<sp/>++isotope)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TMXElementStore::GetElement(isotope-&gt;first)-&gt;Tave()<sp/>&lt;<sp/>100<sp/>*<sp/>Decayt)<sp/>{<sp/>//<sp/>Print<sp/>only<sp/>element<sp/>with<sp/>significant<sp/>decay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map<sp/>&lt;std::string,<sp/>std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;&gt;::iterator<sp/>LVname=fMap_N0[isotope-&gt;first].begin();<sp/>LVname!=fMap_N0[isotope-&gt;first].end();<sp/>++LVname)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LVname-&gt;first<sp/>==<sp/>&quot;lFuel2&quot;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>isotope-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>LVname-&gt;first<sp/>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>step=fMap_N0[isotope-&gt;first][LVname-&gt;first].begin();<sp/>step!=fMap_N0[isotope-&gt;first][LVname-&gt;first].end();<sp/>++step)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(step<sp/>==<sp/>fMap_N0[isotope-&gt;first][LVname-&gt;first].begin())<sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>step-&gt;first;<sp/>++i)<sp/>{ResultsFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>0;<sp/>}}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fMap_N0[isotope-&gt;first][LVname-&gt;first][step-&gt;first];</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>output<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>ResultsFile.close();</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBurnup::WriteResultsPerRun(std::string<sp/>str_ROOTFileName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_step)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Results<sp/>file<sp/>is<sp/>used<sp/>to<sp/>record<sp/>evolution<sp/>of<sp/>the<sp/>material<sp/>composition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ResultsFileName<sp/>=<sp/>str_ROOTFileName.substr(0,str_ROOTFileName.find(</highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_Transmutation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>ResultsFile;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i_step==0)<sp/>{<sp/>ResultsFile.open((ResultsFileName<sp/>+<sp/>(std::string)</highlight><highlight class="stringliteral">&quot;.txt&quot;</highlight><highlight class="normal">).c_str(),<sp/>std::ios::out);}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>ResultsFile.open((ResultsFileName<sp/>+<sp/>(std::string)</highlight><highlight class="stringliteral">&quot;.txt&quot;</highlight><highlight class="normal">).c_str(),<sp/>std::ios::app);}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>ResultsFile&lt;&lt;std::left<sp/>&lt;&lt;<sp/>std::setw(8)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Cycle&quot;</highlight><highlight class="normal">&lt;&lt;std::setw(12)&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Element&quot;</highlight><highlight class="normal">&lt;&lt;std::setw(15)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Volume&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(15)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nAtoms&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>transmutation<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if(i_step<sp/>==<sp/>0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map<sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::unordered_map<sp/>&lt;std::string,<sp/>std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;&gt;&gt;::iterator<sp/>isotope=fMap_N0.begin();<sp/>isotope!=fMap_N0.end();<sp/>++isotope)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TMXElementStore::GetElement(isotope-&gt;first)-&gt;Tave()<sp/>&lt;<sp/>100<sp/>*<sp/>Decayt)<sp/>{<sp/>//<sp/>Print<sp/>only<sp/>element<sp/>with<sp/>significant<sp/>decay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map<sp/>&lt;std::string,<sp/>std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;&gt;::iterator<sp/>LVname=fMap_N0[isotope-&gt;first].begin();<sp/>LVname!=fMap_N0[isotope-&gt;first].end();<sp/>++LVname)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LVname-&gt;first<sp/>==<sp/>&quot;lFuel2&quot;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(8)<sp/>&lt;&lt;<sp/>std::to_string(<sp/>i_step)&lt;&lt;<sp/>std::setw(12)<sp/>&lt;&lt;<sp/>isotope-&gt;first&lt;&lt;<sp/>std::setw(15)<sp/>&lt;&lt;<sp/>LVname-&gt;first<sp/>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>step=fMap_N0[isotope-&gt;first][LVname-&gt;first].begin();<sp/>step!=fMap_N0[isotope-&gt;first][LVname-&gt;first].end();<sp/>++step)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(15)<sp/>&lt;&lt;<sp/>fMap_N0[isotope-&gt;first][LVname-&gt;first][i_step];</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>else{</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::unordered_map<sp/>&lt;std::string,<sp/>std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;&gt;::iterator<sp/>volume=fMap_Nt.begin();<sp/>volume!=fMap_Nt.end();<sp/>++volume)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TMXElementStore::GetElement(isotope-&gt;first)-&gt;Tave()<sp/>&lt;<sp/>100<sp/>*<sp/>Decayt)<sp/>{<sp/>//<sp/>Print<sp/>only<sp/>element<sp/>with<sp/>significant<sp/>decay</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>isotope=fMap_Nt[volume-&gt;first].begin();<sp/>isotope!=fMap_Nt[volume-&gt;first].end();<sp/>++isotope)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LVname-&gt;first<sp/>==<sp/>&quot;lFuel2&quot;)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(8)<sp/>&lt;&lt;<sp/>std::to_string(<sp/>i_step)<sp/>+<sp/>&quot;*&quot;<sp/>&lt;&lt;<sp/>std::setw(12)&lt;&lt;<sp/>isotope-&gt;first<sp/>&lt;&lt;<sp/>std::setw(15)&lt;&lt;<sp/>volume-&gt;first<sp/>;</highlight></codeline>
<codeline lineno="364"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>step=fMap_N0[isotope-&gt;first][LVname-&gt;first].begin();<sp/>step!=fMap_N0[isotope-&gt;first][LVname-&gt;first].end();<sp/>++step)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(15)<sp/>&lt;&lt;<sp/>fMap_Nt[volume-&gt;first][isotope-&gt;first];</highlight></codeline>
<codeline lineno="366"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight></codeline>
<codeline lineno="368"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/>}}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>output<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>ResultsFile.close();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>fMap_N0.clear();</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBurnup::WriteDecayedResultsPerRun(std::string<sp/>str_ROOTFileName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_step)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Results<sp/>file<sp/>is<sp/>used<sp/>to<sp/>record<sp/>evolution<sp/>of<sp/>the<sp/>material<sp/>composition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ResultsFileName<sp/>=<sp/>str_ROOTFileName.substr(0,str_ROOTFileName.find(</highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_Decay&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>ResultsFile;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i_step==0)<sp/>{<sp/>ResultsFile.open((ResultsFileName<sp/>+<sp/>(std::string)</highlight><highlight class="stringliteral">&quot;.txt&quot;</highlight><highlight class="normal">).c_str(),<sp/>std::ios::out);}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>ResultsFile.open((ResultsFileName<sp/>+<sp/>(std::string)</highlight><highlight class="stringliteral">&quot;.txt&quot;</highlight><highlight class="normal">).c_str(),<sp/>std::ios::app);}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>ResultsFile&lt;&lt;std::left<sp/>&lt;&lt;<sp/>std::setw(8)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Cycle&quot;</highlight><highlight class="normal">&lt;&lt;std::setw(12)&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Element&quot;</highlight><highlight class="normal">&lt;&lt;std::setw(15)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Volume&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(15)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;N_Elem_Decay&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>transmutation<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map<sp/>&lt;std::string,<sp/>std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;&gt;::iterator<sp/>volume=fMap_Nt.begin();<sp/>volume!=fMap_Nt.end();<sp/>++volume)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TMXElementStore::GetElement(isotope-&gt;first)-&gt;Tave()<sp/>&lt;<sp/>100<sp/>*<sp/>Decayt)<sp/>{<sp/>//<sp/>Print<sp/>only<sp/>element<sp/>with<sp/>significant<sp/>decay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>isotope=fMap_Nt[volume-&gt;first].begin();<sp/>isotope!=fMap_Nt[volume-&gt;first].end();<sp/>++isotope)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LVname-&gt;first<sp/>==<sp/>&quot;lFuel2&quot;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(8)<sp/>&lt;&lt;<sp/>std::to_string(<sp/>i_step)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(12)&lt;&lt;<sp/>isotope-&gt;first<sp/>&lt;&lt;<sp/>std::setw(15)&lt;&lt;<sp/>volume-&gt;first<sp/>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::map<sp/>&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>step=fMap_N0[isotope-&gt;first][LVname-&gt;first].begin();<sp/>step!=fMap_N0[isotope-&gt;first][LVname-&gt;first].end();<sp/>++step)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(15)<sp/>&lt;&lt;<sp/>fMap_Nt[volume-&gt;first][isotope-&gt;first];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultsFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>output<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>ResultsFile.close();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>fMap_N0.clear();</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXBurnup::round(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>multiplier<sp/>=<sp/>std::pow(10.0,<sp/>fDecimal_place);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::round(value<sp/>*<sp/>multiplier)<sp/>/<sp/>multiplier;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>fills<sp/>a<sp/>vector<sp/>from<sp/>EventAction<sp/>with<sp/>each<sp/>element<sp/>produced<sp/>during<sp/>the<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="413"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBurnup::FillvectorBurnupElement(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep,<sp/><ref refid="class_event_action" kindref="compound">EventAction</ref>*<sp/>eventAction,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Track<sp/>*secondary)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4String<sp/>processName<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep()-&gt;GetProcessName();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>process<sp/>generates<sp/>a<sp/>nucleus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processName!=</highlight><highlight class="stringliteral">&quot;hadElastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>processName!=</highlight><highlight class="stringliteral">&quot;ParallelScoringWorld&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>processName!=</highlight><highlight class="stringliteral">&quot;RadioactiveDecayBase&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>secondary-&gt;GetDefinition()-&gt;GetParticleType()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;gamma&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>secondary-&gt;GetDefinition()-&gt;GetParticleType()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;lepton&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>secondary-&gt;GetDefinition()-&gt;GetParticleType()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;meson&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>the<sp/>number<sp/>of<sp/>nucleus<sp/>among<sp/>the<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nb_nucleus<sp/>=<sp/>CountNucleiProducts(theStep-&gt;GetSecondaryInCurrentStep());</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>FillvectorBurnupElement&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4VProcess*<sp/>process<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">G4VProcess*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep());</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4HadronicProcess*<sp/>hproc<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">G4HadronicProcess*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(process);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Isotope*<sp/>target<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hproc)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_t_m_x_bateman_decay_1_1_transmuted_element" kindref="compound">TMXBatemanDecay::TransmutedElement</ref><sp/>transmutation;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mother<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>hproc-&gt;GetTargetIsotope();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transmutation.IZAmother<sp/>=<sp/>10000*target-&gt;GetZ()<sp/>+<sp/>10*target-&gt;GetN()<sp/>+<sp/>target-&gt;Getm();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IZA<sp/>identifier<sp/>of<sp/>mother</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Daughter<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>processName==</highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transmutation.IZAdaughter<sp/>=<sp/>10000*target-&gt;GetZ()<sp/>+<sp/>10*(target-&gt;GetN()+1)<sp/>+<sp/>target-&gt;Getm();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IZA<sp/>identifier<sp/>of<sp/>mother<sp/><sp/><sp/>//<sp/>WARNING<sp/>isomer<sp/>state<sp/>of<sp/>the<sp/>mother<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Ions*<sp/>SecondIonsType<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">G4Ions*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(secondary-&gt;GetDefinition());</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4int<sp/>Adaughter<sp/>=<sp/>SecondIonsType-&gt;GetAtomicMass();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Atomic<sp/>mass<sp/><sp/><sp/>of<sp/>product<sp/><sp/><sp/><sp/><sp/>//<sp/>!!<sp/>WARNING<sp/>!!<sp/>Atomic<sp/>mass<sp/>instead<sp/>of<sp/>number<sp/>of<sp/>nucleons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4int<sp/>Zdaughter<sp/>=<sp/>SecondIonsType-&gt;GetAtomicNumber();<sp/></highlight><highlight class="comment">//<sp/>Atomic<sp/>number<sp/>of<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4int<sp/>mdaughter<sp/>=<sp/>SecondIonsType-&gt;GetIsomerLevel();<sp/></highlight><highlight class="comment">//<sp/>Atomic<sp/>number<sp/>of<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transmutation.IZAdaughter<sp/>=<sp/>10000*Zdaughter<sp/>+<sp/>10*Adaughter<sp/>+<sp/>mdaughter;<sp/></highlight><highlight class="comment">//<sp/>IZA<sp/>identifier<sp/>of<sp/>daugther</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>transmutation.IZAdaughter<sp/>==<sp/>transmutation.IZAmother<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>(n,n&apos;),<sp/>(p,p&apos;)<sp/>etc...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>transmutation.IZAdaughter<sp/>==<sp/>10<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>additional<sp/>counting<sp/>of<sp/>mother<sp/>rn<sp/>e.g.<sp/>for<sp/>(n,<sp/>Xn)<sp/>with<sp/>X&gt;1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(secondary-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;proton&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;protonInelastic&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>additional<sp/>counting<sp/>of<sp/>mother<sp/>RN<sp/>from<sp/>proton<sp/>inelastic<sp/>e.g.<sp/>(p,Xp),<sp/>with<sp/>X&gt;1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//We<sp/>need<sp/>to<sp/>also<sp/>remove<sp/>additional<sp/>counting<sp/>of<sp/>mother<sp/>RN<sp/>from<sp/>e.g.<sp/>(n,<sp/>alpha),<sp/>(n,t),<sp/>(n,t+alpha)<sp/>....etc<sp/>as<sp/>well<sp/>as<sp/>fission<sp/>which<sp/>provides<sp/>2<sp/>fission<sp/>products</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Logical<sp/>volume<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transmutation.LogicVolumeName<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetName();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;transmutation.IZAmother&lt;&lt;<sp/>&quot;<sp/>-&gt;<sp/>&quot;&lt;&lt;<sp/>transmutation.IZAdaughter&lt;&lt;<sp/>&quot;<sp/>in<sp/>&quot;<sp/>&lt;&lt;<sp/>transmutation.LogicVolumeName<sp/>&lt;&lt;<sp/>&quot;<sp/>from<sp/>&quot;<sp/>&lt;&lt;<sp/>secondary-&gt;GetDefinition()-&gt;GetParticleName()<sp/>&lt;&lt;<sp/>&quot;<sp/>via<sp/>&quot;<sp/>&lt;&lt;<sp/>processName&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(processName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal"><sp/>||<sp/>Nb_nucleus<sp/>&gt;<sp/>1<sp/></highlight><highlight class="comment">/*<sp/>||<sp/>theTrack.GetParentID()<sp/>==<sp/>0*/</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>If<sp/>fission<sp/>or<sp/>source<sp/>particle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventAction-&gt;AddSourceElement(transmutation);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Fission<sp/>IZAm<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>transmutation.IZAmother<sp/>&lt;&lt;<sp/>&quot;<sp/>IZAd<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>transmutation.IZAdaughter<sp/>&lt;&lt;<sp/>&quot;<sp/>PV<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>thePostPVname<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>WARNING<sp/>(n,<sp/>alpha)<sp/>reaction<sp/>is<sp/>considered<sp/>and<sp/>the<sp/>mother<sp/>element<sp/>is<sp/>destroyed<sp/>twice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventAction-&gt;AddTransmuteElement(transmutation);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Tranmut<sp/>IZAm<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>transmutation.IZAmother<sp/>&lt;&lt;<sp/>&quot;<sp/>IZAd<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>transmutation.IZAdaughter<sp/>&lt;&lt;<sp/>&quot;<sp/>PV<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>thePostPVname<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;End<sp/><sp/><sp/>FillvectorBurnupElement&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TMXBurnup::CountNucleiProducts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>G4Track*&gt;<sp/>*secondaries)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nb_nucleus<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;<sp/>i&lt;(int)secondaries-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*secondaries)[i]-&gt;GetDefinition()-&gt;GetParticleType()==</highlight><highlight class="stringliteral">&quot;nucleus&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Nb_nucleus;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Nb_nucleus;</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-2/src/TMXBurnup.cc"/>
  </compounddef>
</doxygen>
