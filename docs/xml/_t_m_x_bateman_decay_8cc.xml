<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_t_m_x_bateman_decay_8cc" kind="file" language="C++">
    <compoundname>TMXBatemanDecay.cc</compoundname>
    <includes refid="_t_m_x_bateman_decay_8hh" local="yes">TMXBatemanDecay.hh</includes>
    <includes local="yes">cmath</includes>
    <incdepgraph>
      <node id="2">
        <label>TMXBatemanDecay.hh</label>
        <link refid="_t_m_x_bateman_decay_8hh_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>TMXElements.hh</label>
        <link refid="_t_m_x_elements_2include_2_t_m_x_elements_8hh_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/src/TMXBatemanDecay.cc</label>
        <link refid="_t_m_x_bateman_decay_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cctype</label>
      </node>
      <node id="10">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>fstream</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="13">
        <label>numeric</label>
      </node>
      <node id="8">
        <label>sstream</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="11">
        <label>unordered_map</label>
      </node>
      <node id="14">
        <label>utility</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TMXBatemanDecay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Donovan<sp/>Maire,<sp/>Transmutex,<sp/>19/06/2020</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WARNING<sp/>TO<sp/>DO<sp/>:<sp/>Calculation<sp/>of<sp/>Lambda_j<sp/>anf<sp/>bj<sp/>as<sp/>Lambda_j*<sp/>and<sp/>bj*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXBatemanDecay.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cmath&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="class_t_m_x_bateman_decay_1af27499141bdb57c425ab32519240d129" refkind="member"><highlight class="normal"><ref refid="class_t_m_x_bateman_decay_1af27499141bdb57c425ab32519240d129" kindref="member">TMXBatemanDecay::TMXBatemanDecay</ref>()</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Build<sp/>the<sp/>database</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TMXElementStore::BuildElementDB();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialize<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>Initialize();</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">TMXBatemanDecay::~TMXBatemanDecay()<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>TMXBatemanDecay::Initialize()<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapLVMotherDaughter_transm[0].clear();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapLVMotherDaughter_transm[1].clear();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapN_0.clear();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapS_0.clear();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapNt.clear();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapChains.clear();</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ClearMapChains()<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapChains.clear();</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::AddTransmutedElement(std::vector<sp/>&lt;TMXBatemanDecay::TransmutedElement&gt;&amp;<sp/>vectorTransmutedElement)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Addition<sp/>of<sp/>a<sp/>nuclide<sp/>to<sp/>the<sp/>list<sp/>of<sp/>transmuted<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>AddElement(0,<sp/>vectorTransmutedElement);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::AddTransmutedSrcElem(std::vector<sp/>&lt;TMXBatemanDecay::TransmutedElement&gt;&amp;<sp/>vectorSourceElement)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Addition<sp/>of<sp/>a<sp/>nuclide<sp/>to<sp/>the<sp/>list<sp/>of<sp/>transmuted<sp/>elements<sp/>considered<sp/>as<sp/>a<sp/>source<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>AddElement(1,<sp/>vectorSourceElement);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>transmuted<sp/>elements<sp/>due<sp/>to<sp/>irradiation<sp/>in<sp/>a<sp/>specific<sp/>logical<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::AddElement(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>std::vector<sp/>&lt;TMXBatemanDecay::TransmutedElement&gt;&amp;<sp/>vectorElement)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;index<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/>&quot;<sp/>sizeVec<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorElement.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(index<sp/>==<sp/>0)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;*********<sp/>Begin<sp/>of<sp/>AddElement<sp/>*********<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorElement.size()<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element<sp/>:<sp/>vectorElement)<sp/>{</highlight><highlight class="comment">//<sp/>access<sp/>by<sp/>value,<sp/>the<sp/>type<sp/>of<sp/>element<sp/>is<sp/>TMXBatemanDecay::TransmutedElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fMapLVMotherDaughter_transm[index][element.LogicVolumeName].empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapLVMotherDaughter_transm[index][element.LogicVolumeName]<sp/>=<sp/><sp/><sp/>{<sp/>{element.IZAmother,<sp/>{{element.IZAdaughter,<sp/>1}}<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(index<sp/>==<sp/>0)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;1element.IZAmother<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>element.IZAmother<sp/>&lt;&lt;<sp/>&quot;<sp/>element.IZAdaughter<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>element.IZAdaughter<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fMapLVMotherDaughter_transm[index][element.LogicVolumeName][element.IZAmother].empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapLVMotherDaughter_transm[index][element.LogicVolumeName][element.IZAmother]<sp/>=<sp/>{<sp/>{<sp/>{element.IZAdaughter,<sp/>1}<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(index<sp/>==<sp/>0)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;2element.IZAmother<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>element.IZAmother<sp/>&lt;&lt;<sp/>&quot;<sp/>element.IZAdaughter<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>element.IZAdaughter<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fMapLVMotherDaughter_transm[index][element.LogicVolumeName][element.IZAmother][element.IZAdaughter]<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapLVMotherDaughter_transm[index][element.LogicVolumeName][element.IZAmother][element.IZAdaughter]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(index<sp/>==<sp/>0)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;3element.IZAmother<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>element.IZAmother<sp/>&lt;&lt;<sp/>&quot;<sp/>element.IZAdaughter<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>element.IZAdaughter<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++fMapLVMotherDaughter_transm[index][element.LogicVolumeName][element.IZAmother][element.IZAdaughter];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(index<sp/>==<sp/>0)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;4element.IZAmother<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>element.IZAmother<sp/>&lt;&lt;<sp/>&quot;<sp/>element.IZAdaughter<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>element.IZAdaughter<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;element.IZAmother<sp/>&lt;&lt;<sp/>&quot;<sp/>-&gt;<sp/>&quot;<sp/>&lt;&lt;<sp/>element.IZAdaughter<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>element.LogicVolumeName&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>every<sp/>components<sp/>in<sp/>1<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++fMapLVElem_transm[element.LogicVolumeName][element.IZAdaughter];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--fMapLVElem_transm[element.LogicVolumeName][element.IZAmother];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(index<sp/>==<sp/>0)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;*********<sp/>End<sp/>of<sp/>AddElement<sp/>*********&quot;<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Erase<sp/>content<sp/>of<sp/>map<sp/>fMapLVMotherDaughter_transm[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ClearMapTransmutedElement()<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapLVMotherDaughter_transm[0].clear();</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Erase<sp/>content<sp/>of<sp/>map<sp/>fMapLVMotherDaughter_transm[0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ClearMapTransmutedSrcElem()<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapLVMotherDaughter_transm[1].clear();</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>number<sp/>of<sp/>transmuted<sp/>elements<sp/>due<sp/>to<sp/>irradiation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::DumpTransmutedElements()<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=0;<sp/>index&lt;2;<sp/>++index){</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;std::string,<sp/>std::unordered_map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::unordered_map&lt;int,long<sp/>double&gt;&gt;&gt;::iterator<sp/>it=fMapLVMotherDaughter_transm[index].begin();<sp/>it!=fMapLVMotherDaughter_transm[index].end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::unordered_map&lt;int,long<sp/>double&gt;&gt;::iterator<sp/>it1=fMapLVMotherDaughter_transm[index][it-&gt;first].begin();<sp/>it1!=fMapLVMotherDaughter_transm[index][it-&gt;first].end();<sp/>++it1)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it1-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,long<sp/>double&gt;::iterator<sp/>it2=fMapLVMotherDaughter_transm[index][it-&gt;first][it1-&gt;first].begin();<sp/>it2!=fMapLVMotherDaughter_transm[index][it-&gt;first][it1-&gt;first].end();<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it2-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it2-&gt;second<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>amount<sp/>of<sp/>element<sp/>IZA<sp/>at<sp/>t=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ConstructMapN_0(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N_0)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fMapN_0[IZA]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapN_0[IZA]<sp/>=<sp/>N_0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>amount<sp/>of<sp/>element<sp/>IZA<sp/>at<sp/>t=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXBatemanDecay::GetN_0(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fMapN_0[IZA];</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">std::unordered_map&lt;int,<sp/>long<sp/>double&gt;<sp/>TMXBatemanDecay::GetMapNt()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it=fMapNt.begin();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>it!=fMapNt.end())<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it-&gt;second<sp/>&lt;<sp/>1e-200<sp/>||<sp/>it-&gt;first<sp/>==<sp/>000000)<sp/>{<sp/></highlight><highlight class="comment">//||<sp/>std::log10(std::abs(fMapNt[IZA_i]))<sp/>&lt;=<sp/>-100)<sp/>{<sp/><sp/>//<sp/>If<sp/>amount<sp/>is<sp/>very<sp/>low<sp/>or<sp/>if<sp/>it<sp/>is<sp/>the<sp/>ad<sp/>hoc<sp/>element<sp/>used<sp/>for<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>fMapNt.erase(it);<sp/></highlight><highlight class="comment">//<sp/>WARNING<sp/>not<sp/>sure<sp/>of<sp/>1e-200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fMapNt;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::unordered_map&lt;int,<sp/>long<sp/>double&gt;<sp/>TMXBatemanDecay::GetMapNt()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;int,<sp/>long<sp/>double&gt;<sp/>MapNt<sp/>=<sp/>fMapNt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>it_verysmall=fMapNt_verysmall.begin();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>while<sp/>(<sp/>it_verysmall!=fMapNt_verysmall.end())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(it_verysmall-&gt;first<sp/>==<sp/>000000)<sp/>{<sp/>//<sp/>if<sp/>it_verysmall<sp/>is<sp/>the<sp/>ad<sp/>hoc<sp/>element<sp/>used<sp/>for<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it_verysmall<sp/>=<sp/>fMapNt_verysmall.erase(it_verysmall);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MapNt[it_verysmall-&gt;first]<sp/>+=<sp/>it_verysmall-&gt;second;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it_verysmall;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>it_small=fMapNt_small.begin();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>while<sp/>(<sp/>it_small!=fMapNt_small.end())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(it_small-&gt;first<sp/>==<sp/>000000)<sp/>{<sp/>//<sp/>if<sp/>it_small<sp/>is<sp/>the<sp/>ad<sp/>hoc<sp/>element<sp/>used<sp/>for<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it_small<sp/>=<sp/>fMapNt_small.erase(it_small);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MapNt[it_small-&gt;first]<sp/>+=<sp/>it_small-&gt;second;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it_small;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>it=MapNt.begin();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>while<sp/>(<sp/>it!=MapNt.end())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(it-&gt;second<sp/>&lt;<sp/>1e-200<sp/>||<sp/>it-&gt;first<sp/>==<sp/>000000)<sp/>{<sp/>//||<sp/>std::log10(std::abs(MapNt[IZA_i]))<sp/>&lt;=<sp/>-100)<sp/>{<sp/><sp/>//<sp/>If<sp/>amount<sp/>is<sp/>very<sp/>low<sp/>or<sp/>if<sp/>it<sp/>is<sp/>the<sp/>ad<sp/>hoc<sp/>element<sp/>used<sp/>for<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>MapNt.erase(it);<sp/>//<sp/>WARNING<sp/>not<sp/>sure<sp/>of<sp/>1e-200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>MapNt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Erase<sp/>content<sp/>of<sp/>map<sp/>N_0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ClearMapN_0()<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapN_0.clear();</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Erase<sp/>content<sp/>of<sp/>map<sp/>S_0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ClearMapS_0()<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapS_0.clear();</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>amount<sp/>of<sp/>element<sp/>IZA<sp/>for<sp/>N(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ConstructMapNt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Nt)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapNt[IZA]<sp/>+=<sp/>Nt;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Erase<sp/>content<sp/>of<sp/>map<sp/>N(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ClearMapNt()<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>fMapNt.clear();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>fMapNt_small.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>fMapNt_verysmall.clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Construct<sp/>linear<sp/>decay<sp/>paths<sp/>of<sp/>element<sp/>IZA<sp/>due<sp/>to<sp/>decay<sp/>or<sp/>transmutation<sp/>and<sp/>update<sp/>the<sp/>map<sp/>of<sp/>decay<sp/>paths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WARNING<sp/>:<sp/>Fissions<sp/>or<sp/>reaction<sp/>with<sp/>multiple<sp/>products<sp/>are<sp/>not<sp/>taken<sp/>into<sp/>account<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ConstructChain(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA,<sp/>std::string<sp/>LogicVolumeName=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fMapChains.find(IZA)<sp/>==<sp/>fMapChains.end())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>element<sp/>is<sp/>not<sp/>already<sp/>in<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n<sp/>***<sp/>IZA<sp/>found<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(fMapChains[IZA].size()<sp/>==<sp/>0)<sp/>{<sp/>//<sp/>if<sp/>element<sp/>is<sp/>not<sp/>already<sp/>in<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>TMXElement*&gt;<sp/>mapStoreElem<sp/>=<sp/>TMXElementStore::Store();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mapStoreElem[IZA])<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref>*<sp/>elem<sp/>=<sp/>mapStoreElem[IZA];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_star<sp/>=<sp/>lambdaStar(elem,<sp/>LogicVolumeName);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;<sp/>vectorChain;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lambda_star<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>element<sp/>is<sp/>unstable<sp/>or<sp/>transmuted<sp/>:<sp/>implementation<sp/>of<sp/>the<sp/>decay<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>vectorElement;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorChain.push_back(vectorElement);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecursiveChain(elem,<sp/>vectorChain,<sp/>LogicVolumeName,<sp/>lambda_star);<sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>chain<sp/>recursively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>vectorChain.push_back({{(double)IZA,<sp/>0,<sp/>0,<sp/>1,<sp/>0}});<sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapChains[IZA]<sp/>=<sp/>vectorChain;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>vector<sp/>of<sp/>chains<sp/>in<sp/>a<sp/>map[key<sp/>=<sp/>IZA]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Element<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>IZA<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>the<sp/>database.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Recursive<sp/>construction<sp/>of<sp/>linear<sp/>chains<sp/>following<sp/>each<sp/>decay<sp/>path<sp/>successively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::RecursiveChain(<ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref>*<sp/>MotherElem,<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>vectorChain,<sp/>std::string<sp/>LogicVolumeName,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_star)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>vectorElement<sp/>=<sp/>vectorChain[vectorChain.size()-1];<sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>last<sp/>chain<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>TMXElement*&gt;<sp/>mapStoreElem<sp/>=<sp/>TMXElementStore::Store();<sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>new<sp/>element<sp/>in<sp/>the<sp/>DB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;TMXDecayChannel*&gt;<sp/>vectorDecays<sp/>=<sp/>MotherElem-&gt;DecayChannels();<sp/></highlight><highlight class="comment">//<sp/>Decay<sp/>channels<sp/>of<sp/>the<sp/>new<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>decay<sp/>channels<sp/>of<sp/>the<sp/>new<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;(int)vectorDecays.size();<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddMotherAndProgeny(vectorChain,<sp/>vectorElement,<sp/>MotherElem,<sp/>lambda_star,<sp/>vectorDecays[i]-&gt;BranchingRatio()*lambda(MotherElem),<sp/>0.,<sp/>vectorDecays[i]-&gt;IZA(),<sp/>i,<sp/>LogicVolumeName,<sp/>vectorDecays[i]-&gt;Decay(),<sp/>0);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WARNING<sp/>possibility<sp/>of<sp/>an<sp/>Infinite<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>transmutation<sp/>channels<sp/>of<sp/>the<sp/>mother<sp/>element<sp/>to<sp/>check<sp/>if<sp/>there<sp/>is<sp/>a<sp/>transmutation<sp/>of<sp/>this<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA_mother<sp/>=<sp/>MotherElem-&gt;IZA();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>strDecay<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*const<sp/>std::size_t*/</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>FissionRatePerN0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=0;<sp/>index&lt;2;<sp/>++index){</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>==<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>map<sp/>reserved<sp/>for<sp/>fissions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strDecay<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Fission&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>a<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>the<sp/>fission<sp/>rate<sp/>per<sp/>N0<sp/>for<sp/>the<sp/>mother<sp/>element<sp/>=<sp/>the<sp/>sum<sp/>of<sp/>fission<sp/>rates<sp/>of<sp/>every<sp/>daughter<sp/>elements<sp/>divided<sp/>by<sp/>2<sp/>because<sp/>of<sp/>the<sp/>2<sp/>fission<sp/>products</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FissionRatePerN0<sp/>=<sp/>std::accumulate(std::begin(fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA_mother]),<sp/>std::end(fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA_mother]),<sp/>0,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>previous,<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(*fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA_mother].begin())<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>previous+p.second;<sp/>})</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/2.;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;fission<sp/>&quot;<sp/>&lt;&lt;<sp/>FissionRatePerN0<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>it2=fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA_mother].begin();<sp/>it2!=fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA_mother].end();<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA_daughter<sp/>=<sp/>it2-&gt;first;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ReactionRate_perN0<sp/>=<sp/>it2-&gt;second;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddMotherAndProgeny(vectorChain,<sp/>vectorElement,<sp/>MotherElem,<sp/>lambda_star,<sp/>0.,<sp/>ReactionRate_perN0,<sp/>IZA_daughter,<sp/>i,<sp/>LogicVolumeName,<sp/>strDecay,<sp/>FissionRatePerN0);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;<sp/></highlight><highlight class="comment">//<sp/>counter<sp/>of<sp/>transmutation<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>decay<sp/>channel<sp/>the<sp/>mother<sp/>element<sp/>and<sp/>its<sp/>progeny</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::AddMotherAndProgeny(std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>vectorChain,<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;&amp;<sp/>vectorElement,<sp/><ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref>*<sp/>MotherElem,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_star,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BranchingRatio,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ReactionRate_perN0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA_daughter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>std::string<sp/>LogicVolumeName,<sp/>std::string<sp/>strDecay=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>FissionRatePerN0=0)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>TMXElement*&gt;<sp/>mapStoreElem<sp/>=<sp/>TMXElementStore::Store();<sp/></highlight><highlight class="comment">//<sp/>Instance<sp/>the<sp/>TMXElement<sp/>DB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(FissionRatePerN0<sp/>==<sp/>0)<sp/>{vectorElement.push_back(<sp/>{(double)MotherElem-&gt;IZA(),<sp/>lambda_star,<sp/>std::log(BranchingRatio<sp/>+<sp/>ReactionRate_perN0)<sp/>-<sp/>std::log(lambda_star),<sp/>1,<sp/>0}<sp/>);}<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>new<sp/>element<sp/>to<sp/>the<sp/>vector<sp/>of<sp/>elements<sp/>in<sp/>case<sp/>of<sp/>decay<sp/>or<sp/>transmutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{vectorElement.push_back(<sp/>{(double)MotherElem-&gt;IZA(),<sp/>lambda_star,<sp/>std::log(FissionRatePerN0)<sp/>-<sp/>std::log(lambda_star),<sp/>1,<sp/>0}<sp/>);}<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>new<sp/>element<sp/>to<sp/>the<sp/>vector<sp/>of<sp/>elements<sp/>in<sp/>case<sp/>of<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i&gt;0)<sp/>vectorChain.push_back(vectorElement);<sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>new<sp/>chain<sp/>of<sp/>elements<sp/>in<sp/>case<sp/>of<sp/>several<sp/>decay<sp/>paths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>vectorChain[vectorChain.size()-1]<sp/>=<sp/>vectorElement;<sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>last<sp/>chain<sp/>of<sp/>elements<sp/>for<sp/>the<sp/>first<sp/>decay<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index_VectorElement<sp/>=<sp/>vectorChain.size()-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>of<sp/>the<sp/>vector<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>vector<sp/>of<sp/>chains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index_element<sp/>=<sp/>vectorElement.size()-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>of<sp/>the<sp/>element<sp/>in<sp/>the<sp/>vector<sp/>of<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strDecay<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;SF&quot;</highlight><highlight class="normal">)<sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!<sp/>WARNING<sp/>!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>to<sp/>manage<sp/>spontaneous<sp/>fission<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Rechercher<sp/>Fission<sp/>products<sp/>dans<sp/>DB<sp/>GEANT4<sp/>pour<sp/>même<sp/>RN<sp/>avec<sp/>un<sp/>neutron<sp/>en<sp/>moins<sp/>(car<sp/>fission<sp/>spontannée<sp/>ici)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>hadoc<sp/>daugther<sp/>element<sp/>with<sp/>the<sp/>corresponding<sp/>fission<sp/>rate<sp/>and<sp/>a<sp/>decay<sp/>constant<sp/>=<sp/>+Infinity<sp/>(immediate<sp/>decay)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Following<sp/>this<sp/>element<sp/>add<sp/>new<sp/>chains<sp/>for<sp/>each<sp/>fission<sp/>product<sp/>with<sp/>its<sp/>probability<sp/>included<sp/>in<sp/>the<sp/>branching<sp/>ratio<sp/>and<sp/>call<sp/>this<sp/>method<sp/>for<sp/>each<sp/>fission<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IZA_daughter<sp/>=<sp/>430990;<sp/></highlight><highlight class="comment">//<sp/>Tc-99<sp/>at<sp/>each<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strDecay<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Fission&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;FissionRatePerN0<sp/>&quot;<sp/>&lt;&lt;<sp/>FissionRatePerN0<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>ReactionRate_perN0<sp/>of<sp/>each<sp/>fission<sp/>product<sp/>as<sp/>the<sp/>branching<sp/>ratio<sp/>from<sp/>X<sp/>to<sp/>the<sp/>daugther<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>sum<sp/>of<sp/>branching<sp/>ratios<sp/>should<sp/>be<sp/>2,<sp/>hence<sp/>the<sp/>branching<sp/>ratio<sp/>is<sp/>calculated<sp/>as<sp/>ReactionRate_perN0/FissionRatePerN0<sp/>and<sp/>FissionRatePerN0<sp/>is<sp/>the<sp/>sum<sp/>of<sp/>ReactionRate_perN0<sp/>divided<sp/>by<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorElement.push_back(<sp/>{000000,<sp/>1E+38,<sp/>std::log(ReactionRate_perN0)<sp/>-<sp/>std::log(FissionRatePerN0),<sp/>1,<sp/>0}<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>new<sp/>element<sp/>to<sp/>the<sp/>vector<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorChain[vectorChain.size()-1]<sp/>=<sp/>vectorElement;<sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>last<sp/>chain<sp/>of<sp/>elements<sp/>for<sp/>the<sp/>first<sp/>decay<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_element<sp/>=<sp/>vectorElement.size()-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>position<sp/>of<sp/>the<sp/>element<sp/>in<sp/>the<sp/>vector<sp/>of<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>continue<sp/>with<sp/>the<sp/>next<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manage<sp/>the<sp/>decay/transmutation<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mapStoreElem[IZA_daughter])<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>product<sp/>found<sp/>and<sp/>unstable<sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>Add<sp/>decay<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>to<sp/>the<sp/>decay<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>product<sp/>found<sp/>and<sp/>transmutation<sp/>-&gt;<sp/>Add<sp/>transmutation<sp/>channels<sp/>to<sp/>the<sp/>decay<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>product<sp/>found<sp/>and<sp/>stable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>Add<sp/>element<sp/>to<sp/>the<sp/>vector<sp/>of<sp/>elements<sp/>and<sp/>update<sp/>last<sp/>chain<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>product<sp/>not<sp/>found<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>Print<sp/>an<sp/>error<sp/>and<sp/>continue<sp/>with<sp/>the<sp/>next<sp/>decay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref>*<sp/>DaughterElem<sp/>=<sp/>mapStoreElem[IZA_daughter];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_star_daughter<sp/>=<sp/>lambdaStar(DaughterElem,<sp/>LogicVolumeName);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!DaughterElem-&gt;Stable()<sp/>||<sp/>lambda_star_daughter<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>daughter<sp/>element<sp/>is<sp/>unstable<sp/>or<sp/>transmuted<sp/>:<sp/>implementation<sp/>of<sp/>the<sp/>decay<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecursiveChain(DaughterElem,<sp/>vectorChain,<sp/>LogicVolumeName,<sp/>lambda_star_daughter);<sp/></highlight><highlight class="comment">//<sp/>Call<sp/>this<sp/>method:<sp/>Construct<sp/>the<sp/>chain<sp/>recursively<sp/>for<sp/>the<sp/>daughter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>decay<sp/>and<sp/>no<sp/>transmutation<sp/>:<sp/>Add<sp/>last<sp/>(stable)<sp/>element<sp/>in<sp/>the<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorElement.push_back(<sp/>{(double)DaughterElem-&gt;IZA(),<sp/>0,<sp/>0,<sp/>1,<sp/>0}<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>stable<sp/>daughter<sp/>element<sp/>to<sp/>the<sp/>chain<sp/>of<sp/>elements<sp/>only<sp/>if<sp/>no<sp/>transmutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorChain[index_VectorElement]<sp/>=<sp/>vectorElement;<sp/></highlight><highlight class="comment">//<sp/>Update<sp/>this<sp/>chain<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>vector<sp/>of<sp/>chains<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorElement.pop_back();<sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>last<sp/>(stable)<sp/>element<sp/>to<sp/>the<sp/>chain<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorElement.pop_back();<sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>last<sp/>element<sp/>to<sp/>the<sp/>chain<sp/>of<sp/>elements<sp/>(because<sp/>every<sp/>chain<sp/>of<sp/>this<sp/>element<sp/>have<sp/>been<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalization<sp/>of<sp/>branching<sp/>ratios<sp/>by<sp/>the<sp/>number<sp/>of<sp/>same<sp/>linear<sp/>chain<sp/>(<sp/>normalization<sp/>of<sp/>new<sp/>variable<sp/>?<sp/>-&gt;<sp/>it<sp/>should<sp/>be<sp/>new<sp/>variables)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=index_VectorElement;<sp/>j<sp/>&lt;<sp/>(int)vectorChain.size();<sp/>++j)<sp/>{<sp/>vectorChain[j][index_element][3]<sp/>=<sp/>vectorChain.size()<sp/>-<sp/>index_VectorElement;}<sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>occurence<sp/>of<sp/>this<sp/>decay<sp/>path<sp/>in<sp/>the<sp/>list<sp/>of<sp/>linear<sp/>chains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n\n\n\n\n\n\nDaugther<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>IZA_daughter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>TMXElement<sp/>database.\n\n\n\n\n\n\n\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Construct<sp/>linear<sp/>decay<sp/>paths<sp/>of<sp/>element<sp/>IZA<sp/>due<sp/>to<sp/>decay<sp/>or<sp/>transmutation<sp/>and<sp/>update<sp/>the<sp/>map<sp/>of<sp/>decay<sp/>paths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ConstructChainNoTransmutation(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fMapChains.find(IZA)<sp/>==<sp/>fMapChains.end())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>element<sp/>is<sp/>not<sp/>already<sp/>in<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n<sp/>***<sp/>IZA<sp/>found<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(fMapChains[IZA].size()<sp/>==<sp/>0)<sp/>{<sp/>//<sp/>if<sp/>element<sp/>is<sp/>not<sp/>already<sp/>in<sp/>the<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>TMXElement*&gt;<sp/>mapStoreElem<sp/>=<sp/>TMXElementStore::Store();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mapStoreElem[IZA])<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref>*<sp/>elem<sp/>=<sp/>mapStoreElem[IZA];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_mother<sp/>=<sp/>lambda(elem);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;<sp/>vectorChain;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lambda_mother<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>element<sp/>is<sp/>unstable<sp/>or<sp/>transmuted<sp/>:<sp/>implementation<sp/>of<sp/>the<sp/>decay<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>vectorElement;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorChain.push_back(vectorElement);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecursiveChainNoTransmutation(elem,<sp/>vectorChain,<sp/>lambda_mother);<sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>chain<sp/>recursively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>vectorChain.push_back({{(double)IZA,<sp/>0,<sp/>0,<sp/>1,<sp/>0}});<sp/>}<sp/></highlight><highlight class="comment">//<sp/>{IZA,<sp/>DecayConstant*,<sp/>ln(BranchingRatio*),<sp/>Number<sp/>of<sp/>occurence,<sp/>??}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapChains[IZA]<sp/>=<sp/>vectorChain;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>vector<sp/>of<sp/>chains<sp/>in<sp/>a<sp/>map[key<sp/>=<sp/>IZA]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Element<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>IZA<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>the<sp/>database.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Recursive<sp/>construction<sp/>of<sp/>linear<sp/>chains<sp/>following<sp/>each<sp/>decay<sp/>path<sp/>successively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::RecursiveChainNoTransmutation(<ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref>*<sp/>MotherElem,<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>vectorChain,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_mother)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>vectorElement<sp/>=<sp/>vectorChain[vectorChain.size()-1];<sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>last<sp/>chain<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>TMXElement*&gt;<sp/>mapStoreElem<sp/>=<sp/>TMXElementStore::Store();<sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>new<sp/>element<sp/>in<sp/>the<sp/>DB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;TMXDecayChannel*&gt;<sp/>vectorDecays<sp/>=<sp/>MotherElem-&gt;DecayChannels();<sp/></highlight><highlight class="comment">//<sp/>Decay<sp/>channels<sp/>of<sp/>the<sp/>new<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>decay<sp/>channels<sp/>of<sp/>the<sp/>new<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;(int)vectorDecays.size();<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddMotherAndProgenyNoTransmutation(vectorChain,<sp/>vectorElement,<sp/>MotherElem,<sp/>lambda_mother,<sp/>vectorDecays[i]-&gt;BranchingRatio(),<sp/>vectorDecays[i]-&gt;IZA(),<sp/>i,<sp/>vectorDecays[i]-&gt;Decay());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>decay<sp/>channel<sp/>the<sp/>mother<sp/>element<sp/>and<sp/>its<sp/>progeny</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::AddMotherAndProgenyNoTransmutation(std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>vectorChain,<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;&amp;<sp/>vectorElement,<sp/><ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref>*<sp/>MotherElem,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_mother,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BranchingRatio,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA_daughter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>std::string<sp/>strDecay=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>TMXElement*&gt;<sp/>mapStoreElem<sp/>=<sp/>TMXElementStore::Store();<sp/></highlight><highlight class="comment">//<sp/>Instance<sp/>the<sp/>TMXElement<sp/>DB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>vectorElement.push_back(<sp/>{(double)MotherElem-&gt;IZA(),<sp/>lambda_mother,<sp/>std::log(BranchingRatio),<sp/>1,<sp/>0}<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>new<sp/>element<sp/>to<sp/>the<sp/>vector<sp/>of<sp/>elements<sp/>in<sp/>case<sp/>of<sp/>decay<sp/>or<sp/>transmutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i&gt;0)<sp/>vectorChain.push_back(vectorElement);<sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>new<sp/>chain<sp/>of<sp/>elements<sp/>in<sp/>case<sp/>of<sp/>several<sp/>decay<sp/>paths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>vectorChain[vectorChain.size()-1]<sp/>=<sp/>vectorElement;<sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>last<sp/>chain<sp/>of<sp/>elements<sp/>for<sp/>the<sp/>first<sp/>decay<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index_VectorElement<sp/>=<sp/>vectorChain.size()-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>of<sp/>the<sp/>vector<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>vector<sp/>of<sp/>chains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index_element<sp/>=<sp/>vectorElement.size()-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>of<sp/>the<sp/>element<sp/>in<sp/>the<sp/>vector<sp/>of<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strDecay<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;SF&quot;</highlight><highlight class="normal">)<sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!<sp/>WARNING<sp/>!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>to<sp/>manage<sp/>spontaneous<sp/>fission<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Rechercher<sp/>Fission<sp/>products<sp/>dans<sp/>DB<sp/>GEANT4<sp/>pour<sp/>même<sp/>RN<sp/>avec<sp/>un<sp/>neutron<sp/>en<sp/>moins<sp/>(car<sp/>fission<sp/>spontannée<sp/>ici)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>hadoc<sp/>daugther<sp/>element<sp/>with<sp/>the<sp/>corresponding<sp/>fission<sp/>rate<sp/>and<sp/>a<sp/>decay<sp/>constant<sp/>=<sp/>+Infinity<sp/>(immediate<sp/>decay)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Following<sp/>this<sp/>element<sp/>add<sp/>new<sp/>chains<sp/>for<sp/>each<sp/>fission<sp/>product<sp/>with<sp/>its<sp/>probability<sp/>included<sp/>in<sp/>the<sp/>branching<sp/>ratio<sp/>and<sp/>call<sp/>this<sp/>method<sp/>for<sp/>each<sp/>fission<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IZA_daughter<sp/>=<sp/>430990;<sp/></highlight><highlight class="comment">//<sp/>Tc-99<sp/>at<sp/>each<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manage<sp/>the<sp/>decay/transmutation<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mapStoreElem[IZA_daughter])<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>product<sp/>found<sp/>and<sp/>unstable<sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>Add<sp/>decay<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>to<sp/>the<sp/>decay<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>product<sp/>found<sp/>and<sp/>transmutation<sp/>-&gt;<sp/>Add<sp/>transmutation<sp/>channels<sp/>to<sp/>the<sp/>decay<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>product<sp/>found<sp/>and<sp/>stable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>Add<sp/>element<sp/>to<sp/>the<sp/>vector<sp/>of<sp/>elements<sp/>and<sp/>update<sp/>last<sp/>chain<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>product<sp/>not<sp/>found<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>Print<sp/>an<sp/>error<sp/>and<sp/>continue<sp/>with<sp/>the<sp/>next<sp/>decay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref>*<sp/>DaughterElem<sp/>=<sp/>mapStoreElem[IZA_daughter];</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_daughter<sp/>=<sp/>lambda(DaughterElem);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!DaughterElem-&gt;Stable()<sp/>||<sp/>lambda_daughter<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>daughter<sp/>element<sp/>is<sp/>unstable<sp/>or<sp/>transmuted<sp/>:<sp/>implementation<sp/>of<sp/>the<sp/>decay<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecursiveChainNoTransmutation(DaughterElem,<sp/>vectorChain,<sp/>lambda_daughter);<sp/></highlight><highlight class="comment">//<sp/>Call<sp/>this<sp/>method:<sp/>Construct<sp/>the<sp/>chain<sp/>recursively<sp/>for<sp/>the<sp/>daughter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>decay<sp/>and<sp/>no<sp/>transmutation<sp/>:<sp/>Add<sp/>last<sp/>(stable)<sp/>element<sp/>in<sp/>the<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorElement.push_back(<sp/>{(double)DaughterElem-&gt;IZA(),<sp/>0,<sp/>0,<sp/>1,<sp/>0}<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>stable<sp/>daughter<sp/>element<sp/>to<sp/>the<sp/>chain<sp/>of<sp/>elements<sp/>only<sp/>if<sp/>no<sp/>transmutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorChain[index_VectorElement]<sp/>=<sp/>vectorElement;<sp/></highlight><highlight class="comment">//<sp/>Update<sp/>this<sp/>chain<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>vector<sp/>of<sp/>chains<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorElement.pop_back();<sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>last<sp/>(stable)<sp/>element<sp/>to<sp/>the<sp/>chain<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectorElement.pop_back();<sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>last<sp/>element<sp/>to<sp/>the<sp/>chain<sp/>of<sp/>elements<sp/>(because<sp/>every<sp/>chain<sp/>of<sp/>this<sp/>element<sp/>have<sp/>been<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalization<sp/>of<sp/>branching<sp/>ratios<sp/>by<sp/>the<sp/>number<sp/>of<sp/>same<sp/>linear<sp/>chain<sp/>(<sp/>normalization<sp/>of<sp/>new<sp/>variable<sp/>?<sp/>-&gt;<sp/>it<sp/>should<sp/>be<sp/>new<sp/>variables)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=index_VectorElement;<sp/>j<sp/>&lt;<sp/>(int)vectorChain.size();<sp/>++j)<sp/>{<sp/>vectorChain[j][index_element][3]<sp/>=<sp/>vectorChain.size()<sp/>-<sp/>index_VectorElement;}<sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>occurence<sp/>of<sp/>this<sp/>decay<sp/>path<sp/>in<sp/>the<sp/>list<sp/>of<sp/>linear<sp/>chains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n\n\n\n\n\n\nDaugther<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>IZA_daughter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>TMXElement<sp/>database.\n\n\n\n\n\n\n\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>stored<sp/>linear<sp/>chains<sp/>for<sp/>every<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::DumpStoredChains()<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vectorChain<sp/>:<sp/>fMapChains)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vectorChain.second.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nElement<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vectorChain.second[0][0][0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vectorElement<sp/>:<sp/>vectorChain.second)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\t\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element<sp/>:<sp/>vectorElement)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(element[1]<sp/>!=<sp/>0)<sp/>{std::cout<sp/>&lt;&lt;<sp/>(int)element[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--(T=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>1./element[1]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>b=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::exp(element[2])<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>n=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>element[3]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)--&gt;<sp/>&quot;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{std::cout<sp/>&lt;&lt;<sp/>(int)element[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--(T=+Inf,<sp/>b=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::exp(element[2])<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>n=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>element[3]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)--&gt;<sp/>&quot;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>end&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>radioactive<sp/>element<sp/>in<sp/>store&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::CalculateDecayNt(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Beginning<sp/>of<sp/>decay<sp/>of<sp/>N0<sp/>to<sp/>calculate<sp/>Nt&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>it=fMapN_0.begin();<sp/>it!=fMapN_0.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZA_0<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N0<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;<sp/>vectorChains<sp/>=<sp/>fMapChains[IZA_0];</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vectorElem<sp/>:<sp/>vectorChains)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if(IZA_0<sp/>==<sp/>922380)<sp/>{<sp/><sp/>std::cout<sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>vectorChain<sp/>:<sp/>&quot;&lt;&lt;<sp/>vectorChains.size()<sp/>&lt;&lt;<sp/>&quot;<sp/>vectorElem<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorChains.size()<sp/>&lt;&lt;<sp/>std::endl;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;(int)vectorElem.size();<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>i<sp/>=<sp/>the<sp/>ith<sp/>element<sp/>in<sp/>the<sp/>decay<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA_i<sp/>=<sp/>(int)vectorElem[i][0];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m<sp/>=<sp/>contribution<sp/>of<sp/>m<sp/>previous<sp/>element<sp/>in<sp/>the<sp/>chain<sp/>to<sp/>N_i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;<sp/></highlight><highlight class="comment">//<sp/>only<sp/>N0<sp/>=<sp/>N0[m=0]<sp/>!=<sp/>0<sp/>because<sp/>we<sp/>do<sp/>the<sp/>Calculation<sp/>for<sp/>every<sp/>elements<sp/>in<sp/>fMapN_0.<sp/>Index<sp/>m=0<sp/>instead<sp/>of<sp/>a<sp/>for<sp/>loop<sp/>with<sp/>(int<sp/>m=0;<sp/>m&lt;=i;<sp/>++m)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_BranchingRatioStar_product<sp/>=<sp/>ln_branchingProduct(vectorElem,<sp/>i,<sp/>m);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=m;<sp/>j&lt;=i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambdaStar_j<sp/>=<sp/>vectorElem[j][1];</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lambdaStar_j<sp/>&lt;=<sp/>2.e-38)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>If<sp/>stable<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IZA_i<sp/>==<sp/>822060)<sp/>{<sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Stable<sp/>IZA_i<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_i<sp/>&lt;&lt;<sp/>&quot;;<sp/>i<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/>BranchingRatioStar_product<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::exp(ln_BranchingRatioStar_product)<sp/>&lt;&lt;<sp/>&quot;<sp/>Add<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::exp(ln_BranchingRatioStar_product<sp/>+<sp/>std::log(N0))<sp/>&lt;&lt;<sp/>&quot;\tfMapNt[IZA_i]<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fMapNt[IZA_i]<sp/>+<sp/>fMapNt_small[IZA_i]<sp/>+<sp/>fMapNt_verysmall[IZA_i]<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(fMapNt[IZA_i]<sp/>+<sp/>std::exp(ln_BranchingRatioStar_product<sp/>+<sp/>std::log(N0))<sp/>!=<sp/>fMapNt[IZA_i])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt[IZA_i]<sp/>+=<sp/>std::exp(ln_BranchingRatioStar_product<sp/>+<sp/>std::log(N0))<sp/>;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>stable,<sp/>Calculation<sp/>N_i<sp/>+=<sp/>ln_BranchingRatioStar_product<sp/>*<sp/>dijm(=1)<sp/>*<sp/>N_0<sp/>*<sp/>exp(-<sp/>0<sp/>*<sp/>t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt_small[IZA_i]<sp/>+=<sp/>std::exp(ln_BranchingRatioStar_product<sp/>+<sp/>std::log(N0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_d_ijm<sp/>=<sp/>ln_dijm_decay(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>t,<sp/>sign);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IZA_i<sp/>==<sp/>822060)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Decay<sp/>IZA_i<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_i<sp/>&lt;&lt;<sp/>&quot;;<sp/>i<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;;<sp/>IZA_j<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorElem[j][0]<sp/>&lt;&lt;<sp/>&quot;\tBR_product:<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>std::exp(ln_BranchingRatioStar_product)<sp/>&lt;&lt;<sp/>&quot;\td_ijm:<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>sign*std::exp(ln_d_ijm)<sp/>&lt;&lt;<sp/>&quot;\tlambda_j:<sp/>&quot;<sp/>&lt;&lt;<sp/>lambdaStar_j<sp/>&lt;&lt;<sp/>&quot;\texp:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::exp(-lambdaStar_j<sp/>*<sp/>t)<sp/><sp/>&lt;&lt;<sp/>&quot;\tAdd:<sp/>&quot;<sp/>&lt;&lt;<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t)<sp/>&lt;&lt;<sp/>&quot;\tfMapNt[IZA_i]<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fMapNt[IZA_i]<sp/><sp/>+<sp/>fMapNt_small[IZA_i]+<sp/>fMapNt_verysmall[IZA_i]<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IZA_i<sp/>==<sp/>000000<sp/>&amp;&amp;<sp/>sign<sp/>&lt;<sp/>0)<sp/>{fMapNt[IZA_i]<sp/>+=<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t<sp/>-<sp/>std::log(2.));}<sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>N_i<sp/>+=<sp/>ln_BranchingRatioStar_product<sp/>*<sp/>dijm(=1)<sp/>*<sp/>N_0<sp/>exp(-<sp/>Lambda_j<sp/>*<sp/>t)<sp/>/<sp/>2.<sp/><sp/><sp/>=&gt;<sp/>in<sp/>case<sp/>of<sp/>IZA_i<sp/>==<sp/>000000,<sp/>it<sp/>is<sp/>a<sp/>had<sp/>oc<sp/>element<sp/>introduced<sp/>to<sp/>manage<sp/>fission.<sp/>As<sp/>the<sp/>quantity<sp/>of<sp/>this<sp/>element<sp/>is<sp/>half<sp/>the<sp/>quantity<sp/>of<sp/>fission<sp/>product,<sp/>it&apos;s<sp/>decay<sp/>is<sp/>divided<sp/>by<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(fMapNt[IZA_i]<sp/>+<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t)<sp/>!=<sp/>fMapNt[IZA_i])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt[IZA_i]<sp/>+=<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t);<sp/>//<sp/>Calculation<sp/>N_i<sp/>+=<sp/>ln_BranchingRatioStar_product<sp/>*<sp/>dijm(=1)<sp/>*<sp/>N_0<sp/>exp(-<sp/>Lambda_j<sp/>*<sp/>t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt_small[IZA_i]<sp/>+=<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(std::log10(std::abs(fMapNt[IZA_i]))<sp/>-<sp/>std::log10(std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t))<sp/>&gt;<sp/>15)<sp/>//<sp/>New<sp/>value<sp/>is<sp/>very<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt_verysmall[IZA_i]<sp/>+=<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(std::log10(std::abs(fMapNt[IZA_i]))<sp/>-<sp/>std::log10(std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t))<sp/>&gt;<sp/>10)<sp/>//<sp/>New<sp/>value<sp/>is<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt_small[IZA_i]<sp/>+=<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(std::log10(std::abs(fMapNt[IZA_i]))<sp/>-<sp/>std::log10(std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t))<sp/>&lt;<sp/>-10)<sp/>{<sp/>//<sp/>New<sp/>value<sp/>is<sp/>very<sp/>high</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(std::log10(std::abs(fMapNt[IZA_i]))<sp/>-<sp/>std::log10(std::abs(fMapNt_verysmall[IZA_i]))<sp/>&lt;<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt_verysmall[IZA_i]<sp/>+=<sp/>fMapNt[IZA_i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt_small[IZA_i]<sp/>+=<sp/>fMapNt[IZA_i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt[IZA_i]<sp/>=<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>//<sp/>New<sp/>value<sp/>is<sp/>in<sp/>the<sp/>same<sp/>order<sp/>of<sp/>magnitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt[IZA_i]<sp/>+=<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatioStar_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambdaStar_j<sp/>*<sp/>t);<sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>N_i<sp/>+=<sp/>ln_BranchingRatioStar_product<sp/>*<sp/>dijm(=1)<sp/>*<sp/>N_0<sp/>exp(-<sp/>Lambda_j<sp/>*<sp/>t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IZA_i<sp/>==<sp/>822060)<sp/>{<sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n&quot;<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;End<sp/>of<sp/>decay<sp/>of<sp/>N0<sp/>to<sp/>calculate<sp/>Nt&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::decayNuclideVector(std::map&lt;int,<sp/>double&gt;&amp;<sp/>nuclideVector,<sp/>std::map&lt;int,<sp/>int&gt;<sp/>sourceTerm,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>irradiationPeriod,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalingFactor)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>avoidDecay<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>double&gt;<sp/>nuclideVectorUpdated;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>std::vector&lt;long<sp/>double&gt;&gt;<sp/>forAccumulator;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;int,<sp/>double&gt;::iterator<sp/>it=nuclideVector.begin();<sp/>it!=nuclideVector.end();<sp/>++it)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZA_0<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N0<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avoidDecay)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nuclideVectorUpdated[IZA_0]<sp/>=<sp/>nuclideVector[IZA_0];</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstructChainNoTransmutation(IZA_0);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;<sp/>vectorChains<sp/>=<sp/>fMapChains[IZA_0];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(vectorChains[0][0][1]<sp/>&lt;<sp/>2.e-38)</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forAccumulator[IZA_0]<sp/>=<sp/>{nuclideVector[IZA_0]};</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>forAccumulator[IZA_0]<sp/>=<sp/>{0.};</highlight></codeline>
<codeline lineno="507"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vectorElem<sp/>:<sp/>vectorChains)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;(int)vectorElem.size();<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>i<sp/>=<sp/>the<sp/>ith<sp/>element<sp/>in<sp/>the<sp/>decay<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA_i<sp/>=<sp/>(int)vectorElem[i][0];</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_BranchingRatio_product<sp/>=<sp/>ln_branchingProduct(vectorElem,<sp/>i,<sp/>m);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(forAccumulator.find(IZA_i)<sp/>==<sp/>forAccumulator.end())<sp/>forAccumulator[IZA_i]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=m;<sp/>j&lt;=i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_j<sp/>=<sp/>vectorElem[j][1];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_d_ijm<sp/>=<sp/>ln_dijm_decay(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>irradiationPeriod,<sp/>sign);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lambda_j<sp/>&gt;<sp/>2.e-38){</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forAccumulator[IZA_i].push_back(sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>irradiationPeriod));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::exp(ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>irradiationPeriod)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>irradiationPeriod<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>WARNING,<sp/>NOT<sp/>ENOUGH<sp/>PRECISION<sp/>NUMBER<sp/>FOR<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>IZA_i&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lambda_j<sp/>&lt;=<sp/>2.e-38<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forAccumulator[IZA_i].push_back(std::exp(ln_BranchingRatio_product<sp/>+<sp/>std::log(N0)));</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nuclideVectorUpdated[IZA_i]<sp/>+=<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>std::log(N0))<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;StableDecay<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_0<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>IZA_i<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>std::log(N0))<sp/>&lt;&lt;<sp/>&quot;<sp/>lambda<sp/>&quot;<sp/>&lt;&lt;<sp/>lambda_j<sp/>&lt;&lt;<sp/>&quot;<sp/>brprod<sp/>&quot;&lt;&lt;ln_BranchingRatio_product<sp/>&lt;&lt;<sp/>&quot;<sp/>dijm<sp/>&quot;<sp/>&lt;&lt;<sp/>ln_d_ijm&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else{</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nuclideVectorUpdated[IZA_i]<sp/>+=<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>irradiationPeriod);</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;UnStableDecay<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_0<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>IZA_i<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>irradiationPeriod)<sp/>&lt;&lt;<sp/>&quot;<sp/>lambda<sp/>&quot;<sp/>&lt;&lt;<sp/>lambda_j<sp/>&lt;&lt;<sp/>&quot;<sp/>brprod<sp/>&quot;&lt;&lt;ln_BranchingRatio_product&lt;&lt;<sp/>&quot;<sp/>dijm<sp/>&quot;<sp/>&lt;&lt;<sp/>ln_d_ijm&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(std::exp(ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>irradiationPeriod)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>irradiationPeriod<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;<sp/>WARNING,<sp/>NOT<sp/>ENOUGH<sp/>PRECISION<sp/>NUMBER<sp/>FOR<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_i&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Decayed<sp/>initial<sp/>term&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>double&gt;<sp/>decayedInitialTerm;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key:<sp/>forAccumulator)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decayedInitialTerm[key.first]<sp/>=<sp/>neumaier_sum(key.second);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(nuclideVector.find(key.first)<sp/>==<sp/>nuclideVector.end())<sp/>std::cout<sp/>&lt;&lt;<sp/>key.first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>&quot;0&quot;<sp/>&lt;&lt;<sp/>&quot;<sp/>-&gt;<sp/>&quot;<sp/>&lt;&lt;<sp/>decayedInitialTerm[key.first]<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>std::cout<sp/>&lt;&lt;<sp/>key.first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>nuclideVector[key.first]<sp/>&lt;&lt;<sp/>&quot;<sp/>-&gt;<sp/>&quot;<sp/>&lt;&lt;<sp/>decayedInitialTerm[key.first]<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nuclideVectorUpdated[key.first]<sp/>+=<sp/>decayedInitialTerm[key.first];</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>CalculateSourceNtNoTransmutation2(sourceTerm,<sp/>irradiationPeriod,<sp/>scalingFactor,<sp/>nuclideVectorUpdated,<sp/>avoidDecay);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>nuclideVector<sp/>=<sp/>std::move(nuclideVectorUpdated);</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::CalculateSourceNtNoTransmutation2(std::map&lt;int,<sp/>int&gt;<sp/>sourceTerm,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>irradiationPeriod,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalingFactor,<sp/>std::map&lt;int,<sp/>double&gt;&amp;<sp/>nuclideVectorUpdated,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>avoidDecay)</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>std::vector&lt;long<sp/>double&gt;&gt;<sp/>forAccumulator;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;int,<sp/>int&gt;::iterator<sp/>it_isotope=sourceTerm.begin();<sp/>it_isotope!=sourceTerm.end();<sp/>++it_isotope)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZA<sp/>=<sp/>it_isotope-&gt;first;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Nelem<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)it_isotope-&gt;second<sp/>*<sp/>scalingFactor;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CheckMotherIsConstant(IZA,<sp/>Nelem);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstructChainNoTransmutation(IZA);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;<sp/>vectorChains<sp/>=<sp/>fMapChains[IZA];</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(vectorChains[0][0][1]<sp/>&lt;<sp/>2.e-38)<sp/>forAccumulator[IZA]<sp/>=<sp/>{Nelem};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vectorElem<sp/>:<sp/>vectorChains)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;(int)vectorElem.size();<sp/>++i)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA_i<sp/>=<sp/>(int)vectorElem[i][0];</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_BranchingRatio_product<sp/>=<sp/>ln_branchingProduct(vectorElem,<sp/>i,<sp/>m);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(forAccumulator.find(IZA_i)<sp/>==<sp/>forAccumulator.end())<sp/>forAccumulator[IZA_i]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=m;<sp/>j&lt;=i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_d_ijm<sp/>=<sp/>ln_dijm_source(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>irradiationPeriod,<sp/>sign);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vectorElem[j][1]<sp/>&gt;<sp/>2.e-38)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forAccumulator[IZA_i].push_back(sign<sp/>*<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm)<sp/>*<sp/>Nelem/irradiationPeriod<sp/>*<sp/>(-expm1(-vectorElem[j][1]<sp/>*<sp/>irradiationPeriod))<sp/>/<sp/>vectorElem[j][1]);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nuclideVectorUpdated[IZA_i]<sp/>+=<sp/>sign<sp/>*<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm)<sp/>*<sp/>Nelem/irradiationPeriod<sp/>*<sp/>(-expm1(-vectorElem[j][1]<sp/>*<sp/>irradiationPeriod))<sp/>/<sp/>vectorElem[j][1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expm1(-vectorElem[j][1]<sp/>*<sp/>irradiationPeriod)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>vectorElem[j][1]<sp/>*<sp/>irradiationPeriod<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>WARNING,<sp/>NOT<sp/>ENOUGH<sp/>PRECISION<sp/>NUMBER<sp/>FOR<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>IZA_i&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vectorElem[j][1]<sp/>&lt;=<sp/>2.e-38<sp/>)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forAccumulator[IZA_i].push_back(std::exp(ln_BranchingRatio_product)<sp/>*<sp/>Nelem);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nuclideVectorUpdated[IZA_i]<sp/>+=<sp/>std::exp(ln_BranchingRatio_product)<sp/>*<sp/>Nelem<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forAccumulator[IZA_i].push_back(sign<sp/>*<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm)<sp/>*<sp/>Nelem/irradiationPeriod<sp/>*<sp/>(-expm1(-vectorElem[j][1]<sp/>*<sp/>irradiationPeriod))<sp/>/<sp/>vectorElem[j][1]);</highlight></codeline>
<codeline lineno="600"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nuclideVectorUpdated[IZA_i]<sp/>+=<sp/>sign<sp/>*<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm)<sp/>*<sp/>Nelem/irradiationPeriod<sp/>*<sp/>(-expm1(-vectorElem[j][1]<sp/>*<sp/>irradiationPeriod))<sp/>/<sp/>vectorElem[j][1];</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(expm1(-vectorElem[j][1]<sp/>*<sp/>irradiationPeriod)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>vectorElem[j][1]<sp/>*<sp/>irradiationPeriod<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;<sp/>WARNING,<sp/>NOT<sp/>ENOUGH<sp/>PRECISION<sp/>NUMBER<sp/>FOR<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_i&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Decayed<sp/>source<sp/>term&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>double&gt;<sp/>decayedSourceTerm;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key:<sp/>forAccumulator)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decayedSourceTerm[key.first]<sp/>=<sp/>neumaier_sum(key.second);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>key.first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>sourceTerm[key.first]<sp/>&lt;&lt;<sp/>&quot;<sp/>-&gt;<sp/>&quot;<sp/>&lt;&lt;<sp/>decayedSourceTerm[key.first]<sp/>/<sp/>scalingFactor<sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nuclideVectorUpdated[key.first]<sp/>+=<sp/>decayedSourceTerm[key.first];</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>work<sp/>if<sp/>-ffast-math<sp/>is<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXBatemanDecay::neumaier_sum(std::vector&lt;long<sp/>double&gt;<sp/>c)</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum{};</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>running<sp/>compensation<sp/>for<sp/>lost<sp/>low-order<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>compensation{};</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>c)</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp{<sp/>sum<sp/>+<sp/>i<sp/>};</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(sum)<sp/>&gt;=<sp/>std::abs(i)<sp/>)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>sum<sp/>is<sp/>bigger,<sp/>low-order<sp/>digits<sp/>of<sp/>input[i]<sp/>are<sp/>lost.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compensation<sp/>+=<sp/>(sum<sp/>-<sp/>temp)<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Else<sp/>low-order<sp/>digits<sp/>of<sp/>sum<sp/>are<sp/>lost.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compensation<sp/>+=<sp/>(i<sp/>-<sp/>temp)<sp/>+<sp/>sum;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Correction<sp/>only<sp/>applied<sp/>once<sp/>in<sp/>the<sp/>very<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum<sp/>+<sp/>compensation;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function<sp/>to<sp/>implement<sp/>the<sp/>Kahan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">//<sp/>summation<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXBatemanDecay::kahanSum(vector&lt;long<sp/>double&gt;<sp/>fa)</highlight></codeline>
<codeline lineno="651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Variable<sp/>to<sp/>store<sp/>the<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>to<sp/>iterate<sp/>over<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f<sp/>:<sp/>fa)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>f<sp/>-<sp/>c;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>sum<sp/>+<sp/>y;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(t<sp/>-<sp/>sum)<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::CalculateDecayNtNoTransmutation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/>std::string<sp/>LogicVolumeName)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>for(int<sp/>index=0;<sp/>index&lt;2;<sp/>++index){</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::unordered_map&lt;int,<sp/>std::unordered_map&lt;int,long<sp/>double&gt;&gt;::iterator<sp/>it1=fMapLVMotherDaughter_transm[index][LogicVolumeName].begin();<sp/>it1!=fMapLVMotherDaughter_transm[index][LogicVolumeName].end();<sp/>++it1)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::unordered_map&lt;int,long<sp/>double&gt;::iterator<sp/>it2=fMapLVMotherDaughter_transm[index][LogicVolumeName][it1-&gt;first].begin();<sp/>it2!=fMapLVMotherDaughter_transm[index][LogicVolumeName][it1-&gt;first].end();<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;ici<sp/>&quot;&lt;&lt;LogicVolumeName<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>it2-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>it2-&gt;second&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>transmuted<sp/>elements<sp/>in<sp/>the<sp/>map<sp/>fMapS_0<sp/>(mother<sp/>=<sp/>depletion<sp/>(&lt;0)<sp/>;<sp/>daughter<sp/>=<sp/>build<sp/>up<sp/>(&gt;0)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>SumTransmutedElements(LogicVolumeName);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fMapNt=fMapN_0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modification<sp/>of<sp/>initial<sp/>isotopic<sp/>vector<sp/>fMapN_0<sp/>with<sp/>depletion<sp/>of<sp/>mother<sp/>elements<sp/>and<sp/>calculation<sp/>of<sp/>build<sp/>up<sp/>of<sp/>daughter<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>CalculateSourceNtNoTransmutation(t);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fMapNt=fMapN_0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>decay<sp/>of<sp/>element<sp/>in<sp/>initial<sp/>isotopic<sp/>vector<sp/>fMapN_0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>it=fMapN_0.begin();<sp/>it!=fMapN_0.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZA_0<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N0<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LogicVolumeName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;Decay<sp/>in<sp/>&quot;&lt;&lt;IZA_0&lt;&lt;&quot;<sp/>&quot;&lt;&lt;N0&lt;&lt;&quot;<sp/>&quot;&lt;&lt;fMapNt[IZA_0]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstructChainNoTransmutation(IZA_0);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;<sp/>vectorChains<sp/>=<sp/>fMapChains[IZA_0];</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vectorElem<sp/>:<sp/>vectorChains)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;(int)vectorElem.size();<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>i<sp/>=<sp/>the<sp/>ith<sp/>element<sp/>in<sp/>the<sp/>decay<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IZA_0<sp/>==<sp/>922380)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>LogicVolumeName<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA_i<sp/>=<sp/>(int)vectorElem[i][0];</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m<sp/>=<sp/>contribution<sp/>of<sp/>m<sp/>previous<sp/>element<sp/>in<sp/>the<sp/>chain<sp/>to<sp/>N_i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;<sp/></highlight><highlight class="comment">//<sp/>only<sp/>N0<sp/>=<sp/>N0[m=0]<sp/>!=<sp/>0<sp/>because<sp/>we<sp/>do<sp/>the<sp/>Calculation<sp/>for<sp/>every<sp/>elements<sp/>in<sp/>fMapN_0.<sp/>Index<sp/>m=0<sp/>instead<sp/>of<sp/>a<sp/>for<sp/>loop<sp/>with<sp/>(int<sp/>m=0;<sp/>m&lt;=i;<sp/>++m)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_BranchingRatio_product<sp/>=<sp/>ln_branchingProduct(vectorElem,<sp/>i,<sp/>m);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=m;<sp/>j&lt;=i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda_j<sp/>=<sp/>vectorElem[j][1];</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_d_ijm<sp/>=<sp/>ln_dijm_decay(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>t,<sp/>sign);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lambda_j<sp/>&lt;=<sp/>2.e-38)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IZA_0<sp/>==<sp/>922380<sp/>&amp;&amp;<sp/>fMapNt[IZA_i]<sp/>+<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>std::log(N0))&gt;1E20)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Stable<sp/>IZA_i<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_i<sp/>&lt;&lt;<sp/>&quot;<sp/>BR:&quot;<sp/>&lt;&lt;<sp/>std::exp(<sp/>ln_BranchingRatio_product)<sp/>&lt;&lt;<sp/>&quot;<sp/>N0<sp/>&quot;<sp/>&lt;&lt;<sp/>N0<sp/>&lt;&lt;<sp/>&quot;<sp/>result<sp/>&quot;<sp/>&lt;&lt;<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>std::log(N0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>fMapNt[IZA_i]<sp/>&quot;<sp/>&lt;&lt;<sp/>fMapNt[IZA_i]<sp/>&lt;&lt;<sp/>&quot;<sp/>Sum<sp/>&quot;<sp/>&lt;&lt;<sp/>fMapNt[IZA_i]<sp/>+<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>std::log(N0))<sp/>&lt;&lt;<sp/>&quot;\n&quot;<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LogicVolumeName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;stable<sp/>&quot;&lt;&lt;IZA_i&lt;&lt;&quot;<sp/>&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt[IZA_i]<sp/>+=<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>std::log(N0))<sp/>;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LogicVolumeName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;stable<sp/>&quot;&lt;&lt;IZA_i&lt;&lt;&quot;<sp/>&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;lambda<sp/>&lt;<sp/>2e-38<sp/>&quot;&lt;&lt;<sp/>IZA_0<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;N0<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>IZA_i&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>lambda_j&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if<sp/>stable,<sp/>Calculation<sp/>N_i<sp/>+=<sp/>ln_BranchingRatio_product<sp/>*<sp/>dijm(=1)<sp/>*<sp/>N_0<sp/>*<sp/>exp(-<sp/>0<sp/>*<sp/>t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IZA_0<sp/>==<sp/>922380<sp/>&amp;&amp;<sp/>fMapNt[IZA_i]<sp/>+<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>t)&gt;1E20)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Decay<sp/>IZA_i<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_i<sp/>&lt;&lt;<sp/>&quot;<sp/>BR:&quot;<sp/>&lt;&lt;<sp/>std::exp(<sp/>ln_BranchingRatio_product)<sp/>&lt;&lt;<sp/>&quot;<sp/>dijm<sp/>&quot;<sp/>&lt;&lt;<sp/>sign*std::exp(ln_d_ijm)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>N0<sp/>&quot;<sp/>&lt;&lt;<sp/>N0<sp/>&lt;&lt;<sp/>&quot;<sp/>exp<sp/>&quot;<sp/>&lt;&lt;<sp/>std::exp(-<sp/>lambda_j<sp/>*<sp/>t)<sp/>&lt;&lt;<sp/>&quot;<sp/>result<sp/>&quot;<sp/>&lt;&lt;<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>fMapNt[IZA_i]<sp/>&quot;<sp/>&lt;&lt;<sp/>fMapNt[IZA_i]<sp/>&lt;&lt;<sp/>&quot;<sp/>Sum<sp/>&quot;<sp/>&lt;&lt;<sp/>fMapNt[IZA_i]<sp/>+<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>t)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LogicVolumeName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;instable<sp/>&quot;&lt;&lt;IZA_i&lt;&lt;&quot;<sp/>&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ln_d_ijm==0<sp/>&amp;&amp;<sp/>IZA_0<sp/>!=<sp/>IZA_i)std::cout&lt;&lt;IZA_0&lt;&lt;&quot;<sp/>&quot;&lt;&lt;IZA_i&lt;&lt;&quot;<sp/>&quot;&lt;&lt;ln_d_ijm&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt[IZA_i]<sp/>+=<sp/>sign<sp/>*<sp/>std::exp(<sp/>ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>t);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::exp(ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>t)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm<sp/>+<sp/>std::log(N0)<sp/>-<sp/>lambda_j<sp/>*<sp/>t<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>WARNING,<sp/>NOT<sp/>ENOUGH<sp/>PRECISION<sp/>NUMBER<sp/>FOR<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>IZA_i&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LogicVolumeName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;instable<sp/>&quot;&lt;&lt;IZA_i&lt;&lt;&quot;<sp/>&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;lambda<sp/>&quot;&lt;&lt;<sp/>IZA_0<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;N0<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>IZA_i&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>lambda_j&lt;&lt;<sp/><sp/>&quot;<sp/>&quot;&lt;&lt;fMapNt[IZA_i]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//<sp/>Calculation<sp/>N_i<sp/>+=<sp/>ln_BranchingRatio_product<sp/>*<sp/>dijm(=1)<sp/>*<sp/>N_0<sp/>exp(-<sp/>Lambda_j<sp/>*<sp/>t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LogicVolumeName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;Decay<sp/>out<sp/>&quot;&lt;&lt;IZA_0&lt;&lt;&quot;<sp/>&quot;&lt;&lt;N0&lt;&lt;&quot;<sp/>&quot;&lt;&lt;fMapNt[IZA_0]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>std::cout&lt;&lt;LogicVolumeName&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/><sp/><sp/>std::unordered_map&lt;int,<sp/>long<sp/>double<sp/>&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/><sp/><sp/>for(it=fMapNt.begin();<sp/>it!=fMapNt.end();it++)</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;it-&gt;first&lt;&lt;&quot;<sp/>&quot;&lt;&lt;it-&gt;second&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::CalculateSourceNtNoTransmutation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,<sp/>long<sp/>double&gt;::iterator<sp/>it_isotope=fMapS_0.begin();<sp/>it_isotope!=fMapS_0.end();<sp/>++it_isotope)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZA<sp/>=<sp/>it_isotope-&gt;first;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Nelem<sp/>=<sp/>it_isotope-&gt;second;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CheckMotherIsConstant(IZA,<sp/>Nelem);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>the<sp/>initial<sp/>isotopic<sp/>vector<sp/>of<sp/>the<sp/>material<sp/>with<sp/>depletion<sp/>of<sp/>mother<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(fMapN_0[IZA]<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>Nelem<sp/>&lt;<sp/>0)<sp/>{<sp/>//<sp/>If<sp/>the<sp/>transmuted<sp/>element<sp/>(build<sp/>up<sp/>or<sp/>depletion)<sp/>exists<sp/>in<sp/>the<sp/>isotopic<sp/>vector<sp/>of<sp/>element<sp/>in<sp/>the<sp/>material</highlight></codeline>
<codeline lineno="753"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(std::abs(Nelem<sp/>/<sp/>fMapN_0[IZA])<sp/>&gt;<sp/>0.01)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;!!!!<sp/>WARNING<sp/>!!!!<sp/>The<sp/>mother<sp/>element<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA<sp/>&lt;&lt;<sp/>&quot;<sp/>amount<sp/>varies<sp/>more<sp/>than<sp/>1%<sp/>(&quot;<sp/>&lt;&lt;<sp/>Nelem<sp/>/<sp/>fMapN_0[IZA]<sp/>*100.<sp/>&lt;&lt;<sp/>&quot;%).&quot;<sp/>&lt;&lt;<sp/>std::endl;<sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="comment"></highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Depletion<sp/>of<sp/>mother<sp/>element</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(fMapN_0[IZA]<sp/>+<sp/>Nelem<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IZA<sp/>==<sp/>922380)<sp/>{std::cout<sp/>&lt;&lt;<sp/>&quot;fMapN_0[IZA]<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fMapN_0[IZA]<sp/>&lt;&lt;<sp/>&quot;<sp/>Nelem<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>Nelem<sp/>&lt;&lt;<sp/>&quot;<sp/>result<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fMapN_0[IZA]<sp/>+<sp/>Nelem<sp/>&lt;&lt;<sp/>std::endl;}<sp/><sp/><sp/>//<sp/>result<sp/>=<sp/>OK</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapN_0[IZA]<sp/>+=<sp/>Nelem;<sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(fMapN_0[IZA]<sp/>+<sp/>Nelem<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapN_0.erase(IZA);</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n!!!!<sp/>WARNING<sp/>!!!!<sp/>Try<sp/>to<sp/>consume<sp/>more<sp/>quantity<sp/>of<sp/>element<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA<sp/>&lt;&lt;<sp/>&quot;<sp/>than<sp/>available.\n&quot;<sp/>&lt;&lt;<sp/>std::endl;<sp/>//<sp/>The<sp/>link<sp/>between<sp/>daugther<sp/>amd<sp/>mother<sp/>has<sp/>been<sp/>lost,<sp/>nothing<sp/>to<sp/>do<sp/>in<sp/>this<sp/>case</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(Nelem<sp/>&gt;<sp/>0)<sp/>{<sp/>//<sp/>If<sp/>build<sp/>up<sp/>of<sp/>a<sp/>new<sp/>element*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IZA<sp/>==<sp/>922380)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;N0<sp/>92238<sp/>&quot;<sp/>&lt;&lt;<sp/>Nelem<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstructChainNoTransmutation(IZA);<sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>linear<sp/>decay<sp/>paths<sp/>for<sp/>every<sp/>new<sp/>isotopes<sp/>in<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;<sp/>vectorChains<sp/>=<sp/>fMapChains[IZA];<sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>decay<sp/>chain<sp/>of<sp/>this<sp/>isotope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vectorElem<sp/>:<sp/>vectorChains)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;(int)vectorElem.size();<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>i<sp/>=<sp/>the<sp/>ith<sp/>element<sp/>in<sp/>the<sp/>decay<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA_i<sp/>=<sp/>(int)vectorElem[i][0];</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m<sp/>=<sp/>contribution<sp/>of<sp/>m<sp/>previous<sp/>element<sp/>in<sp/>the<sp/>chain<sp/>to<sp/>N_i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;<sp/></highlight><highlight class="comment">//<sp/>only<sp/>S0<sp/>=<sp/>S[m=0]<sp/>!=<sp/>0<sp/>because<sp/>we<sp/>do<sp/>the<sp/>Calculation<sp/>for<sp/>every<sp/>elements<sp/>in<sp/>fMapS_0.<sp/>Index<sp/>m=0<sp/>instead<sp/>of<sp/>a<sp/>for<sp/>loop<sp/>with<sp/>(int<sp/>m=0;<sp/>m&lt;=i;<sp/>++m)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_BranchingRatio_product<sp/>=<sp/>ln_branchingProduct(vectorElem,<sp/>i,<sp/>m);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=m;<sp/>j&lt;=i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_d_ijm<sp/>=<sp/>ln_dijm_source(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>t,<sp/>sign);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>stable<sp/>element<sp/>in<sp/>the<sp/>chain<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vectorElem[j][1]<sp/>&lt;=<sp/>2.e-38)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt[IZA_i]<sp/>+=<sp/>std::exp(ln_BranchingRatio_product)<sp/>*<sp/>Nelem<sp/>;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>if<sp/>stable,<sp/>Calculation<sp/>N_i<sp/>+=<sp/>ln_BranchingRatio_product<sp/>*<sp/>dijm(=1)<sp/>*<sp/>ReactionRate*t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IZA_i<sp/>==<sp/>922380)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Src<sp/>BR:&quot;<sp/>&lt;&lt;<sp/>std::exp(<sp/>ln_BranchingRatio_product)<sp/>&lt;&lt;<sp/>&quot;<sp/>dijm<sp/>&quot;<sp/>&lt;&lt;<sp/>std::exp(ln_dijm_source(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>t,<sp/>sign))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>S0<sp/>&quot;<sp/>&lt;&lt;<sp/>Nelem/t<sp/>&lt;&lt;<sp/>&quot;<sp/>exp<sp/>&quot;<sp/>&lt;&lt;<sp/>(1-std::exp(-vectorElem[j][1]<sp/>*<sp/>t))/vectorElem[j][1]<sp/>&lt;&lt;<sp/>&quot;<sp/>total<sp/>&quot;<sp/>&lt;&lt;<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>ln_dijm_source(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>t,<sp/>sign))<sp/>*<sp/>Nelem/t<sp/>*<sp/>(1-std::exp(-vectorElem[j][1]<sp/>*<sp/>t))/vectorElem[j][1]<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;IZA_i&lt;&lt;&quot;<sp/>&quot;&lt;&lt;IZA&lt;&lt;&quot;<sp/>&quot;&lt;&lt;Nelem&lt;&lt;&quot;<sp/>&quot;&lt;&lt;t&lt;&lt;&quot;<sp/>&quot;&lt;&lt;vectorElem[j][1]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;IZA<sp/>&lt;&lt;<sp/>&quot;<sp/>-&gt;<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_i<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;vectorElem[i][1]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;vectorElem[j][1]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>std::exp(ln_BranchingRatio_product)&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>std::exp(ln_dijm_source(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>t,<sp/>sign))&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt[IZA_i]<sp/>+=<sp/>sign<sp/>*<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>ln_d_ijm)<sp/>*<sp/>Nelem/t<sp/>*<sp/>(-expm1(-vectorElem[j][1]<sp/>*<sp/>t))<sp/>/<sp/>vectorElem[j][1];</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expm1(-vectorElem[j][1]<sp/>*<sp/>t)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>vectorElem[j][1]<sp/>*<sp/>t<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>WARNING,<sp/>NOT<sp/>ENOUGH<sp/>PRECISION<sp/>NUMBER<sp/>FOR<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>IZA_i&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapNt[IZA_i]<sp/>+=<sp/>std::exp(ln_BranchingRatio_product<sp/>+<sp/>ln_dijm_source(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>t,<sp/>sign))<sp/>*<sp/>Nelem;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>N_i<sp/>+=<sp/>BranchingRatio_product<sp/>*<sp/>dijm<sp/>*<sp/>ReactionRate<sp/>*<sp/>(1<sp/>-<sp/>exp(-<sp/>Lambda_j<sp/>*<sp/>t))/Lambda_j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::CalculateSourceNt(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/>std::string<sp/>LogicVolumeName)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;********<sp/>Begin<sp/>of<sp/>CalculateSourceNt<sp/>*************&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::unordered_map&lt;int,<sp/>long<sp/>double&gt;&gt;::iterator<sp/>it1=fMapLVMotherDaughter_transm[1][LogicVolumeName].begin();<sp/>it1!=fMapLVMotherDaughter_transm[1][LogicVolumeName].end();<sp/>++it1)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZA_mother<sp/>=<sp/>it1-&gt;first;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N0_mother<sp/>=<sp/>fMapN_0[IZA_mother];</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;IZA_mother<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_mother<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>N0_mother<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,long<sp/>double&gt;::iterator<sp/>it2=fMapLVMotherDaughter_transm[1][LogicVolumeName][it1-&gt;first].begin();<sp/>it2!=fMapLVMotherDaughter_transm[1][LogicVolumeName][it1-&gt;first].end();<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZA_daughter<sp/>=<sp/>it2-&gt;first;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ReactionRate_perN0<sp/>=<sp/>it2-&gt;second;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it2-&gt;first/10000<sp/>&gt;<sp/>IZA_mother/10000<sp/>-<sp/>20)<sp/>{<sp/>ReactionRate_perN0<sp/>=<sp/>it2-&gt;second;<sp/>}</highlight><highlight class="comment">//<sp/>it2-&gt;second<sp/>=<sp/>ReactionRate_perN0<sp/>=<sp/>gji<sp/>*<sp/>sigma_j<sp/>*<sp/>phi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>ReactionRate_perN0<sp/>=<sp/>it2-&gt;second/2.;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>of<sp/>a<sp/>fission<sp/>//<sp/>it2-&gt;second<sp/>=<sp/>2<sp/>*<sp/>ReactionRate_perN0<sp/>=<sp/>2<sp/>*<sp/>gji<sp/>*<sp/>sigma_j<sp/>*<sp/>phi<sp/>because<sp/>of<sp/>2<sp/>fission<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstructChain(IZA_daughter,<sp/>LogicVolumeName);<sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>linear<sp/>decay<sp/>paths<sp/>for<sp/>every<sp/>new<sp/>isotopes<sp/>in<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;IZA_daughter<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_daughter<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>ReactionRate_perN0<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;<sp/>&gt;<sp/>vectorChains<sp/>=<sp/>fMapChains[IZA_daughter];</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vectorElem<sp/>:<sp/>vectorChains)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;(int)vectorElem.size();<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>i<sp/>=<sp/>the<sp/>ith<sp/>element<sp/>in<sp/>the<sp/>decay<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA_i<sp/>=<sp/>(int)vectorElem[i][0];</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m<sp/>=<sp/>contribution<sp/>of<sp/>m<sp/>previous<sp/>element<sp/>in<sp/>the<sp/>chain<sp/>to<sp/>N_i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;<sp/></highlight><highlight class="comment">//<sp/>only<sp/>S0<sp/>=<sp/>S[m=0]<sp/>!=<sp/>0<sp/>because<sp/>we<sp/>do<sp/>the<sp/>Calculation<sp/>for<sp/>every<sp/>elements<sp/>in<sp/>fMapLVMotherDaughter_transm.<sp/>Index<sp/>m=0<sp/>instead<sp/>of<sp/>a<sp/>for<sp/>loop<sp/>with<sp/>(int<sp/>m=0;<sp/>m&lt;=i;<sp/>++m)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_BranchingRatioStar_product<sp/>=<sp/>ln_branchingProduct(vectorElem,<sp/>i,<sp/>m);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=m;<sp/>j&lt;=i;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IZA_i<sp/>==<sp/>922350)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;IZA_i<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA_i<sp/>&lt;&lt;<sp/>&quot;;<sp/>i<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;;<sp/>j<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>&quot;<sp/>BR_product<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>ln_BranchingRatioStar_product<sp/>&lt;&lt;<sp/>&quot;<sp/>vectorElem.size()<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorElem.size()<sp/>&lt;&lt;<sp/>&quot;<sp/>d_ijm<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>dijm_source(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>t)<sp/>&lt;&lt;<sp/>&quot;<sp/>N0_mother<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>N0_mother<sp/>&lt;&lt;<sp/>&quot;<sp/>T1/2<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorElem[j][1]<sp/>&lt;&lt;<sp/>&quot;<sp/>lambda<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorElem[j][1]<sp/>&lt;&lt;<sp/>&quot;<sp/>exp<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>(1-std::exp(-vectorElem[j][1]<sp/>*<sp/>t))<sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>Add<sp/>amount<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>ln_BranchingRatioStar_product<sp/>*<sp/>dijm_source(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>t)<sp/>*<sp/>ReactionRate_perN0<sp/>*<sp/>N0_mother<sp/>*<sp/>(1-std::exp(-vectorElem[j][1]<sp/>*<sp/>t))/vectorElem[j][1]<sp/>&lt;&lt;<sp/>&quot;<sp/>fMapNt[IZA_i]<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fMapNt[IZA_i]<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vectorElem[j][1]<sp/>&lt;=<sp/>2.e-38)<sp/>{fMapNt[IZA_i]<sp/>+=<sp/>ln_BranchingRatioStar_product<sp/>*<sp/>ReactionRate_perN0<sp/>*<sp/>N0_mother<sp/>;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>if<sp/>stable,<sp/>Calculation<sp/>N_i<sp/>+=<sp/>ln_BranchingRatioStar_product<sp/>*<sp/>dijm(=1)<sp/>*<sp/>ReactionRate_perN0<sp/>*<sp/>N0_mother</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{fMapNt[IZA_i]<sp/>+=<sp/>ln_BranchingRatioStar_product<sp/>*<sp/>dijm_source(vectorElem,<sp/>i,<sp/>j<sp/>,<sp/>m,<sp/>t)<sp/>*<sp/>ReactionRate_perN0<sp/>*<sp/>N0_mother<sp/>*<sp/>(1-std::exp(-vectorElem[j][1]<sp/>*<sp/>t))/vectorElem[j][1];<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>N_i<sp/>+=<sp/>ln_BranchingRatioStar_product<sp/>*<sp/>dijm<sp/>*<sp/>N_0<sp/>(1<sp/>-<sp/>exp(-<sp/>Lambda_j<sp/>*<sp/>t))/Lambda_j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;********<sp/>End<sp/>of<sp/>CalculateSourceNt<sp/>*************&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Multiply<sp/>every<sp/>transmuted<sp/>elements<sp/>amounts<sp/>in<sp/>fMapLVMotherDaughter_transm<sp/>and<sp/>fMapLVElem_transm<sp/>by<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::MultiplyTransmutedElem(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=0;<sp/>index&lt;2;<sp/>++index){</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;std::string,<sp/>std::unordered_map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::unordered_map&lt;int,<sp/>long<sp/>double&gt;&gt;&gt;::iterator<sp/>it=fMapLVMotherDaughter_transm[index].begin();<sp/>it!=fMapLVMotherDaughter_transm[index].end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::unordered_map&lt;int,long<sp/>double&gt;&gt;::iterator<sp/>it1=fMapLVMotherDaughter_transm[index][it-&gt;first].begin();<sp/>it1!=fMapLVMotherDaughter_transm[index][it-&gt;first].end();<sp/>++it1)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,long<sp/>double&gt;::iterator<sp/>it2=fMapLVMotherDaughter_transm[index][it-&gt;first][it1-&gt;first].begin();<sp/>it2!=fMapLVMotherDaughter_transm[index][it-&gt;first][it1-&gt;first].end();<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it2-&gt;second<sp/>=<sp/>it2-&gt;second<sp/>*<sp/>factor;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;FIRST<sp/>&quot;&lt;&lt;it-&gt;first&lt;&lt;&quot;<sp/>&quot;&lt;&lt;it1-&gt;first&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>it2-&gt;first&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;it2-&gt;second&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;std::string,<sp/>std::unordered_map&lt;int,<sp/>long<sp/>double&gt;&gt;::iterator<sp/>it=fMapLVElem_transm.begin();<sp/>it!=fMapLVElem_transm.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,long<sp/>double&gt;::iterator<sp/>it1=fMapLVElem_transm[it-&gt;first].begin();<sp/>it1!=fMapLVElem_transm[it-&gt;first].end();<sp/>++it1)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it1-&gt;second<sp/>=<sp/>it1-&gt;second<sp/>*<sp/>factor;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;SECOND<sp/>&quot;&lt;&lt;it-&gt;first&lt;&lt;&quot;<sp/>&quot;&lt;&lt;it1-&gt;first&lt;&lt;&quot;<sp/>&quot;&lt;&lt;it1-&gt;second&lt;&lt;&quot;<sp/>&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::MultiplyTransmutedElem(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor,<sp/>std::string<sp/>LVName)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=0;<sp/>index&lt;2;<sp/>++index){</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::unordered_map&lt;int,long<sp/>double&gt;&gt;::iterator<sp/>it1=fMapLVMotherDaughter_transm[index][LVName].begin();<sp/>it1!=fMapLVMotherDaughter_transm[index][LVName].end();<sp/>++it1)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,long<sp/>double&gt;::iterator<sp/>it2=fMapLVMotherDaughter_transm[index][LVName][it1-&gt;first].begin();<sp/>it2!=fMapLVMotherDaughter_transm[index][LVName][it1-&gt;first].end();<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it2-&gt;second<sp/>=<sp/>it2-&gt;second<sp/>*<sp/>factor;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;LVName<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>it2-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/>factor&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,long<sp/>double&gt;::iterator<sp/>it1=fMapLVElem_transm[LVName].begin();<sp/>it1!=fMapLVElem_transm[LVName].end();<sp/>++it1)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it1-&gt;second<sp/>=<sp/>it1-&gt;second<sp/>*<sp/>factor;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::CheckMotherIsConstant(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA_mother,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N_TransmutedElem)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fMapN_0[IZA_mother]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(N_TransmutedElem/fMapN_0[IZA_mother])<sp/>&gt;<sp/>0.01)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Mother<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>IZA_mother<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>amount<sp/>is<sp/>changed<sp/>by<sp/>more<sp/>than<sp/>1%<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>N_TransmutedElem/fMapN_0[IZA_mother]*100.<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%)<sp/>in<sp/>this<sp/>run.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>d_ijm<sp/>factor<sp/>for<sp/>decay<sp/>and<sp/>transmutation<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>Lambda*_j<sp/>=<sp/>Lambda*_k,<sp/>we<sp/>use<sp/>l&apos;hopital&apos;s<sp/>theorem<sp/>to<sp/>calculate<sp/>the<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>limit<sp/>depends<sp/>on<sp/>whether<sp/>it<sp/>is<sp/>the<sp/>source<sp/>term<sp/>or<sp/>the<sp/>decay<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ln_dijm_decay(std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;&amp;<sp/>vectorElem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>sign)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Lambda_product<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=m;<sp/>k&lt;=i-1;<sp/>++k)<sp/>{Lambda_product<sp/>+=<sp/>std::log(vectorElem[k][1]);}<sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>the<sp/>product<sp/>of<sp/>lambda*<sp/>(numerator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DeltaLambda_product<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=m;<sp/>k&lt;=i;<sp/>++k)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>the<sp/>product<sp/>of<sp/>Delta<sp/>lambda*<sp/>(denominator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(vectorElem[k][1]<sp/>-<sp/>vectorElem[j][1]<sp/>&gt;=<sp/>1E-15)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vectorElem[k][1]!=vectorElem[j][1]){</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaLambda_product<sp/>+=<sp/>std::log(std::abs(vectorElem[k][1]<sp/>-<sp/>vectorElem[j][1]));</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>*=<sp/>std::abs(vectorElem[k][1]<sp/>-<sp/>vectorElem[j][1])<sp/>/<sp/>(vectorElem[k][1]<sp/>-<sp/>vectorElem[j][1]);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(vectorElem[k][1]==vectorElem[j][1]<sp/>&amp;&amp;<sp/>k!=j)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(vectorElem[k][1]-vectorElem[j][1])<sp/>&lt;<sp/>1E-15<sp/>&amp;&amp;<sp/>k!=j)<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n\n\n<sp/>L&apos;Hopital&apos;s<sp/>rule<sp/>!<sp/>\n\n\n&quot;<sp/>&lt;&lt;<sp/>vectorElem[j][0]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorElem[k][0]<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaLambda_product<sp/>+=<sp/>std::log(2./t);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;HOPITAL&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>do<sp/>the<sp/>Calculation<sp/>with<sp/>l&apos;hopital<sp/>theorem<sp/>and<sp/>Lambda_k<sp/>=<sp/>Lambda_j<sp/>+<sp/>x<sp/>with<sp/>x-&gt;0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(vectorElem[j][0]<sp/>==<sp/>902340<sp/>&amp;&amp;<sp/>vectorElem[i][0]<sp/>==<sp/>822060)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(vectorElem[j][0]<sp/>==<sp/>000000<sp/>&amp;&amp;<sp/>m!=i)<sp/>//<sp/>In<sp/>the<sp/>case<sp/>of<sp/>ad<sp/>hoc<sp/>element,<sp/>only<sp/>the<sp/>sign<sp/>matters<sp/>because<sp/>it<sp/>determines<sp/>if<sp/>it<sp/>is<sp/>a<sp/>production<sp/>or<sp/>a<sp/>decay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>std::pow(-1,<sp/>i-m-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout&lt;&lt;DeltaLambda_product&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Lambda_product-DeltaLambda_product);</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>d_ijm<sp/>factor<sp/>for<sp/>source<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>Lambda_j<sp/>=<sp/>Lambda_k,<sp/>we<sp/>use<sp/>l&apos;hopital&apos;s<sp/>theorem<sp/>to<sp/>calculate<sp/>the<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>limit<sp/>depends<sp/>on<sp/>whether<sp/>it<sp/>is<sp/>the<sp/>source<sp/>term<sp/>or<sp/>the<sp/>decay<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ln_dijm_source(std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;&amp;<sp/>vectorElem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>sign)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Lambda_product<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=m;<sp/>k&lt;=i-1;<sp/>++k)<sp/>{Lambda_product<sp/>+=<sp/>std::log(vectorElem[k][1]);}<sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>the<sp/>product<sp/>of<sp/>lambda*<sp/>(numerator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DeltaLambda_product<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=m;<sp/>k&lt;=i;<sp/>++k)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>the<sp/>product<sp/>of<sp/>Delta<sp/>lambda*<sp/>(denominator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vectorElem[k][1]!=vectorElem[j][1])<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaLambda_product<sp/>+=<sp/>std::log(std::abs(vectorElem[k][1]<sp/>-<sp/>vectorElem[j][1]));</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>*=<sp/>std::abs(vectorElem[k][1]<sp/>-<sp/>vectorElem[j][1])<sp/>/<sp/>(vectorElem[k][1]<sp/>-<sp/>vectorElem[j][1]);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(vectorElem[k][1]==vectorElem[j][1]<sp/>&amp;&amp;<sp/>k!=j)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(vectorElem[k][1]-vectorElem[j][1])<sp/>&lt;<sp/>1E-15<sp/>&amp;&amp;<sp/>k!=j)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaLambda_product<sp/>+=<sp/>std::log(std::abs(2./(1<sp/>-<sp/>t<sp/>*<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t)<sp/>/<sp/>(1<sp/>-<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t)))));</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>*=<sp/>std::abs(2./(1<sp/>-<sp/>t<sp/>*<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t)<sp/>/<sp/>(1<sp/>-<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t))))<sp/>/<sp/>(2./(1<sp/>-<sp/>t<sp/>*<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t)<sp/>/<sp/>(1<sp/>-<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t))));</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>do<sp/>the<sp/>Calculation<sp/>with<sp/>l&apos;hopital<sp/>theorem<sp/>and<sp/>Lambda_k<sp/>=<sp/>Lambda_j<sp/>+<sp/>x<sp/>with<sp/>x-&gt;0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Lambda_product-DeltaLambda_product);</highlight></codeline>
<codeline lineno="928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>d_ijm<sp/>factor<sp/>for<sp/>source<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>Lambda_j<sp/>=<sp/>Lambda_k,<sp/>we<sp/>use<sp/>l&apos;hopital&apos;s<sp/>theorem<sp/>to<sp/>calculate<sp/>the<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>limit<sp/>depends<sp/>on<sp/>whether<sp/>it<sp/>is<sp/>the<sp/>source<sp/>term<sp/>or<sp/>the<sp/>decay<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXBatemanDecay::dijm_source(std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;&amp;<sp/>vectorElem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Lambda_product<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=m;<sp/>k&lt;=i-1;<sp/>++k)<sp/>{Lambda_product<sp/>+=<sp/>std::log(vectorElem[k][1]);}<sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>the<sp/>product<sp/>of<sp/>lambda*<sp/>(numerator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DeltaLambda_product<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=m;<sp/>k&lt;=i;<sp/>++k)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>the<sp/>product<sp/>of<sp/>Delta<sp/>lambda*<sp/>(denominator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vectorElem[k][1]!=vectorElem[j][1])<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaLambda_product<sp/>+=<sp/>std::log(std::abs(vectorElem[k][1]<sp/>-<sp/>vectorElem[j][1]));</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>*=<sp/>std::abs(vectorElem[k][1]<sp/>-<sp/>vectorElem[j][1])<sp/>/<sp/>(vectorElem[k][1]<sp/>-<sp/>vectorElem[j][1]);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(vectorElem[k][1]==vectorElem[j][1]<sp/>&amp;&amp;<sp/>k!=j)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::abs(vectorElem[k][1]-vectorElem[j][1])<sp/>&lt;<sp/>1E-15<sp/>&amp;&amp;<sp/>k!=j)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeltaLambda_product<sp/>+=<sp/>std::log(std::abs(2./(1<sp/>-<sp/>t<sp/>*<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t)<sp/>/<sp/>(1<sp/>-<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t)))));</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>*=<sp/>std::abs(2./(1<sp/>-<sp/>t<sp/>*<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t)<sp/>/<sp/>(1<sp/>-<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t))))<sp/>/<sp/>(2./(1<sp/>-<sp/>t<sp/>*<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t)<sp/>/<sp/>(1<sp/>-<sp/>std::exp(-vectorElem[j][1]<sp/>*<sp/>t))));</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>do<sp/>the<sp/>Calculation<sp/>with<sp/>l&apos;hopital<sp/>theorem<sp/>and<sp/>Lambda_k<sp/>=<sp/>Lambda_j<sp/>+<sp/>x<sp/>with<sp/>x-&gt;0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sign*std::exp(Lambda_product-DeltaLambda_product);</highlight></codeline>
<codeline lineno="951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normalization<sp/>of<sp/>the<sp/>transmuted<sp/>elements<sp/>amount<sp/>(in<sp/>fMapLVMotherDaughter_transm)<sp/>by<sp/>the<sp/>initial<sp/>amount<sp/>N0<sp/>of<sp/>the<sp/>father<sp/>elements<sp/>in<sp/>the<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Necessary<sp/>to<sp/>get<sp/>sigma*phi<sp/>instead<sp/>of<sp/>sigma*phi*N_i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::NormalizeTransmutedElem(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA,<sp/>std::string<sp/>LogicVolumeName)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N0<sp/>=<sp/>fMapN_0[IZA];</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(N0<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=0;<sp/>index&lt;2;<sp/>++index){</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,long<sp/>double&gt;::iterator<sp/>it1=fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA].begin();<sp/>it1!=fMapLVMotherDaughter_transm[index][LogicVolumeName][IZA].end();<sp/>++it1)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Norm<sp/>it1-&gt;second<sp/>&quot;<sp/>&lt;&lt;<sp/>it1-&gt;second<sp/>&lt;&lt;<sp/>&quot;<sp/>it1-&gt;first<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>it1-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>IZA<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>IZA<sp/>&lt;&lt;<sp/>&quot;<sp/>it-&gt;second<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>it-&gt;second<sp/>&lt;&lt;<sp/>&quot;<sp/>it1-&gt;second<sp/>/<sp/>it-&gt;second<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>it1-&gt;second<sp/>/<sp/>it-&gt;second<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it1-&gt;second<sp/>=<sp/>it1-&gt;second<sp/>/<sp/>N0;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>the<sp/>decay<sp/>constant<sp/>for<sp/>TMXelement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXBatemanDecay::lambda(<ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref>*<sp/>elem)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(elem-&gt;Tave()<sp/>&lt;<sp/>5.e37)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.<sp/>/<sp/>elem-&gt;Tave();}<sp/></highlight><highlight class="comment">//<sp/>If<sp/>radioactive<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>If<sp/>stable<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>the<sp/>decay<sp/>constant<sp/>with<sp/>transmutation<sp/>rate<sp/>for<sp/>TMXelement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXBatemanDecay::lambdaStar(<ref refid="class_t_m_x_element" kindref="compound">TMXElement</ref>*<sp/>elem,<sp/>std::string<sp/>LogicVolumeName)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambdaStar_i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZA_elem<sp/>=<sp/>elem-&gt;IZA();</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>std::unordered_map&lt;int,<sp/>std::unordered_map&lt;int,long<sp/>double&gt;&gt;&gt;<sp/>MapLVMotherDaughter_transm[2]<sp/>=<sp/>{fMapLVMotherDaughter_transm[0],<sp/>fMapLVMotherDaughter_transm[1]};</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=0;<sp/>index&lt;2;<sp/>++index){</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,long<sp/>double&gt;::iterator<sp/>it3=MapLVMotherDaughter_transm[index][LogicVolumeName][IZA_elem].begin();<sp/>it3!=MapLVMotherDaughter_transm[index][LogicVolumeName][IZA_elem].end();<sp/>++it3)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambdaStar_i<sp/>+=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)it3-&gt;second;<sp/></highlight><highlight class="comment">//<sp/>it3-&gt;second<sp/>=<sp/>ReactionRate_perN0<sp/>=<sp/>gji<sp/>*<sp/>sigma_j<sp/>*<sp/>phi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>lambdaStar_i<sp/>+=<sp/>lambda(elem);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lambdaStar_i<sp/>&gt;<sp/>2.e-38)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lambdaStar_i;}<sp/></highlight><highlight class="comment">//<sp/>If<sp/>decay<sp/>constant<sp/>+<sp/>transmutation<sp/>rate<sp/>is<sp/>significant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>If<sp/>stable<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>the<sp/>product<sp/>of<sp/>branching<sp/>ratios<sp/>for<sp/>element<sp/>i<sp/>from<sp/>vectorElem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ln_branchingProduct(std::vector<sp/>&lt;<sp/>std::vector<sp/>&lt;long<sp/>double&gt;<sp/>&gt;&amp;<sp/>vectorElem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln_BranchingRatioStar_product<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=m;<sp/>l&lt;=i;<sp/>++l)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ln_BranchingRatioStar_product<sp/>+=<sp/>vectorElem[l][2];<sp/><sp/></highlight><highlight class="comment">//<sp/>Product<sp/>of<sp/>branching<sp/>ratios<sp/>from<sp/>0<sp/>to<sp/>i;<sp/>Branh[j]<sp/>gives<sp/>the<sp/>branching<sp/>leading<sp/>to<sp/>the<sp/>next<sp/>element<sp/>j+1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;l<sp/>&quot;<sp/>&lt;&lt;<sp/>l<sp/>&lt;&lt;<sp/>&quot;<sp/>i<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/>vectorElem[l][0]<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorElem[l][0]<sp/>&lt;&lt;<sp/>&quot;<sp/>bji<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorElem[l][2]<sp/>&lt;&lt;<sp/>&quot;<sp/>vectorElem[i][3]<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorElem[i][3]<sp/>&lt;&lt;<sp/>&quot;<sp/>ln_BranchingRatioStar_product<sp/>&quot;<sp/>&lt;&lt;<sp/>ln_BranchingRatioStar_product<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(vectorElem[i][0]<sp/>==<sp/>922350)<sp/>{std::cout<sp/>&lt;&lt;<sp/>&quot;i<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/>ln_BranchingRatioStar_product<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>ln_BranchingRatioStar_product<sp/>&lt;&lt;<sp/>&quot;<sp/>vectorElem[i][3]<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>vectorElem[i][3]<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ln_BranchingRatioStar_product<sp/>-<sp/>std::log(vectorElem[i][3]));<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>branching<sp/>product<sp/>is<sp/>divided<sp/>by<sp/>the<sp/>number<sp/>of<sp/>occurence<sp/>of<sp/>this<sp/>particular<sp/>chain<sp/>with<sp/>element<sp/>i<sp/>in<sp/>the<sp/>list<sp/>of<sp/>all<sp/>decay<sp/>chains<sp/>of<sp/>element<sp/>m<sp/>(the<sp/>calculation<sp/>will<sp/>be<sp/>repeated<sp/>N<sp/>times)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>ln_BranchingRatioStar_product;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Substract<sp/>the<sp/>transmuted<sp/>elements<sp/>to<sp/>N0<sp/>number<sp/>of<sp/>mother<sp/>atoms<sp/>and<sp/>add<sp/>the<sp/>daugther<sp/>to<sp/>N0<sp/>map<sp/>of<sp/>elements<sp/>for<sp/>decay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::SumTransmutedElements(std::string<sp/>LogicVolumeName)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=0;<sp/>index&lt;2;<sp/>++index){</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::unordered_map&lt;int,long<sp/>double&gt;&gt;::iterator<sp/>it_mother=fMapLVMotherDaughter_transm[index][LogicVolumeName].begin();<sp/>it_mother!=fMapLVMotherDaughter_transm[index][LogicVolumeName].end();<sp/>++it_mother)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,long<sp/>double&gt;::iterator<sp/>it_daughter=fMapLVMotherDaughter_transm[index][LogicVolumeName][it_mother-&gt;first].begin();<sp/>it_daughter!=fMapLVMotherDaughter_transm[index][LogicVolumeName][it_mother-&gt;first].end();<sp/>++it_daughter)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(/*it_mother-&gt;first<sp/>==<sp/>922380<sp/>&amp;&amp;*/<sp/>LogicVolumeName<sp/>==<sp/>&quot;lFuel2&quot;<sp/>&amp;&amp;<sp/>it_daughter-&gt;second&gt;1E10)<sp/>{std::cout<sp/>&lt;&lt;<sp/>&quot;Volume:<sp/>&quot;<sp/>&lt;&lt;<sp/>LogicVolumeName<sp/>&lt;&lt;<sp/>&quot;<sp/>mother:<sp/>&quot;<sp/>&lt;&lt;<sp/>it_mother-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>daughter:<sp/>&quot;<sp/>&lt;&lt;<sp/>it_daughter-&gt;first<sp/>&lt;&lt;<sp/>&quot;results:<sp/>&quot;<sp/>&lt;&lt;<sp/>it_daughter-&gt;second/(index+1.)<sp/>&lt;&lt;<sp/>std::endl;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>element<sp/>production<sp/>(negative<sp/>for<sp/>mother<sp/>and<sp/>positive<sp/>for<sp/>daughter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;it_mother<sp/><sp/>-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;fMapS_0[it_mother<sp/><sp/>-&gt;first]<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;it_daughter-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;fMapS_0[it_daughter-&gt;first]<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LogicVolumeName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;Prod<sp/>in<sp/>&quot;&lt;&lt;it_mother<sp/><sp/>-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>fMapS_0[it_mother<sp/><sp/>-&gt;first]<sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>-&gt;<sp/>&quot;<sp/>&lt;&lt;<sp/>it_daughter<sp/><sp/>-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;fMapS_0[it_daughter<sp/><sp/>-&gt;first]<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="comment">*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapS_0[it_mother<sp/><sp/>-&gt;first]<sp/>-=<sp/>it_daughter-&gt;second/(index+1.);</highlight><highlight class="comment">//*100;<sp/>//<sp/>index<sp/>=<sp/>0<sp/>-&gt;<sp/>1<sp/>reaction<sp/>product<sp/>|<sp/>index<sp/>=<sp/>1<sp/>-&gt;<sp/>2<sp/>reaction<sp/>products</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapS_0[it_daughter-&gt;first]<sp/>+=<sp/>it_daughter-&gt;second;</highlight><highlight class="comment">//*100;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(LogicVolumeName<sp/>==<sp/>&quot;lfuelmat23&quot;)</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;Prod<sp/>out<sp/>&quot;&lt;&lt;it_mother<sp/><sp/>-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>fMapS_0[it_mother<sp/><sp/>-&gt;first]<sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>-&gt;<sp/>&quot;<sp/>&lt;&lt;<sp/>it_daughter<sp/><sp/>-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;fMapS_0[it_daughter<sp/><sp/>-&gt;first]<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="comment">*/</highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;it_mother<sp/><sp/>-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;fMapS_0[it_mother<sp/><sp/>-&gt;first]<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;it_daughter-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;fMapS_0[it_daughter-&gt;first]<sp/>&lt;&lt;std::endl&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TMXBatemanDecay::ConsiderTransmutedElements(std::string<sp/>LogicVolumeName)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index=0;<sp/>index&lt;2;<sp/>++index){</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::unordered_map&lt;int,long<sp/>double&gt;&gt;::iterator<sp/>it_mother=fMapLVMotherDaughter_transm[index][LogicVolumeName].begin();<sp/>it_mother!=fMapLVMotherDaughter_transm[index][LogicVolumeName].end();<sp/>++it_mother)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::unordered_map&lt;int,long<sp/>double&gt;::iterator<sp/>it_daughter=fMapLVMotherDaughter_transm[index][LogicVolumeName][it_mother-&gt;first].begin();<sp/>it_daughter!=fMapLVMotherDaughter_transm[index][LogicVolumeName][it_mother-&gt;first].end();<sp/>++it_daughter)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;ConsiderTransm<sp/>it_mother-&gt;first<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>it_mother-&gt;first<sp/>&lt;&lt;<sp/>&quot;<sp/>*<sp/>it_daughter-&gt;second<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>it_daughter-&gt;second<sp/>&lt;&lt;<sp/>&quot;<sp/>=<sp/>results<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>it_daughter-&gt;second/(index+1.)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fMapN_0[it_mother-&gt;first]<sp/>-<sp/>it_daughter-&gt;second/(index+1.)<sp/>&gt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>mother<sp/>element<sp/>is<sp/>not<sp/>entirely<sp/>consumed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapN_0[it_mother-&gt;first]<sp/>-=<sp/>it_daughter-&gt;second/(index+1.);<sp/></highlight><highlight class="comment">//<sp/>index<sp/>=<sp/>0<sp/>-&gt;<sp/>1<sp/>reaction<sp/>product<sp/>|<sp/>index<sp/>=<sp/>1<sp/>-&gt;<sp/>2<sp/>reaction<sp/>products</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapN_0[it_daughter-&gt;first]<sp/>+=<sp/>it_daughter-&gt;second;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>produce<sp/>a<sp/>number<sp/>of<sp/>daughter<sp/>higher<sp/>than<sp/>the<sp/>number<sp/>of<sp/>mother<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapN_0[it_daughter-&gt;first]<sp/>+=<sp/>fMapN_0[it_mother-&gt;first];</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMapN_0.erase(it_mother-&gt;first);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/TMXElements/src/TMXBatemanDecay.cc"/>
  </compounddef>
</doxygen>
