<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_graphes__burnup_8_c" kind="file" language="C++">
    <compoundname>Graphes_burnup.C</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">string</includes>
    <includes local="no">TFile.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C</label>
        <link refid="_graphes__burnup_8_c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>TFile.h</label>
      </node>
      <node id="3">
        <label>fstream</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_graphes__burnup_8_c_1aacfb3dd01817d3c2df6c4b0b6ac1c004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool find_expression_betweenPhrases</definition>
        <argsstring>(std::string line, std::string phrase_before_value, std::string phrase_after_value, std::string &amp;expression)</argsstring>
        <name>find_expression_betweenPhrases</name>
        <param>
          <type>std::string</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>phrase_before_value</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>phrase_after_value</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="38" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="38" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="_graphes__burnup_8_c_1ab1c33433cc3921d85e066ac20778de6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void find_mass_in_g</definition>
        <argsstring>(std::string line, std::string phrase_before_value, double &amp;mass)</argsstring>
        <name>find_mass_in_g</name>
        <param>
          <type>std::string</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>phrase_before_value</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="55" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="_graphes__burnup_8_c_1ab36f2b7a54b89e40422ff03d44b4915e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void find_time_in_s</definition>
        <argsstring>(std::string line, std::string phrase_before_value, double &amp;time)</argsstring>
        <name>find_time_in_s</name>
        <param>
          <type>std::string</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>phrase_before_value</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="68" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="_graphes__burnup_8_c_1aa376d1e7b44d7179c7ba2e9ab99c066a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void read_every_lines</definition>
        <argsstring>(std::ifstream &amp;input_file, std::vector&lt; double &gt; &amp;vtotal_Run_time)</argsstring>
        <name>read_every_lines</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>input_file</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>vtotal_Run_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="80" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="80" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="_graphes__burnup_8_c_1a196f51edd5b54b458ee2eb3f076c32b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void read_every_textfiles</definition>
        <argsstring>(std::string fileNamePattern, int &amp;FileName_index, std::vector&lt; double &gt; &amp;vtotal_Run_time)</argsstring>
        <name>read_every_textfiles</name>
        <param>
          <type>std::string</type>
          <declname>fileNamePattern</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>FileName_index</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>vtotal_Run_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="143" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="143" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="_graphes__burnup_8_c_1a7bfbe94cc2cbb97df5aacf716b27b82f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetMax_entries</definition>
        <argsstring>(std::string name_pattern, int RunNumber)</argsstring>
        <name>GetMax_entries</name>
        <param>
          <type>std::string</type>
          <declname>name_pattern</declname>
        </param>
        <param>
          <type>int</type>
          <declname>RunNumber</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="171" column="5" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="171" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="_graphes__burnup_8_c_1a82603c84da6077d3d03ab3ff8e3d7fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetStyle</definition>
        <argsstring>()</argsstring>
        <name>SetStyle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="187" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="187" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="_graphes__burnup_8_c_1af009a4eccb5eee7e3d39e42e87a8ea0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FillHistograms</definition>
        <argsstring>(int RunNumber, std::vector&lt; double &gt; vtotal_Run_time, std::string material_name, double limit, TH2D *AZ_mass_histo, std::map&lt; int, TH1D * &gt; &amp;map_fractionHisto, std::map&lt; int, TH1D * &gt; &amp;map_massHisto)</argsstring>
        <name>FillHistograms</name>
        <param>
          <type>int</type>
          <declname>RunNumber</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>vtotal_Run_time</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>material_name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>TH2D *</type>
          <declname>AZ_mass_histo</declname>
        </param>
        <param>
          <type>std::map&lt; int, TH1D * &gt; &amp;</type>
          <declname>map_fractionHisto</declname>
        </param>
        <param>
          <type>std::map&lt; int, TH1D * &gt; &amp;</type>
          <declname>map_massHisto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="227" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="227" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="_graphes__burnup_8_c_1a2fb819eade6ddc1cd15e6325971ca412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawMassEvolution</definition>
        <argsstring>(std::map&lt; int, TH1D * &gt; &amp;map_massHisto, std::string Initial_material_Name)</argsstring>
        <name>DrawMassEvolution</name>
        <param>
          <type>std::map&lt; int, TH1D * &gt; &amp;</type>
          <declname>map_massHisto</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Initial_material_Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="272" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="272" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="_graphes__burnup_8_c_1a496c592d1de430b6e026449a2b2d839f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawMassFractionEvolution</definition>
        <argsstring>(std::map&lt; int, TH1D * &gt; &amp;map_fractionHisto, std::string Initial_material_Name)</argsstring>
        <name>DrawMassFractionEvolution</name>
        <param>
          <type>std::map&lt; int, TH1D * &gt; &amp;</type>
          <declname>map_fractionHisto</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Initial_material_Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="319" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="319" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="_graphes__burnup_8_c_1a447b14a2652a16d9b32d1ca47fbc7c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DrawLastRunComposition</definition>
        <argsstring>(TH2D *AZ_mass_histo)</argsstring>
        <name>DrawLastRunComposition</name>
        <param>
          <type>TH2D *</type>
          <declname>AZ_mass_histo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="350" column="6" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="350" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="_graphes__burnup_8_c_1aed85d35f90975e1c5d3e763a0cd3e54a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Graphes_burnup</definition>
        <argsstring>(double Fraction_Threshold, std::string Initial_material_Name)</argsstring>
        <name>Graphes_burnup</name>
        <param>
          <type>double</type>
          <declname>Fraction_Threshold</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Initial_material_Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" line="380" column="5" bodyfile="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C" bodystart="380" bodyend="415"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>------------------------------------------------</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>|<sp/>Generation<sp/>of<sp/>graphes<sp/>for<sp/>burnup<sp/>analysis<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>------------------------------------------------</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Read<sp/>every<sp/>Evolved<sp/>material<sp/>files<sp/>in<sp/>the<sp/>directory</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>and<sp/>draw<sp/>three<sp/>types<sp/>of<sp/>histogram</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>2D<sp/>histogram<sp/>representing<sp/>the<sp/>mass<sp/>of<sp/>each<sp/>isotope<sp/>with<sp/>A<sp/>=<sp/>f(Z)<sp/>in<sp/>the<sp/>last<sp/>run</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>histogram<sp/>representing<sp/>the<sp/>time<sp/>evolution<sp/>of<sp/>the<sp/>isotope<sp/>mass<sp/><sp/>of<sp/>every<sp/>isotopes</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>histogram<sp/>representing<sp/>the<sp/>time<sp/>evolution<sp/>of<sp/>the<sp/>mass<sp/>fraction<sp/>of<sp/>every<sp/>isotopes<sp/>with<sp/>fraction<sp/>&lt;<sp/>threshold</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>Threshold<sp/>to<sp/>draw<sp/>isotope<sp/>fraction<sp/>evolution<sp/>only<sp/>with<sp/>isotope<sp/>fractions<sp/>lower<sp/>than<sp/>value</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>@rg2:<sp/>Name<sp/>of<sp/>the<sp/>material<sp/>to<sp/>be<sp/>plotted<sp/>(Initial<sp/>name<sp/>in<sp/>the<sp/>GEANT4<sp/>geometry).<sp/>Value<sp/>must<sp/>be<sp/>given<sp/>between<sp/>quotes.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>Output1:<sp/>root<sp/>file<sp/>&quot;burnup.root&quot;<sp/>with<sp/>all<sp/>histograms</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>Output2:<sp/>text<sp/>file<sp/>&quot;final_inventory.txt&quot;<sp/>with<sp/>total<sp/>inventory<sp/>in<sp/>last<sp/>run</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>Example<sp/>to<sp/>run<sp/>the<sp/>code<sp/>from<sp/>the<sp/>directory<sp/>containing<sp/>burnup<sp/>text<sp/>files</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>&gt;<sp/>root<sp/>&apos;../Graphes_burnup.C(0.12,&quot;fuel_ThPuO2&quot;)&apos;</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>libraries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ROOT<sp/>libraries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>Return<sp/>a<sp/>string<sp/>corresponding<sp/>to<sp/>the<sp/>expression<sp/>between<sp/>phrase_before<sp/>and<sp/>phrase_after</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>current<sp/>line</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>@rg2:<sp/>phrase<sp/>before<sp/>the<sp/>expression<sp/>we<sp/>are<sp/>looking<sp/>for</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>@rg3:<sp/>phrase<sp/>after<sp/><sp/>the<sp/>expression<sp/>we<sp/>are<sp/>looking<sp/>for</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>@rg4:<sp/>the<sp/>expression<sp/>we<sp/>are<sp/>looking<sp/>for</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>find_expression_betweenPhrases(std::string<sp/>line,<sp/>std::string<sp/>phrase_before_value,<sp/>std::string<sp/>phrase_after_value,<sp/>std::string&amp;<sp/>expression)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>pos<sp/>=<sp/>line.find(phrase_before_value);<sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos!=std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression<sp/>=<sp/>line.substr(pos+phrase_before_value.size(),<sp/>line.find(phrase_after_value,<sp/>pos+phrase_before_value.size())<sp/>-<sp/>(pos+phrase_before_value.size()));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>Return<sp/>a<sp/>double<sp/>corresponding<sp/>to<sp/>the<sp/>mass<sp/>in<sp/>g<sp/>found<sp/>in<sp/>the<sp/>current<sp/>line<sp/>of<sp/>the<sp/>text<sp/>file</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>current<sp/>line</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>@rg2:<sp/>phrase<sp/>to<sp/>be<sp/>found<sp/>located<sp/>just<sp/>before<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@rg3:<sp/>value<sp/>in<sp/>grams</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>find_mass_in_g(std::string<sp/>line,<sp/>std::string<sp/>phrase_before_value,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>mass)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str_mass<sp/>=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>find_expression_betweenPhrases(line,<sp/>phrase_before_value,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g<sp/>and<sp/>volume&quot;</highlight><highlight class="normal">,<sp/>str_mass);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str_mass<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>mass<sp/>=<sp/>std::stod(str_mass);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>Return<sp/>a<sp/>double<sp/>corresponding<sp/>to<sp/>the<sp/>time<sp/>in<sp/>s<sp/>found<sp/>in<sp/>the<sp/>current<sp/>line<sp/>of<sp/>the<sp/>text<sp/>file</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>current<sp/>line</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>@rg2:<sp/>phrase<sp/>to<sp/>be<sp/>found<sp/>located<sp/>just<sp/>before<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>@rg3:<sp/>value<sp/>in<sp/>second</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>find_time_in_s(std::string<sp/>line,<sp/>std::string<sp/>phrase_before_value,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>time)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str_time<sp/>=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>find_expression_betweenPhrases(line,<sp/>phrase_before_value,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/>str_time);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str_time<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>time<sp/>=<sp/>std::stod(str_time);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>Read<sp/>every<sp/>lines<sp/>of<sp/>the<sp/>text<sp/>file</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>stream<sp/>of<sp/>the<sp/>text<sp/>files</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>@rg2:<sp/>vector<sp/>with<sp/>timestamp<sp/>of<sp/>every<sp/>runs</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>read_every_lines(std::ifstream&amp;<sp/>input_file,<sp/>std::vector&lt;double&gt;&amp;<sp/>vtotal_Run_time)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_Run_duration<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_Run_time<sp/>=<sp/>-10;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>material_name<sp/>=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>current<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>double&gt;<sp/>map_total_mass;<sp/></highlight><highlight class="comment">//<sp/>Total<sp/>mass<sp/>of<sp/>every<sp/>materials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>isotope_mass,<sp/>mass_fraction;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>TTree*<sp/>IZA_mass_tree<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(std::getline(input_file,<sp/>line))<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>duration<sp/>of<sp/>the<sp/>current<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_time_in_s(line,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>irradiation<sp/>period:&quot;</highlight><highlight class="normal">,<sp/>current_Run_duration);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>total<sp/>time<sp/>since<sp/>the<sp/>first<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_time_in_s(line,<sp/></highlight><highlight class="stringliteral">&quot;Current<sp/>irradiation<sp/>time:&quot;</highlight><highlight class="normal">,<sp/>total_Run_time);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>material<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newMaterial<sp/>=<sp/>find_expression_betweenPhrases(line,</highlight><highlight class="stringliteral">&quot;Material:<sp/>&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;<sp/>appearing<sp/>in&quot;</highlight><highlight class="normal">,<sp/>material_name);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>total<sp/>mass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mass_in_g(line,<sp/></highlight><highlight class="stringliteral">&quot;with<sp/>mass:<sp/>&quot;</highlight><highlight class="normal">,<sp/>mass);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map_total_mass[material_name]<sp/>+=<sp/>mass;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>new<sp/>histo/ntuple<sp/>if<sp/>new<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newMaterial)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IZA_mass_tree)<sp/>IZA_mass_tree-&gt;Write();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tree_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;IZA_mass_&quot;</highlight><highlight class="normal"><sp/>+<sp/>material_name.substr(0,material_name.find(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>material_name.substr(material_name.find(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">)+1,material_name.size());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IZA_mass_tree<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TTree(tree_name.c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IZA_mass_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;IZA&quot;</highlight><highlight class="normal">,<sp/>&amp;IZA);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IZA_mass_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;fraction&quot;</highlight><highlight class="normal">,<sp/>&amp;mass_fraction);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IZA_mass_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/>&amp;isotope_mass);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>ntuple<sp/>with<sp/>IZA<sp/>and<sp/>mass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str_IZA<sp/>=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_expression_betweenPhrases(line,</highlight><highlight class="stringliteral">&quot;-&gt;AddElement(&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">,<sp/>str_IZA);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str_mass_fraction=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_expression_betweenPhrases(line,</highlight><highlight class="stringliteral">&quot;-&gt;AddElement(&quot;</highlight><highlight class="normal">+<sp/>str_IZA<sp/>+</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;);&quot;</highlight><highlight class="normal">,<sp/>str_mass_fraction);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(str_IZA!=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>str_mass_fraction!=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IZA<sp/>=<sp/>std::stoi(str_IZA);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass_fraction<sp/>=<sp/>std::stod(str_mass_fraction);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isotope_mass<sp/>=<sp/>std::stod(str_mass_fraction)<sp/>*<sp/>map_total_mass[material_name];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IZA_mass_tree-&gt;Fill();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IZA_mass_tree)<sp/>IZA_mass_tree-&gt;Write();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>total_Run_time<sp/>!=<sp/>-10<sp/>&amp;&amp;<sp/>(vtotal_Run_time.size()==0<sp/>||<sp/>vtotal_Run_time.back()<sp/>!=<sp/>total_Run_time<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtotal_Run_time.push_back(total_Run_time/3600.);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>Read<sp/>every<sp/>text<sp/>files<sp/>on<sp/>the<sp/>current<sp/>directory<sp/>with<sp/>the<sp/>following<sp/>name<sp/>fileNamePattern<sp/>+<sp/>FileName_index</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>name<sp/>of<sp/>the<sp/>text<sp/>files</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@rg2:<sp/>starting<sp/>index<sp/>to<sp/>read<sp/>the<sp/>text<sp/>files</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@rg3:<sp/>vector<sp/>with<sp/>timestamp<sp/>of<sp/>every<sp/>runs</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>read_every_textfiles(std::string<sp/>fileNamePattern,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>FileName_index,<sp/>std::vector&lt;double&gt;&amp;<sp/>vtotal_Run_time)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>reading<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>Evolved_Materials_File;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>Evolved_Materials_File.open(fileNamePattern<sp/>+<sp/>std::to_string(FileName_index));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>every<sp/>text<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(Evolved_Materials_File.is_open())<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>every<sp/>lines<sp/>of<sp/>the<sp/>text<sp/>file<sp/>and<sp/>fill<sp/>histograms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_every_lines(Evolved_Materials_File,<sp/>vtotal_Run_time);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>text<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Evolved_Materials_File.close();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increase<sp/>FileName_index<sp/>to<sp/>search<sp/>new<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++FileName_index;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Evolved_Materials_File.open(fileNamePattern<sp/>+<sp/>std::to_string(FileName_index));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>--FileName_index;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>isotopes<sp/>over<sp/>the<sp/>whole<sp/>simulation</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>pattern<sp/>of<sp/>the<sp/>tree<sp/>name</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>@rg2:<sp/>total<sp/>number<sp/>of<sp/>Runs</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetMax_entries(std::string<sp/>name_pattern,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RunNumber)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nentries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;<sp/>RunNumber+1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>name_pattern<sp/>+<sp/>std::to_string(i);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TTree*<sp/>tree_histo<sp/>=<sp/>(TTree*)<sp/>gDirectory-&gt;GetObjectChecked((name.c_str()),<sp/></highlight><highlight class="stringliteral">&quot;TTree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tree_histo<sp/>&amp;&amp;<sp/>nentries&lt;tree_histo-&gt;GetEntries())<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nentries<sp/>=<sp/>(int)tree_histo-&gt;GetEntries();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nentries;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>Define<sp/>drawing<sp/>style</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetStyle()<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>gErrorIgnoreLevel<sp/>=<sp/>kWarning;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetOptStat(0);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetStatX(1);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetStatY(1);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetStatH(0.22);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetStatW(0.26);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetLabelSize(0.04,</highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetLabelSize(0.04,</highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>gStyle-&gt;SetLabelSize(0.05,&quot;Z&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetTitleXSize(0.05);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetTitleYSize(0.05);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetTitleXOffset(0.95);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetTitleYOffset(1.20);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>gStyle-&gt;SetTitleZOffset(1.30);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadRightMargin<sp/>(0.17);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadLeftMargin<sp/><sp/>(0.12);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadBottomMargin(0.1);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadTopMargin<sp/><sp/><sp/>(0.01);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetCanvasDefH(900);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetCanvasDefW(1000);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadGridX(kTRUE);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>gStyle-&gt;SetPadGridY(kTRUE);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>gStyle-&gt;SetPalette(105);<sp/>//<sp/>kThermometer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>gStyle-&gt;SetPalette(55);<sp/>//<sp/>kRainBow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>Find<sp/>the<sp/>tree<sp/>corresponding<sp/>to<sp/>a<sp/>given<sp/>material<sp/>and<sp/>fill<sp/>3<sp/>types<sp/>of<sp/>histograms</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>total<sp/>number<sp/>of<sp/>Runs</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@rg2:<sp/>vector<sp/>with<sp/>timestamp<sp/>of<sp/>every<sp/>runs</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@rg3:<sp/>name<sp/>of<sp/>the<sp/>material</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@rg4:<sp/>threshold<sp/>to<sp/>draw<sp/>the<sp/>mass<sp/>fraction<sp/>histogram</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@rg5:<sp/>2D<sp/>histogram<sp/>representing<sp/>the<sp/>mass<sp/>of<sp/>each<sp/>isotope<sp/>with<sp/>A<sp/>=<sp/>f(Z)<sp/>in<sp/>the<sp/>last<sp/>run</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>@rg6:<sp/>vector<sp/>of<sp/>histograms<sp/>representing<sp/>time<sp/>evolution<sp/>of<sp/>the<sp/>mass<sp/>fraction<sp/>for<sp/>each<sp/>isotope<sp/>with<sp/>fraction<sp/>&lt;<sp/>threshold</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@rg7:<sp/>vector<sp/>of<sp/>histograms<sp/>representing<sp/>time<sp/>evolution<sp/>of<sp/>the<sp/>isotope<sp/>mass<sp/><sp/>for<sp/>each<sp/>isotope</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FillHistograms(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RunNumber,<sp/>std::vector&lt;double&gt;<sp/>vtotal_Run_time,<sp/>std::string<sp/>material_name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>limit,<sp/>TH2D*<sp/>AZ_mass_histo,<sp/>std::map&lt;int,<sp/>TH1D*&gt;&amp;<sp/>map_fractionHisto,<sp/>std::map&lt;int,<sp/>TH1D*&gt;&amp;<sp/>map_massHisto)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IZA;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>isotope_mass,<sp/>mass_fraction;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>binningRun<sp/>=<sp/>&amp;vtotal_Run_time[0];</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;<sp/>RunNumber+1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;IZA_mass_&quot;</highlight><highlight class="normal"><sp/>+<sp/>material_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TTree*<sp/>tree_histo<sp/>=<sp/>(TTree*)<sp/>gDirectory-&gt;GetObjectChecked((name.c_str()),<sp/></highlight><highlight class="stringliteral">&quot;TTree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_fraction<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tree_histo)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree_histo-&gt;SetBranchAddress(</highlight><highlight class="stringliteral">&quot;IZA&quot;</highlight><highlight class="normal">,&amp;IZA);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree_histo-&gt;SetBranchAddress(</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,&amp;isotope_mass);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree_histo-&gt;SetBranchAddress(</highlight><highlight class="stringliteral">&quot;fraction&quot;</highlight><highlight class="normal">,&amp;mass_fraction);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nentries<sp/>=<sp/>(int)tree_histo-&gt;GetEntries();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;nentries;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree_histo-&gt;GetEntry(k);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_fractionHisto.find(IZA)<sp/>==<sp/>map_fractionHisto.end())<sp/>{<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map_fractionHisto[IZA]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D((std::to_string(IZA)).c_str(),(std::to_string(IZA)).c_str(),RunNumber,<sp/>1,<sp/>RunNumber+1);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map_fractionHisto[IZA]-&gt;SetBins(RunNumber,<sp/>binningRun);<sp/></highlight><highlight class="comment">//<sp/>time<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mass_fraction&lt;limit)<sp/>{map_fractionHisto[IZA]-&gt;Fill(vtotal_Run_time[i-1],<sp/>mass_fraction);}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_fraction<sp/>-=<sp/>mass_fraction;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_massHisto.find(IZA)<sp/>==<sp/>map_massHisto.end())<sp/>{<sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map_massHisto[IZA]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH1D((std::to_string(IZA)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_m&quot;</highlight><highlight class="normal">).c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,RunNumber,<sp/>1,<sp/>RunNumber+1);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map_massHisto[IZA]-&gt;SetBins(RunNumber,<sp/>binningRun);<sp/></highlight><highlight class="comment">//<sp/>time<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map_massHisto[IZA]-&gt;Fill(vtotal_Run_time[i-1],<sp/>isotope_mass);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==RunNumber)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Last<sp/>Run<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Z<sp/>=<sp/>IZA/10000;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>IZA/10<sp/>-<sp/>Z*1000;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AZ_mass_histo-&gt;Fill(Z,A,isotope_mass);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_fraction<sp/>!=<sp/>0)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>Mass<sp/>fraction<sp/>&lt;<sp/>1<sp/>(Missing<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>total_fraction<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>in<sp/>Run<sp/>number<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>std::endl;<sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>Draw<sp/>and<sp/>save<sp/>the<sp/>histogram<sp/>representing<sp/>time<sp/>evolution<sp/>of<sp/>the<sp/>isotope<sp/>mass</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>vector<sp/>of<sp/>histograms<sp/>representing<sp/>time<sp/>evolution<sp/>of<sp/>the<sp/>isotope<sp/>mass<sp/>for<sp/>each<sp/>isotope</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>@rg2:<sp/>Name<sp/>of<sp/>the<sp/>material<sp/>to<sp/>be<sp/>plotted<sp/>(Initial<sp/>name<sp/>in<sp/>the<sp/>GEANT4<sp/>geometry)</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawMassEvolution(std::map&lt;int,<sp/>TH1D*&gt;&amp;<sp/>map_massHisto,<sp/>std::string<sp/>Initial_material_Name)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lowerYlimit<sp/>=<sp/>1e-5;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>legend<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TLegend(0.85,0.01,0.99,0.99);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>legend-&gt;SetHeader(</highlight><highlight class="stringliteral">&quot;Isotopes&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>option<sp/>&quot;C&quot;<sp/>allows<sp/>to<sp/>center<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maximum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[IZA,<sp/>histo1D]<sp/>:<sp/>map_massHisto)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>maximum<sp/>&lt;<sp/>histo1D-&gt;GetBinContent(histo1D-&gt;GetMaximumBin()))</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maximum<sp/>=<sp/>histo1D-&gt;GetBinContent(histo1D-&gt;GetMaximumBin());</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>TCanvas*<sp/>canvas_mass<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;mass_evolution&quot;</highlight><highlight class="normal">,Initial_material_Name.c_str());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;int,<sp/>TH1D*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>map_massHisto.begin();<sp/>it<sp/>!=<sp/>map_massHisto.end();<sp/>it++)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it<sp/>==<sp/>map_massHisto.begin())<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second-&gt;GetYaxis()-&gt;SetRangeUser(lowerYlimit,1.05*maximum);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second-&gt;Draw(</highlight><highlight class="stringliteral">&quot;hist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Time<sp/>[hours]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Mass<sp/>[g]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>legend-&gt;AddEntry(it-&gt;second,it-&gt;second-&gt;GetName(),</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second-&gt;GetBinContent(it-&gt;second-&gt;GetMaximumBin())<sp/>&gt;<sp/>lowerYlimit)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second-&gt;Draw(</highlight><highlight class="stringliteral">&quot;hist<sp/>same&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>legend-&gt;AddEntry(it-&gt;second,it-&gt;second-&gt;GetName(),</highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second-&gt;SetLineColor(color);<sp/></highlight><highlight class="comment">//<sp/>color<sp/>by<sp/>position<sp/>in<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second-&gt;SetLineWidth(2);<sp/></highlight><highlight class="comment">//<sp/>color<sp/>by<sp/>position<sp/>in<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>+=<sp/>10;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(color<sp/>&gt;<sp/>49)<sp/>{<sp/>color<sp/>-=<sp/>49;}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(color<sp/>==<sp/>0<sp/>||<sp/>color<sp/>==<sp/>10)<sp/>{<sp/>color<sp/>=<sp/>2;}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>legend-&gt;Draw();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas_mass-&gt;SetLogy();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas_mass-&gt;Write();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas_mass-&gt;SaveAs((</highlight><highlight class="stringliteral">&quot;mass_evolution_&quot;</highlight><highlight class="normal"><sp/>+<sp/>Initial_material_Name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>Draw<sp/>and<sp/>save<sp/>the<sp/>histogram<sp/>representing<sp/>time<sp/>evolution<sp/>of<sp/>the<sp/>mass<sp/>fraction<sp/>with<sp/>fraction<sp/>&lt;<sp/>threshold</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>vector<sp/>of<sp/>histograms<sp/>representing<sp/>time<sp/>evolution<sp/>of<sp/>the<sp/>mass<sp/>fraction<sp/>for<sp/>each<sp/>isotope<sp/>with<sp/>fraction<sp/>&lt;<sp/>threshold</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@rg2:<sp/>Name<sp/>of<sp/>the<sp/>material<sp/>to<sp/>be<sp/>plotted<sp/>(Initial<sp/>name<sp/>in<sp/>the<sp/>GEANT4<sp/>geometry)</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawMassFractionEvolution(std::map&lt;int,<sp/>TH1D*&gt;&amp;<sp/>map_fractionHisto,<sp/>std::string<sp/>Initial_material_Name)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>legend<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TLegend(0.85,0.01,0.99,0.99);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>legend-&gt;SetHeader(</highlight><highlight class="stringliteral">&quot;Isotopes&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>option<sp/>&quot;C&quot;<sp/>allows<sp/>to<sp/>center<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>THStack*<sp/>hs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>THStack((</highlight><highlight class="stringliteral">&quot;Stack_&quot;</highlight><highlight class="normal"><sp/>+<sp/>Initial_material_Name).c_str(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[IZA,<sp/>histo1D]<sp/>:<sp/>map_fractionHisto)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histo1D-&gt;SetFillColor(color);<sp/></highlight><highlight class="comment">//<sp/>color<sp/>by<sp/>position<sp/>in<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hs-&gt;Add(histo1D);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>legend-&gt;AddEntry(histo1D,histo1D-&gt;GetName(),</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>+=<sp/>10;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(color<sp/>&gt;<sp/>49)<sp/>{<sp/>color<sp/>-=<sp/>49;}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(color<sp/>==<sp/>0<sp/>||<sp/>color<sp/>==<sp/>10)<sp/>{<sp/>color<sp/>=<sp/>2;}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>TCanvas*<sp/>canvas_fraction<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(</highlight><highlight class="stringliteral">&quot;mass_fraction_histogram&quot;</highlight><highlight class="normal">,Initial_material_Name.c_str());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>hs-&gt;Write();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>hs-&gt;Draw(</highlight><highlight class="stringliteral">&quot;hist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>hs-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Time<sp/>[hours]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>hs-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Mass<sp/>fraction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>legend-&gt;Draw();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas_fraction-&gt;Write();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas_fraction-&gt;SaveAs((</highlight><highlight class="stringliteral">&quot;mass_fraction_&quot;</highlight><highlight class="normal"><sp/>+<sp/>Initial_material_Name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/>Draw<sp/>and<sp/>save<sp/>the<sp/>histogram<sp/>representing<sp/>the<sp/>mass<sp/>of<sp/>each<sp/>isotope<sp/>with<sp/>A<sp/>=<sp/>f(Z)<sp/>in<sp/>the<sp/>last<sp/>run</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>2D<sp/>histogram<sp/>representing<sp/>the<sp/>mass<sp/>of<sp/>each<sp/>isotope<sp/>with<sp/>A<sp/>=<sp/>f(Z)<sp/>in<sp/>the<sp/>last<sp/>run</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawLastRunComposition(TH2D*<sp/>AZ_mass_histo)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>TCanvas*<sp/>canvas<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TCanvas(AZ_mass_histo-&gt;GetName(),</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>AZ_mass_histo-&gt;Draw(</highlight><highlight class="stringliteral">&quot;colz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>AZ_mass_histo-&gt;GetXaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>AZ_mass_histo-&gt;GetYaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>AZ_mass_histo-&gt;GetZaxis()-&gt;SetTitle(</highlight><highlight class="stringliteral">&quot;Mass<sp/>[g]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>AZ_mass_histo-&gt;Write();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>final_inventory_file(</highlight><highlight class="stringliteral">&quot;final_inventory.txt&quot;</highlight><highlight class="normal">,ios::trunc);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>final_inventory_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Z\tA\tmass<sp/>[g]\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Z=1;<sp/>Z&lt;AZ_mass_histo-&gt;GetNbinsX();<sp/>++Z)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>A=1;<sp/>A&lt;AZ_mass_histo-&gt;GetNbinsY();<sp/>++A)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>AZ_mass_histo-&gt;GetBinContent(AZ_mass_histo-&gt;GetBin(Z,A))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>final_inventory_file<sp/>&lt;&lt;<sp/>Z<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>AZ_mass_histo-&gt;GetBinContent(AZ_mass_histo-&gt;GetBin(Z,A))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>final_inventory_file.close();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>canvas-&gt;SaveAs((std::string(AZ_mass_histo-&gt;GetName())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*<sp/>Main</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/>Open<sp/>a<sp/>ROOT<sp/>file</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>Read<sp/>every<sp/>text<sp/>files<sp/>of<sp/>burnup<sp/>simulation</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>Fill<sp/>and<sp/>draw<sp/>histograms</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/>@rg1:<sp/>Threshold<sp/>to<sp/>draw<sp/>isotope<sp/>fraction<sp/>evolution<sp/>only<sp/>with<sp/>isotope<sp/>fractions<sp/>lower<sp/>than<sp/>value</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/>@rg2:<sp/>Name<sp/>of<sp/>the<sp/>material<sp/>to<sp/>be<sp/>plotted<sp/>(Initial<sp/>name<sp/>in<sp/>the<sp/>GEANT4<sp/>geometry).<sp/>Value<sp/>must<sp/>be<sp/>given<sp/>between<sp/>quotes.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Graphes_burnup(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Fraction_Threshold,<sp/>std::string<sp/>Initial_material_Name)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>drawing<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>SetStyle();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pattern<sp/>of<sp/>the<sp/>text<sp/>file<sp/>containing<sp/>burnup<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>file_name_pattern<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Evolved_Materials_Step&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Creation<sp/>of<sp/>ROOT<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>*ROOT_file<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TFile(<sp/></highlight><highlight class="stringliteral">&quot;burnup.root&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;RECREATE&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>runs,<sp/>starting<sp/>at<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RunNumber<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>of<sp/>time<sp/>stamp<sp/>for<sp/>each<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vtotal_Run_time(1,0);<sp/></highlight><highlight class="comment">//<sp/>in<sp/>hours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading<sp/>of<sp/>every<sp/>burnup<sp/>text<sp/>files<sp/>and<sp/>fill<sp/>trees<sp/>containing<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>read_every_textfiles(file_name_pattern,<sp/>RunNumber,<sp/>vtotal_Run_time);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>histo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>TH2D*<sp/>AZ_mass_histo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH2D((</highlight><highlight class="stringliteral">&quot;AZ_mass_&quot;</highlight><highlight class="normal"><sp/>+<sp/>Initial_material_Name).c_str(),Initial_material_Name.c_str(),<sp/>122,1,123,292,1,293);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>TH1D*&gt;<sp/>map_fractionHisto;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>TH1D*&gt;<sp/>map_massHisto;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>FillHistograms(RunNumber,<sp/>vtotal_Run_time,<sp/>&quot;fuel_ThPuO2&quot;,<sp/>0.12,<sp/>AZ_mass_histo,<sp/>map_fractionHisto,<sp/>map_massHisto);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>FillHistograms(RunNumber,<sp/>vtotal_Run_time,<sp/>Initial_material_Name,<sp/>Fraction_Threshold,<sp/>AZ_mass_histo,<sp/>map_fractionHisto,<sp/>map_massHisto);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>histo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawMassEvolution(map_massHisto,<sp/>Initial_material_Name);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawMassFractionEvolution(map_fractionHisto,<sp/>Initial_material_Name);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawLastRunComposition(AZ_mass_histo);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>ROOT<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ROOT_file-&gt;Close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/G4-NeutronTransport/Graphes_burnup.C"/>
  </compounddef>
</doxygen>
