<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_benchmark-2_2src_2_stepping_action_8cc" kind="file" language="C++">
    <compoundname>SteppingAction.cc</compoundname>
    <includes local="yes">SteppingAction.hh</includes>
    <includes local="yes">DetectorConstruction.hh</includes>
    <includes local="yes">PrimaryGeneratorAction.hh</includes>
    <includes refid="_t_m_x_bateman_decay_8hh" local="yes">TMXBatemanDecay.hh</includes>
    <includes refid="_t_m_x_option_8hh" local="yes">TMXOption.hh</includes>
    <includes local="yes">TMXAbstractTargetAssembly.hh</includes>
    <includes local="yes">TMXAbstractBeamPipe.hh</includes>
    <includes local="yes">TMXBurnup.hh</includes>
    <includes local="yes">GeomEAP80.hh</includes>
    <includes local="yes">GeomSVBR_AKME.hh</includes>
    <includes local="yes">Run.hh</includes>
    <includes local="yes">TMXkeff.hh</includes>
    <includes local="yes">TMXStopTheRun.hh</includes>
    <includes local="yes">G4SteppingManager.hh</includes>
    <includes local="yes">G4Step.hh</includes>
    <includes local="yes">G4StepPoint.hh</includes>
    <includes local="yes">G4TrackStatus.hh</includes>
    <includes local="yes">G4VPhysicalVolume.hh</includes>
    <includes local="yes">G4ParticleDefinition.hh</includes>
    <includes local="yes">G4ParticleTypes.hh</includes>
    <includes local="yes">G4RunManager.hh</includes>
    <includes local="yes">G4SystemOfUnits.hh</includes>
    <includes local="yes">G4HadronicProcessType.hh</includes>
    <includes local="yes">G4HadronicProcess.hh</includes>
    <includes local="yes">G4VProcess.hh</includes>
    <includes local="yes">G4PhysicalConstants.hh</includes>
    <includes local="yes">G4ProcessVector.hh</includes>
    <includes local="yes">G4PhysicalVolumeStore.hh</includes>
    <includes local="yes">G4SolidStore.hh</includes>
    <includes local="yes">G4LogicalVolumeStore.hh</includes>
    <includes local="yes">G4Ions.hh</includes>
    <includes local="yes">G4ParticleHPInelastic.hh</includes>
    <includes local="no">map</includes>
    <includes local="no">unordered_map</includes>
    <includes local="yes">G4AutoLock.hh</includes>
    <includes local="yes">G4ParticleHPThermalBoost.hh</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-2/src/SteppingAction.cc</label>
        <link refid="_benchmark-2_2src_2_stepping_action_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>TMXBatemanDecay.hh</label>
        <link refid="_t_m_x_bateman_decay_8hh_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>TMXElements.hh</label>
        <link refid="_t_m_x_elements_2include_2_t_m_x_elements_8hh_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>TMXOption.hh</label>
        <link refid="_t_m_x_option_8hh_source"/>
      </node>
      <node id="3">
        <label>DetectorConstruction.hh</label>
      </node>
      <node id="46">
        <label>G4AutoLock.hh</label>
      </node>
      <node id="37">
        <label>G4HadronicProcess.hh</label>
      </node>
      <node id="36">
        <label>G4HadronicProcessType.hh</label>
      </node>
      <node id="44">
        <label>G4Ions.hh</label>
      </node>
      <node id="43">
        <label>G4LogicalVolumeStore.hh</label>
      </node>
      <node id="32">
        <label>G4ParticleDefinition.hh</label>
      </node>
      <node id="45">
        <label>G4ParticleHPInelastic.hh</label>
      </node>
      <node id="47">
        <label>G4ParticleHPThermalBoost.hh</label>
      </node>
      <node id="33">
        <label>G4ParticleTypes.hh</label>
      </node>
      <node id="39">
        <label>G4PhysicalConstants.hh</label>
      </node>
      <node id="41">
        <label>G4PhysicalVolumeStore.hh</label>
      </node>
      <node id="40">
        <label>G4ProcessVector.hh</label>
      </node>
      <node id="34">
        <label>G4RunManager.hh</label>
      </node>
      <node id="42">
        <label>G4SolidStore.hh</label>
      </node>
      <node id="28">
        <label>G4Step.hh</label>
      </node>
      <node id="29">
        <label>G4StepPoint.hh</label>
      </node>
      <node id="27">
        <label>G4SteppingManager.hh</label>
      </node>
      <node id="35">
        <label>G4SystemOfUnits.hh</label>
      </node>
      <node id="30">
        <label>G4TrackStatus.hh</label>
      </node>
      <node id="31">
        <label>G4VPhysicalVolume.hh</label>
      </node>
      <node id="38">
        <label>G4VProcess.hh</label>
      </node>
      <node id="22">
        <label>GeomEAP80.hh</label>
      </node>
      <node id="23">
        <label>GeomSVBR_AKME.hh</label>
      </node>
      <node id="4">
        <label>PrimaryGeneratorAction.hh</label>
      </node>
      <node id="24">
        <label>Run.hh</label>
      </node>
      <node id="2">
        <label>SteppingAction.hh</label>
      </node>
      <node id="20">
        <label>TMXAbstractBeamPipe.hh</label>
      </node>
      <node id="19">
        <label>TMXAbstractTargetAssembly.hh</label>
      </node>
      <node id="21">
        <label>TMXBurnup.hh</label>
      </node>
      <node id="26">
        <label>TMXStopTheRun.hh</label>
      </node>
      <node id="25">
        <label>TMXkeff.hh</label>
      </node>
      <node id="12">
        <label>cctype</label>
      </node>
      <node id="13">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="9">
        <label>map</label>
      </node>
      <node id="16">
        <label>numeric</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="14">
        <label>unordered_map</label>
      </node>
      <node id="17">
        <label>utility</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>********************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>License<sp/>and<sp/>Disclaimer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>The<sp/><sp/>Geant4<sp/>software<sp/><sp/>is<sp/><sp/>copyright<sp/>of<sp/>the<sp/>Copyright<sp/>Holders<sp/><sp/>of<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>the<sp/>Geant4<sp/>Collaboration.<sp/><sp/>It<sp/>is<sp/>provided<sp/><sp/>under<sp/><sp/>the<sp/>terms<sp/><sp/>and<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>conditions<sp/>of<sp/>the<sp/>Geant4<sp/>Software<sp/>License,<sp/><sp/>included<sp/>in<sp/>the<sp/>file<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>LICENSE<sp/>and<sp/>available<sp/>at<sp/><sp/>http://cern.ch/geant4/license<sp/>.<sp/><sp/>These<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>include<sp/>a<sp/>list<sp/>of<sp/>copyright<sp/>holders.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Neither<sp/>the<sp/>authors<sp/>of<sp/>this<sp/>software<sp/>system,<sp/>nor<sp/>their<sp/>employing<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>institutes,nor<sp/>the<sp/>agencies<sp/>providing<sp/>financial<sp/>support<sp/>for<sp/>this<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>work<sp/><sp/>make<sp/><sp/>any<sp/>representation<sp/>or<sp/><sp/>warranty,<sp/>express<sp/>or<sp/>implied,<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>regarding<sp/><sp/>this<sp/><sp/>software<sp/>system<sp/>or<sp/>assume<sp/>any<sp/>liability<sp/>for<sp/>its<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>use.<sp/><sp/>Please<sp/>see<sp/>the<sp/>license<sp/>in<sp/>the<sp/>file<sp/><sp/>LICENSE<sp/><sp/>and<sp/>URL<sp/>above<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>for<sp/>the<sp/>full<sp/>disclaimer<sp/>and<sp/>the<sp/>limitation<sp/>of<sp/>liability.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>This<sp/><sp/>code<sp/><sp/>implementation<sp/>is<sp/>the<sp/>result<sp/>of<sp/><sp/>the<sp/><sp/>scientific<sp/>and<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>technical<sp/>work<sp/>of<sp/>the<sp/>GEANT4<sp/>collaboration.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>By<sp/>using,<sp/><sp/>copying,<sp/><sp/>modifying<sp/>or<sp/><sp/>distributing<sp/>the<sp/>software<sp/>(or<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>any<sp/>work<sp/>based<sp/><sp/>on<sp/>the<sp/>software)<sp/><sp/>you<sp/><sp/>agree<sp/><sp/>to<sp/>acknowledge<sp/>its<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>use<sp/><sp/>in<sp/><sp/>resulting<sp/><sp/>scientific<sp/><sp/>publications,<sp/><sp/>and<sp/>indicate<sp/>your<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>acceptance<sp/>of<sp/>all<sp/>terms<sp/>of<sp/>the<sp/>Geant4<sp/>Software<sp/>license.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>********************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="30"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SteppingAction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Donovan<sp/>Maire,<sp/>Transmutex,<sp/>18/10/2019</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2020<sp/>Transmutex<sp/>SA<sp/>--<sp/>all<sp/>rights<sp/>reserved</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TMX<sp/>Class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SteppingAction.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DetectorConstruction.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PrimaryGeneratorAction.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXBatemanDecay.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXOption.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXAbstractTargetAssembly.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXAbstractBeamPipe.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXBurnup.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GeomEAP80.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GeomSVBR_AKME.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Run.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXkeff.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMXStopTheRun.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GEANT4<sp/>libraries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4SteppingManager.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4Step.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4StepPoint.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4TrackStatus.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4VPhysicalVolume.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4ParticleDefinition.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4ParticleTypes.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>G4MULTITHREADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&quot;G4MTRunManager.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&quot;G4RunManager.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4SystemOfUnits.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4HadronicProcessType.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4HadronicProcess.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4VProcess.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4PhysicalConstants.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4ProcessVector.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4PhysicalVolumeStore.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4SolidStore.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4LogicalVolumeStore.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4Ions.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;G4NeutronInelasticProcess.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4ParticleHPInelastic.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>librairies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::log10;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::sqrt;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::floor;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4AutoLock.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{<sp/>G4Mutex<sp/>myHEPPrimGenMutex<sp/>=<sp/>G4MUTEX_INITIALIZER;<sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">SteppingAction::SteppingAction(<ref refid="class_event_action" kindref="compound">EventAction</ref>*<sp/>eventAction,<sp/><ref refid="class_run_action" kindref="compound">RunAction</ref>*<sp/>runAction,<sp/><ref refid="class_t_m_x_input_parameters" kindref="compound">TMXInputParameters</ref>&amp;<sp/>parameter)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">:<sp/>G4UserSteppingAction()</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>Initialize(eventAction,<sp/>runAction,<sp/>parameter);<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">SteppingAction::~SteppingAction()</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fGenerationCounter;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>fEventAction<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::UserSteppingAction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Added<sp/>on<sp/>14/04/2021:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3rd<sp/>modif:<sp/>no<sp/>effect<sp/>on<sp/>keff<sp/>-&gt;<sp/>checked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetTrack()-&gt;GetParticleDefinition()<sp/>==<sp/>G4Neutron::NeutronDefinition()</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetCurrentStepNumber()<sp/>==<sp/>1</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetCreatorProcess()</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetCreatorProcess()-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>p-&gt;int_Option<sp/>==<sp/>20)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetTrack()-&gt;SetTrackStatus(fKillTrackAndSecondaries);<sp/></highlight><highlight class="comment">//<sp/>secondary<sp/>neutron<sp/>from<sp/>fission<sp/>are<sp/>killed<sp/>at<sp/>their<sp/>first<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>of<sp/>step&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>TMXStopTheRun::getInstance()-&gt;UserSteppingAction();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(theStep-&gt;GetTrack()-&gt;GetParticleDefinition()-&gt;GetParticleName()<sp/>!=<sp/>&quot;proton&quot;)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>theStep-&gt;GetTrack()-&gt;SetTrackStatus(fStopAndKill);</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>new<sp/>run<sp/>-&gt;<sp/>Initialization<sp/>of<sp/>stepping<sp/>action</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fRunNumber<sp/>!=<sp/>fEventAction-&gt;GetRunNumber())<sp/>{<sp/>Initialize(fEventAction,<sp/>fRunAction,<sp/>*p);<sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>theStep-&gt;GetTrack()-&gt;SetTrackStatus(fKillTrackAndSecondaries);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>hadron<sp/>processes<sp/>are<sp/>not<sp/>defined,<sp/>then<sp/>we<sp/>search<sp/>for<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>GetNeutronHadronicProcesses&quot;<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fProcessElas)<sp/><sp/>{GetNeutronHadronicProcesses();}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>G4int<sp/>nNeutrons<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>secondary<sp/>neutrons<sp/>from<sp/>inelastic<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>GetPhysicalVolumeNumber&quot;<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>GetPhysicalVolumeNumber(theStep);<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>physical<sp/>volume<sp/>ID<sp/>of<sp/>preStep,<sp/>postStep<sp/>and<sp/>the<sp/>one<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>a<sp/>better<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FillNtupleDepositedPower(theStep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>General<sp/>Scoring<sp/>of<sp/>Flux<sp/>Spectrum<sp/>for<sp/>any<sp/>particle<sp/>define<sp/>by<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>fRunAction-&gt;m_scoringSurfaceCurrentSpectrum-&gt;score(theStep);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>fRunAction-&gt;m_scoringSurfaceFluenceSpectrum-&gt;score(theStep);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>fRunAction-&gt;m_scoringVolumeFluenceSpectrum-&gt;score(theStep);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>fRunAction-&gt;m_scoringPowerDensityMap-&gt;score(theStep);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;theStep-&gt;GetPreStepPoint()-&gt;GetPhysicalVolume()-&gt;GetName()&lt;&lt;&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;&lt;theStep-&gt;GetTrack()-&gt;GetParticleDefinition()-&gt;GetParticleName()&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TFTEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if(theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume())<sp/>{<sp/>//<sp/>Not<sp/>necessary<sp/>anymore<sp/>??<sp/>GetProcessName<sp/>has<sp/>been<sp/>protected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(<sp/>theStep-&gt;GetTrack()-&gt;GetDynamicParticle()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>!=<sp/><sp/>&quot;neutron&quot;<sp/>&amp;&amp;<sp/>p-&gt;int_Option<sp/>==<sp/>4)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetTrack()-&gt;SetTrackStatus(fKillTrackAndSecondaries);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>if(theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume())<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/>if(theStep-&gt;GetPreStepPoint()-&gt;GetPhysicalVolume()-&gt;GetName()<sp/>==<sp/>&quot;pTarget&quot;</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetName()<sp/>==<sp/>&quot;pCore&quot;<sp/>)</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/>&quot;e-&quot;<sp/>||<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/>&quot;gamma&quot;)</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;</highlight></codeline>
<codeline lineno="164"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;theStep-&gt;GetPreStepPoint()-&gt;GetPhysicalVolume()-&gt;GetName()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;</highlight></codeline>
<codeline lineno="165"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetName()&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetTrack()-&gt;SetTrackStatus(fKillTrackAndSecondaries);</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="comment">}</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/>if(fEventAction-&gt;GetNevt()<sp/>&lt;<sp/>131500)</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetTrack()-&gt;SetTrackStatus(fKillTrackAndSecondaries);</highlight></codeline>
<codeline lineno="172"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>if(theStep-&gt;GetPreStepPoint<sp/>()-&gt;GetPhysicalVolume()-&gt;GetName()<sp/>==<sp/>&quot;Target&quot;<sp/>)</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/>&quot;neutron&quot;)</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;nFlu<sp/>&quot;<sp/>&lt;&lt;<sp/>theStep-&gt;GetPreStepPoint<sp/>()-&gt;GetKineticEnergy()/<sp/>MeV<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>(theStep-&gt;GetStepLength()/cm)<sp/>/<sp/>(theStep-&gt;GetPreStepPoint<sp/>()-&gt;GetPhysicalVolume()-&gt;GetLogicalVolume()-&gt;GetSolid()-&gt;GetCubicVolume()/cm3)&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/>&quot;gamma&quot;)</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;pFlu<sp/>&quot;<sp/>&lt;&lt;<sp/>theStep-&gt;GetPreStepPoint<sp/>()-&gt;GetKineticEnergy()/<sp/>MeV<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/><sp/><sp/>theStep-&gt;GetStepLength()/PostCubicVolume&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>if(theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/>&quot;neutron&quot;</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetName()<sp/>!=<sp/>&quot;Target&quot;</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetStepStatus()<sp/>==<sp/>fGeomBoundary)</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>&quot;nYield<sp/>&quot;<sp/>&lt;&lt;<sp/>theStep-&gt;GetPreStepPoint<sp/>()-&gt;GetKineticEnergy()<sp/>/<sp/>MeV<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/><sp/>1&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="191"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------<sp/>Scoring<sp/>of<sp/>every<sp/>particles<sp/>(neutron<sp/>excepted)<sp/>-----------------------</highlight></codeline>
<codeline lineno="198"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialization<sp/>of<sp/>status<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>InitializeGenerationFlag&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>fGenerationCounter-&gt;InitializeGenerationFlag(theStep,<sp/>IsTargetRegion(fPhysicalVolumeNumber));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>fGenerationCounter-&gt;GetStatus_SourceNeutron&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>fIsSourceNeutron<sp/>=<sp/>fGenerationCounter-&gt;GetStatus_SourceNeutron();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>fGenerationCounter-&gt;GetNeutronGeneration&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>fNeutronGeneration<sp/>=<sp/>fGenerationCounter-&gt;GetNeutronGeneration();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Required<sp/>quantities<sp/>from<sp/>the<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>int<sp/>Nprotons<sp/>=<sp/>1;<sp/><sp/><sp/>//<sp/>The<sp/>graphs<sp/>are<sp/>scaled<sp/>in<sp/>Graphes_ROOT.C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dbl_Ibeam<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//.E6<sp/>/<sp/>fEbeam<sp/>/(double)<sp/>Nprotons;<sp/><sp/>//<sp/>beam<sp/>current<sp/>at<sp/>1<sp/>MW_beam</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>FillEdepInStepHisto&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>FillEdepInStepHisto(theStep,<sp/>dbl_Ibeam);<sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>histogram<sp/>of<sp/>Edeposition<sp/>depending<sp/>on<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>ScorePrimaryProtons&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>ScorePrimaryProtons(theStep,<sp/>dbl_Ibeam);<sp/></highlight><highlight class="comment">//<sp/>Score<sp/>information<sp/>of<sp/>primary<sp/>protons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>Time<sp/>VS<sp/>Energy<sp/>histograms<sp/>of<sp/>fission<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>FillTimeEnergyFissionProducts&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsFissionProduct(theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleType()))<sp/>{<sp/>FillTimeEnergyFissionProducts(theStep);<sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----------------------------------<sp/>Neutrons<sp/>scoring<sp/>---------------------------------------</highlight></codeline>
<codeline lineno="222"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>AccumulateMeanEperFission&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>AccumulateMeanEperFission(theStep);<sp/></highlight><highlight class="comment">//<sp/>To<sp/>calculate<sp/>the<sp/>mean<sp/>deposited<sp/>energy<sp/>per<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>ManageNeutronScoring&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>ManageNeutronScoring(theStep,<sp/>nNeutrons);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>CountNeutronSource_DefEAP(theStep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----------<sp/>k<sp/>calculation,<sp/>counting<sp/>of<sp/>neutrons<sp/>and<sp/>transmuted<sp/>elements<sp/>(burnup)<sp/>-----------</highlight></codeline>
<codeline lineno="233"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Score<sp/>the<sp/>position<sp/>of<sp/>fissions<sp/>inside<sp/>a<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>keff_Mesh_scoring&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>keff_Mesh_scoring(theStep);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Score<sp/>neutron<sp/>generation<sp/>and<sp/>source<sp/>term<sp/>for<sp/>burnup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Begin<sp/>CountSecondaries&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>CountSecondaries(theStep,<sp/>nNeutrons);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>computeSourceTerm(theStep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>ManagePrimaryProtonEscape(theStep);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(theStep-&gt;GetTrack()-&gt;GetParticleDefinition()-&gt;GetParticleName()<sp/>==<sp/>&quot;proton&quot;)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillNtupleProton(</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition(),</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetPostStepPoint()-&gt;GetMomentumDirection(),</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetTotalEnergyDeposit()/eV//<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetKineticEnergy()/eV</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>p-&gt;int_Option<sp/>==<sp/>20)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_t_m_xkeff_1ae1e9f4676a54a9533cfe95f2d3b38805" kindref="member">TMXkeff::getInstance</ref>()-&gt;<ref refid="class_t_m_xkeff_1a33a603dcd2f64217c3e97ace0e62a110" kindref="member">inUserSteppingAction</ref>(theStep);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computeSourceTerm(theStep);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillEdepInStepHisto(theStep,1);<sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>histogram<sp/>of<sp/>Edeposition<sp/>depending<sp/>on<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ManageNeutronScoring(theStep,<sp/>nNeutrons);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;End<sp/>of<sp/>step&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>User-defined<sp/>method<sp/>because<sp/>of<sp/>geometry<sp/>dependencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="304"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>At<sp/>initialisation,<sp/>associate<sp/>a<sp/>region<sp/>ID<sp/>to<sp/>one<sp/>or<sp/>more<sp/>physical<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::Initialize_userDefinedRegions()<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>physical<sp/>volume<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;Geometry<sp/>==<sp/>0<sp/>||<sp/>p-&gt;Geometry<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>19,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>22,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>400,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>41,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>42,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>43,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>44,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>50,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>51,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>52,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>53,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>54,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>13,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>24,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>25,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>7<sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>10<sp/>,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>55,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>60,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>56,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>26};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;TargetSlab0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetTube&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Alcuts&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetWater&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Fuel&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Cladding&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;WaterFuelCladding&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pBreeder&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pReflectorC&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pDiffusor0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pDiffusor1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pDiffusor2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pDiffusor3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pDiffusor4&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pDiffusor&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pReflector&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pFetop&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BeamPipe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BeamWindow&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pShield&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pAirside&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pCool7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pCool10&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pAbsorberLayer&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pFebot&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pSpentFuel&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pControlRod&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TargetSlab&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CoolantTargetTube&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_pv<sp/>=<sp/>0;<sp/>i_pv<sp/>&lt;<sp/>strPhysVolNumber.size();<sp/>++i_pv)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[<sp/>strPhysVolName[i_pv]<sp/>]<sp/>=<sp/>strPhysVolNumber[i_pv];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;Geometry<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(p-&gt;Geometry<sp/>==<sp/>1)<sp/>{<sp/>//<sp/>hard-coded<sp/>but<sp/>will<sp/>be<sp/>improved<sp/>with<sp/>new<sp/>version<sp/>of<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber<sp/>=<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1};</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Universe&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;Universe&quot;</highlight><highlight class="normal">]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>42<sp/>-&gt;<sp/>Water<sp/>around<sp/>fuel<sp/>cladding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>WaterVolumes<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;REFL&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;WaterBottom&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;InBottWater&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;WaterTop&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;WaterCentralCyl0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;WaterCentralCyl1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;WaterCentralCyl2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;WDISPL&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;WaterDispl&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IRT4M8T&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IRT4M6T&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;WaterInCore&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FAST&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;WaterVolumes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(WaterVolumes[i]);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(42);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[<sp/>WaterVolumes[i]<sp/>]<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>44<sp/>-&gt;<sp/>Reflector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>ReflectorVolumes<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;BeAssembly0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BeAssembly1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BeAssembly2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BeCentralCyl0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BeCentralCyl1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BeCentralCyl2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;LEAD&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;ReflectorVolumes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(ReflectorVolumes[i]);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(44);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[<sp/>ReflectorVolumes[i]<sp/>]<sp/>=<sp/>44;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>43<sp/>-&gt;<sp/>Structural<sp/>material<sp/>in<sp/>the<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>AlStructureVolumes<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;RefAssembly&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ConeBelow&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AlTop&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;VOID&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TubeWDispl&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Separator&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;NeutronChannel_pipe&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;AlStructureVolumes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(AlStructureVolumes[i]);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(43);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[<sp/>AlStructureVolumes[i]<sp/>]<sp/>=<sp/>43;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fuel<sp/>IRT4M8T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;7;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;IRT4MAssembly8T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(41);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;IRT4MAssembly8T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)]<sp/>=<sp/>41;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;FuelAssembly8T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(400);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;FuelAssembly8T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)]<sp/>=<sp/>400;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;5;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;FuelAssembly8T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(j));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(400);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;FuelAssembly8T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(j)]<sp/>=<sp/>400;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;TubeClad8T&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(41);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;TubeClad8T&quot;</highlight><highlight class="normal">]<sp/>=<sp/>41;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;TubeFuel8T&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(400);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;TubeFuel8T&quot;</highlight><highlight class="normal">]<sp/>=<sp/>400;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;5;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;TubeFuel8T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(j));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(400);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;TubeFuel8T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(j)]<sp/>=<sp/>400;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;TubeDisplacement8T&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(41);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;TubeDisplacement8T&quot;</highlight><highlight class="normal">]<sp/>=<sp/>41;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fuel<sp/>IRT4M6T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;6;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;IRT4MAssembly6T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(41);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;IRT4MAssembly6T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)]<sp/>=<sp/>41;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;FuelAssembly6T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(400);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;FuelAssembly6T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)]<sp/>=<sp/>400;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;5;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;FuelAssembly6T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(j));</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(400);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;FuelAssembly6T_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(j)]<sp/>=<sp/>400;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;IRT4MAssembly6TChannel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(41);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;IRT4MAssembly6TChannel&quot;</highlight><highlight class="normal">]<sp/>=<sp/>41;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(&quot;TubeAbs&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(55);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;SSclad&quot;<sp/>-&gt;<sp/>Stainless<sp/>steel<sp/>cladding<sp/>of<sp/>control<sp/>rod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;SSclad&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(56);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;SSclad&quot;</highlight><highlight class="normal">]<sp/>=<sp/>56;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Absorber&quot;<sp/>-&gt;<sp/>Neutron<sp/>absorber<sp/>of<sp/>control<sp/>rod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;Absorber&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(55);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;Absorber&quot;</highlight><highlight class="normal">]<sp/>=<sp/>55;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;ReactorConcreteShield&quot;<sp/>-&gt;<sp/>Concrete<sp/>around<sp/>the<sp/>reactor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;ReactorConcreteShield&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(7);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;ReactorConcreteShield&quot;</highlight><highlight class="normal">]<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;ReactorAirOutside&quot;<sp/>-&gt;<sp/>Air<sp/>around<sp/>the<sp/>reactor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;ReactorAirOutside&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(9);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;ReactorAirOutside&quot;</highlight><highlight class="normal">]<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;ReactorVessel&quot;<sp/>-&gt;<sp/>Reactor<sp/>vessel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;ReactorVessel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(2);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;ReactorVessel&quot;</highlight><highlight class="normal">]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;ReactorWater&quot;<sp/>-&gt;<sp/>water<sp/>in<sp/>the<sp/>reactor<sp/>but<sp/>outside<sp/>the<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;ReactorWater&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(3);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;ReactorWater&quot;</highlight><highlight class="normal">]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;NeutronChannel_air&quot;<sp/>-&gt;<sp/>air<sp/>in<sp/>the<sp/>neutron<sp/>beam<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;NeutronChannel_air&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(9);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;NeutronChannel_air&quot;</highlight><highlight class="normal">]<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Lead&quot;<sp/>-&gt;<sp/>Lead<sp/>rid<sp/>defining<sp/>a<sp/>fast<sp/>zone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>FastLeadVolumes<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;FastZone&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;LeadInside&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;FastLeadVolumes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(FastLeadVolumes[i]);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(5);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[FastLeadVolumes[i]]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;B4C_fastZone&quot;<sp/>-&gt;<sp/>B4C<sp/>to<sp/>absorb<sp/>thermal<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>FastB4CVolumes<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Carrier_B4C&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;B4C_fastZone&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;FastB4CVolumes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(FastB4CVolumes[i]);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(50);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[FastB4CVolumes[i]]<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Al_capsule&quot;<sp/>-&gt;<sp/>B4C<sp/>to<sp/>absorb<sp/>thermal<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>FastAlCapsuleVolumes<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier3&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;FastAlCapsuleVolumes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(FastAlCapsuleVolumes[i]);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(51<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[FastAlCapsuleVolumes[i]]<sp/>=<sp/>51<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;FuelSample&quot;<sp/>-&gt;<sp/>Fuel<sp/>sample<sp/>at<sp/>the<sp/>center<sp/>of<sp/>the<sp/>fast<sp/>zone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>FuelSampleVolumes<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;FuelSample&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Carrier_Fuel&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;FuelSampleVolumes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(FuelSampleVolumes[i]);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(60);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[FuelSampleVolumes[i]]<sp/>=<sp/>60;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>57<sp/>-&gt;<sp/>Cladding<sp/>of<sp/>the<sp/>fast<sp/>zone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>FastAlStructureVolumes<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;FastZone_AlClad&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FastZone_ssClad&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FastZone_Tube&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;FastAlStructureVolumes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(FastAlStructureVolumes[i]);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(57);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[FastAlStructureVolumes[i]]<sp/>=<sp/>57;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Beam<sp/>pipe<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>vacuum<sp/>=<sp/>TMXAbstractBeamPipe::getVacuumName();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;vacuum-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*vacuum)[i]);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(26);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*vacuum)[i]]<sp/>=<sp/>26;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>tube<sp/><sp/><sp/>=<sp/>TMXAbstractBeamPipe::getTubeName();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;tube-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*tube)[i]);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(24);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*tube)[i]]<sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>window<sp/>=<sp/>TMXAbstractBeamPipe::getWindowName();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;window-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*window)[i]);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(25);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*window)[i]]<sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Target<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>coolant<sp/>=<sp/>TMXAbstractTargetAssembly::getCoolantName();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;coolant-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*coolant)[i]);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(23);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*coolant)[i]]<sp/>=<sp/>23;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>targetTube<sp/>=<sp/>TMXAbstractTargetAssembly::getCladName();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;targetTube-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*targetTube)[i]);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(21);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*targetTube)[i]]<sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>slabs<sp/>=<sp/>TMXAbstractTargetAssembly::getTargetName();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;slabs-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*slabs)[i]);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(14+i<sp/>&lt;=<sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(14<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*slabs)[i]]<sp/>=<sp/>14<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(20);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*slabs)[i]]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;Geometry<sp/>==<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;pSphere1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(20);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pSphere1&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;pSphere2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(400);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pSphere2&quot;</highlight><highlight class="normal">]<sp/>=<sp/>400;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;Geometry<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Beam<sp/>pipe<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pBeamPipe&quot;</highlight><highlight class="normal">]<sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pVoid&quot;</highlight><highlight class="normal">]<sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pWindow&quot;</highlight><highlight class="normal">]<sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Target<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pTarget&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pTarget_Coating&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pTarget_Plate&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pTarget_Water&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fSpallationTargetCubicVolume<sp/>=<sp/>7<sp/>*<sp/>cm<sp/>*<sp/>7<sp/>*<sp/>cm<sp/>*<sp/>5.4<sp/>*<sp/>cm;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fuel<sp/>material<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pFuel&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i<sp/>+<sp/>1)]<sp/>=<sp/>400;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Water<sp/>inside<sp/>core<sp/>excluding<sp/>fuel<sp/>assemblies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pCore&quot;</highlight><highlight class="normal">]<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[&quot;pFuelAssemblyVVRM2&quot;]<sp/>=<sp/>50;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reflectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[<sp/></highlight><highlight class="stringliteral">&quot;pReflectorAssembly&quot;</highlight><highlight class="normal"><sp/>]<sp/>=<sp/>44;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;Geometry<sp/>==<sp/>7)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>EAP80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>primaryCoolant<sp/>=<sp/>GeomEAP80::getPrimaryCoolantName();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;primaryCoolant-&gt;size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*primaryCoolant)[i].substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(50);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>primaryCoolantCore<sp/>=<sp/>GeomEAP80::getPrimaryCoolantCoreName();</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;primaryCoolantCore-&gt;size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*primaryCoolantCore)[i].substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(5);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>secondaryCoolant<sp/>=<sp/>GeomEAP80::getSecondaryCoolantName();</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;secondaryCoolant-&gt;size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*secondaryCoolant)[i].substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(85);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Incineration<sp/>blanket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;pblancool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(90);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>fuel<sp/>=<sp/>GeomEAP80::getFuelName();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;fuel-&gt;size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*fuel)[i].substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(400);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*const<sp/>std::string<sp/>spallationTarget<sp/>=<sp/>GeomEAP80::getSpallationTargetName();</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(&quot;p&quot;<sp/>+<sp/>spallationTarget.substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(20);</highlight></codeline>
<codeline lineno="594"><highlight class="comment"></highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(&quot;pBeamvoid&quot;);<sp/>//<sp/>Beam<sp/>void</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(26);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pbeamwal1&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pbeamin1&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pbeamwal2&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pBeamvoid&quot;</highlight><highlight class="normal">]<sp/>=<sp/>26;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pspalwal&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pspalin&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pinjtubX&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pinjinX&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pinjtubXX&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pinjinXX&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>ind;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=6;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>=<sp/>std::to_string((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)i);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pinjwal&quot;</highlight><highlight class="normal">+ind]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pinjwal&quot;</highlight><highlight class="normal">+ind+ind]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pinjtub&quot;</highlight><highlight class="normal">+ind+ind+ind]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>reactorOuterVessel<sp/>=<sp/>GeomEAP80::getReactorOuterVesselName();</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>reactorInnerVessel<sp/>=<sp/>GeomEAP80::getReactorInnerVesselName();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>reactorInnerVessel.substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(80);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_pv<sp/>=<sp/>0;<sp/>i_pv<sp/>&lt;<sp/>strPhysVolNumber.size();<sp/>++i_pv)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[<sp/>strPhysVolName[i_pv]<sp/>]<sp/>=<sp/>strPhysVolNumber[i_pv];</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;Geometry<sp/>==<sp/>8)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>AKME<sp/>Dev<sp/>Reactor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>primaryCoolant<sp/>=<sp/>GeomSVBR_AKME::getPrimaryCoolantName();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;primaryCoolant-&gt;size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*primaryCoolant)[i].substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(50);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>primaryCoolantCore<sp/>=<sp/>GeomSVBR_AKME::getPrimaryCoolantCoreName();</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;primaryCoolantCore-&gt;size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*primaryCoolantCore)[i].substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(5);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>secondaryCoolant<sp/>=<sp/>GeomSVBR_AKME::getSecondaryCoolantName();</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;secondaryCoolant-&gt;size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*secondaryCoolant)[i].substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(85);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Incineration<sp/>blanket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;pblancool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(90);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;*<sp/>fuel<sp/>=<sp/>GeomSVBR_AKME::getFuelName();</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;fuel-&gt;size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>(*fuel)[i].substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(400);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*const<sp/>std::string<sp/>spallationTarget<sp/>=<sp/>GeomSVBR_AKME::getSpallationTargetName();</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(&quot;p&quot;<sp/>+<sp/>spallationTarget.substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(20);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strPhysVolName.push_back(&quot;pBeamvoid&quot;);<sp/>//<sp/>Beam<sp/>void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strPhysVolNumber.push_back(26);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>reactorOuterVessel<sp/>=<sp/>GeomSVBR_AKME::getReactorOuterVesselName();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>reactorInnerVessel<sp/>=<sp/>GeomSVBR_AKME::getReactorInnerVesselName();</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal"><sp/>+<sp/>reactorInnerVessel.substr(1,<sp/>30));</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(80);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_pv<sp/>=<sp/>0;<sp/>i_pv<sp/>&lt;<sp/>strPhysVolNumber.size();<sp/>++i_pv)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[<sp/>strPhysVolName[i_pv]<sp/>]<sp/>=<sp/>strPhysVolNumber[i_pv];</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;Geometry<sp/>==<sp/>10)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SVBR100<sp/>+<sp/>TMX<sp/>Target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Beam<sp/>pipe<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pBeamPipe&quot;</highlight><highlight class="normal">]<sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pWindow&quot;</highlight><highlight class="normal">]<sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Target<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pBeamTube&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pUpperCoolant&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pIntermediateVoidEnvelope&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pIntermediateVoid&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pTarget_innerEMPomp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pTarget_outerEMPomp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pHXWings_replica&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pHXWings&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pWing&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pInner_envelope&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pOuter_outerShell&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pTargetCoolant&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pOuter_flowGuide&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pInner_flowGuide&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pInner_beamWindow&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pVanes_0&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pVanes_1&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pVanes_2&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pVanes_3&quot;</highlight><highlight class="normal">]<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fuel<sp/>material<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[</highlight><highlight class="stringliteral">&quot;pFuelPin_FuelPellet&quot;</highlight><highlight class="normal">]<sp/>=<sp/>400;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Water<sp/>inside<sp/>core<sp/>excluding<sp/>fuel<sp/>assemblies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fmap_PV_name_number[&quot;pCore&quot;]<sp/>=<sp/>42;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[&quot;pFuelAssemblyVVRM2&quot;]<sp/>=<sp/>50;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reflectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fmap_PV_name_number[<sp/>&quot;pReflectorAssembly&quot;<sp/>]<sp/>=<sp/>44;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numVol=0;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4PhysicalVolumeStore::iterator<sp/>physicalVolume=G4PhysicalVolumeStore::GetInstance()-&gt;begin();<sp/>physicalVolume!=G4PhysicalVolumeStore::GetInstance()-&gt;end();<sp/>physicalVolume++)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*physicalVolume)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolName.push_back((*physicalVolume)-&gt;GetName());</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strPhysVolNumber.push_back(numVol);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_PV_name_number[(*physicalVolume)-&gt;GetName()]<sp/>=<sp/>numVol;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++numVol;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>At<sp/>initialisation,<sp/>defined<sp/>some<sp/>variables<sp/>(e.g.<sp/>volume<sp/>for<sp/>fluence<sp/>calculation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::Initialize_userDefinedVariables()<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>of<sp/>a<sp/>bin<sp/>in<sp/>log<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>fDeltat<sp/>=<sp/>(8.<sp/>-<sp/>(-9.)<sp/>)<sp/>/<sp/>1000.;<sp/><sp/></highlight><highlight class="comment">//<sp/>WARNING<sp/>:<sp/>hard-coded<sp/>value<sp/>-&gt;<sp/>depend<sp/>on<sp/>histograms<sp/>21<sp/>to<sp/>24</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Volume<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;Geometry<sp/>==<sp/>0<sp/>||<sp/>p-&gt;Geometry<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTargetPosition<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>static_cast&lt;const<sp/>DetectorConstruction*&gt;<sp/>(G4RunManager::GetRunManager()-&gt;GetUserDetectorConstruction())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetTargetPosition();<sp/>//<sp/>Position<sp/>of<sp/>the<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTargetZdistanceToBottom<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="class_detector_construction" kindref="compound">DetectorConstruction</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(G4RunManager::GetRunManager()-&gt;GetUserDetectorConstruction())</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetTargetZdistanceToBottom();<sp/></highlight><highlight class="comment">//<sp/>Heigth<sp/>between<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>well<sp/>and<sp/>the<sp/>center<sp/>of<sp/>the<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fh0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="class_detector_construction" kindref="compound">DetectorConstruction</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(G4RunManager::GetRunManager()-&gt;GetUserDetectorConstruction())</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;Geth0();<sp/></highlight><highlight class="comment">//<sp/>Height<sp/>between<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>well<sp/>and<sp/>the<sp/>center<sp/>of<sp/>the<sp/>world<sp/>volume<sp/>(concrete)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTargetTubeSolid<sp/>=<sp/>static_cast&lt;const<sp/>DetectorConstruction*&gt;<sp/>(G4RunManager::GetRunManager()-&gt;GetUserDetectorConstruction())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetTargetTubeSolid();<sp/>//<sp/>Outer<sp/>radius<sp/>of<sp/>the<sp/>target<sp/>tube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fN_fuelrods<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="class_detector_construction" kindref="compound">DetectorConstruction</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(G4RunManager::GetRunManager()-&gt;GetUserDetectorConstruction())</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetTotalCopyNumberFuelRods();<sp/></highlight><highlight class="comment">//<sp/>Total<sp/>number<sp/>of<sp/>fuel<sp/>rods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4LogicalVolume*<sp/>logicLead<sp/>=<sp/><sp/>G4LogicalVolumeStore::GetInstance()-&gt;GetVolume(</highlight><highlight class="stringliteral">&quot;lDiffusor&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logicLead)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLeadCubicVolume<sp/>=<sp/>logicLead-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)logicLead-&gt;GetNoDaughters();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>LV_Name<sp/>=<sp/>logicLead-&gt;GetDaughter(i)-&gt;GetLogicalVolume()-&gt;GetName();</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LV_Name.find(</highlight><highlight class="stringliteral">&quot;lDiffusor&quot;</highlight><highlight class="normal">)<sp/>==<sp/>std::string::npos<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>substract<sp/>lead<sp/>daugther<sp/>volume<sp/>in<sp/>lead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLeadCubicVolume<sp/>-=<sp/>logicLead-&gt;GetDaughter(i)-&gt;GetLogicalVolume()-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Lead<sp/>Volume<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fLeadCubicVolume<sp/>&lt;&lt;<sp/>&quot;<sp/>cm^3&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4LogicalVolume*<sp/>logicTarget<sp/>=<sp/><sp/>G4LogicalVolumeStore::GetInstance()-&gt;GetVolume(</highlight><highlight class="stringliteral">&quot;lTargetTube&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logicTarget)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTargetTubeCubicVolume<sp/>=<sp/>logicTarget-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)logicTarget-&gt;GetNoDaughters();<sp/>++i)<sp/>{<sp/>fTargetTubeCubicVolume<sp/>-=<sp/>logicTarget-&gt;GetDaughter(i)-&gt;GetLogicalVolume()-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;<sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Target<sp/>tube<sp/>Volume<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fTargetTubeCubicVolume<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4LogicalVolume*<sp/>logicFuelUnion<sp/>=<sp/><sp/>G4LogicalVolumeStore::GetInstance()-&gt;GetVolume(</highlight><highlight class="stringliteral">&quot;lFuelUnion&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logicFuelUnion)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelUnionCubicVolume<sp/>=<sp/>logicFuelUnion-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)logicFuelUnion-&gt;GetNoDaughters();<sp/>++i)<sp/>{<sp/>fFuelUnionCubicVolume<sp/>-=<sp/>logicFuelUnion-&gt;GetDaughter(i)-&gt;GetLogicalVolume()-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;<sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Fuel<sp/>Volume<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fFuelUnionCubicVolume<sp/>&lt;&lt;<sp/>&quot;<sp/>cm^3&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;Geometry<sp/>==<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Volume<sp/>Calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fSpallationTargetCubicVolume<sp/>=<sp/>fmap_LV_volume[GeomEAP80::getSpallationTargetName()];</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fReactorOuterVesselCubicVolume<sp/>=<sp/>fmap_LV_volume[GeomEAP80::getReactorOuterVesselName()];</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fReactorInnerVesselCubicVolume<sp/>=<sp/>fmap_LV_volume[GeomEAP80::getReactorInnerVesselName()];</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelUnionCubicVolume<sp/>=<sp/>0.;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>volume<sp/>of<sp/>fuel<sp/>in<sp/>cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,8)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelUnionCubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMatBlkt1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelBlkt1CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel1CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat2&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel2CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel3CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMatGrid2&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelGrid2CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat4&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel4CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat5&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel5CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat6&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel6CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat7&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel7CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat8&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel8CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMatGrid3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelGrid3CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat9&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel9CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat10&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel10CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat11&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel11CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMatBlkt2&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelBlkt2CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>Physical<sp/>Volume<sp/>Fuel<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fIncinerationCubicVolume<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,8)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lIncBlkt&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fIncinerationCubicVolume<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fSecondaryCoolantCubicVolume<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,17)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lSecondaryCoolant&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fSecondaryCoolantCubicVolume<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPrimaryCoolantCoreCubicVolume<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,14)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lAssemblyCool_&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fPrimaryCoolantCoreCubicVolume<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPrimaryCoolantCubicVolume<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lreacvesI&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,14)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lCoreStructure&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,12)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lCoreQuarter&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lrefcool1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lreftube2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lblancool&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lrefcool2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,17)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lMHDUnitContainer&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,8)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lupflowI&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,8)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lloflowI&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fPrimaryCoolantCubicVolume<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Primary<sp/>coolant<sp/>volume<sp/>in<sp/>Core<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fPrimaryCoolantCoreCubicVolume<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Primary<sp/>coolant<sp/>volume<sp/>in<sp/>reactor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fPrimaryCoolantCubicVolume<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Secondary<sp/>coolant<sp/>volume<sp/>in<sp/>heat<sp/>exchanger<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fSecondaryCoolantCubicVolume<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fuel<sp/>volume<sp/>in<sp/>core<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelUnionCubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Blkt1<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelBlkt1CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel1<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel1CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel2<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel2CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel3<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel3CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Grid2<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelGrid2CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel4<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel4CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel5<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel5CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel6<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel6CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel7<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel7CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel8<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel8CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Grid3<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelGrid3CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel9<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel9CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel10<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel10CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel11<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel11CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Blkt2<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelBlkt2CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Total<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelBlkt1CubicVolume+fFuel1CubicVolume+fFuel2CubicVolume+fFuel3CubicVolume+fFuelGrid2CubicVolume+fFuel4CubicVolume+fFuel5CubicVolume+fFuel6CubicVolume+fFuel7CubicVolume+fFuel8CubicVolume+fFuelGrid3CubicVolume+fFuel9CubicVolume+fFuel10CubicVolume+fFuel11CubicVolume+fFuelBlkt2CubicVolume<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Spallation<sp/>target<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fSpallationTargetCubicVolume<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incineration<sp/>Blanket<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fIncinerationCubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reactor<sp/>outer<sp/>vessel<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fReactorOuterVesselCubicVolume<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reactor<sp/>inner<sp/>vessel<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fReactorInnerVesselCubicVolume<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mass<sp/>Calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>spallationTargetMass<sp/>=<sp/>fmap_LV_mass[GeomEAP80::getSpallationTargetName()];</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>reactorOuterVesselMass<sp/>=<sp/>fmap_LV_mass[GeomEAP80::getReactorOuterVesselName()];</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>reactorInnerVesselMass<sp/>=<sp/>fmap_LV_mass[GeomEAP80::getReactorInnerVesselName()];</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>fuelUnionMass<sp/>=<sp/>0.;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>volume<sp/>of<sp/>fuel<sp/>in<sp/>cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_mass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,8)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fuelUnionMass<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>incinerationMass<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_mass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,8)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lIncBlkt&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>incinerationMass<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>secondaryCoolantMass<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_mass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,17)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lSecondaryCoolant&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>secondaryCoolantMass<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>primaryCoolantCoreMass<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_mass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,14)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lAssemblyCool_&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>primaryCoolantCoreMass<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>primaryCoolantMass<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_mass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lreacvesI&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,14)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lCoreStructure&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,12)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lCoreQuarter&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lrefcool1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lreftube2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lblancool&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lrefcool2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,17)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lMHDUnitContainer&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,8)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lupflowI&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,8)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lloflowI&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>primaryCoolantMass<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Primary<sp/>coolant<sp/>mass<sp/>in<sp/>Core<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>primaryCoolantCoreMass<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Primary<sp/>coolant<sp/>mass<sp/>in<sp/>reactor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>primaryCoolantMass<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Secondary<sp/>coolant<sp/>mass<sp/>in<sp/>heat<sp/>exchanger<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>secondaryCoolantMass<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fuel<sp/>mass<sp/>in<sp/>core<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fuelUnionMass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incineration<sp/>Blanket<sp/>mass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>incinerationMass<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Spallation<sp/>target<sp/>mass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>spallationTargetMass<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reactor<sp/>outer<sp/>vessel<sp/>mass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reactorOuterVesselMass<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reactor<sp/>inner<sp/>vessel<sp/>mass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reactorInnerVesselMass<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;Geometry<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Volume<sp/>Calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fSpallationTargetCubicVolume<sp/>=<sp/>fmap_LV_volume[GeomSVBR_AKME::getSpallationTargetName()];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fReactorOuterVesselCubicVolume<sp/>=<sp/>fmap_LV_volume[GeomSVBR_AKME::getReactorOuterVesselName()];</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fReactorInnerVesselCubicVolume<sp/>=<sp/>fmap_LV_volume[GeomSVBR_AKME::getReactorInnerVesselName()];</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelUnionCubicVolume<sp/>=<sp/>0.;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>volume<sp/>of<sp/>fuel<sp/>in<sp/>cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,8)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelUnionCubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMatBlkt1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelBlkt1CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel1CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat2&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel2CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel3CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMatGrid2&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelGrid2CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat4&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel4CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat5&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel5CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat6&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel6CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat7&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel7CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat8&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel8CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMatGrid3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelGrid3CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat9&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel9CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat10&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel10CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat11&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuel11CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>LVvol.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMatBlkt2&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelBlkt2CubicVolume<sp/>+=<sp/>LVvol.second;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>Physical<sp/>Volume<sp/>Fuel<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fIncinerationCubicVolume<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,8)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lIncBlkt&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fIncinerationCubicVolume<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fSecondaryCoolantCubicVolume<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,17)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lSecondaryCoolant&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fSecondaryCoolantCubicVolume<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPrimaryCoolantCoreCubicVolume<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,14)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lAssemblyCool_&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fPrimaryCoolantCoreCubicVolume<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPrimaryCoolantCubicVolume<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lreacvesI&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,14)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lCoreStructure&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,12)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lCoreQuarter&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lrefcool1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lreftube2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lblancool&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lrefcool2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,17)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lMHDUnitContainer&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,8)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lupflowI&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,8)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lloflowI&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fPrimaryCoolantCubicVolume<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Primary<sp/>coolant<sp/>volume<sp/>in<sp/>Core<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fPrimaryCoolantCoreCubicVolume<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Primary<sp/>coolant<sp/>volume<sp/>in<sp/>reactor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fPrimaryCoolantCubicVolume<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Secondary<sp/>coolant<sp/>volume<sp/>in<sp/>heat<sp/>exchanger<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fSecondaryCoolantCubicVolume<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fuel<sp/>volume<sp/>in<sp/>core<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelUnionCubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Blkt1<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelBlkt1CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel1<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel1CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel2<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel2CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel3<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel3CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Grid2<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelGrid2CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel4<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel4CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel5<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel5CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel6<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel6CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel7<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel7CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel8<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel8CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Grid3<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelGrid3CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel9<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel9CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel10<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel10CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Fuel11<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuel11CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Blkt2<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelBlkt2CubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFuel<sp/>Total<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fFuelBlkt1CubicVolume+fFuel1CubicVolume+fFuel2CubicVolume+fFuel3CubicVolume+fFuelGrid2CubicVolume+fFuel4CubicVolume+fFuel5CubicVolume+fFuel6CubicVolume+fFuel7CubicVolume+fFuel8CubicVolume+fFuelGrid3CubicVolume+fFuel9CubicVolume+fFuel10CubicVolume+fFuel11CubicVolume+fFuelBlkt2CubicVolume<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Spallation<sp/>target<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fSpallationTargetCubicVolume<sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>cm^3&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incineration<sp/>Blanket<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fIncinerationCubicVolume<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reactor<sp/>outer<sp/>vessel<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fReactorOuterVesselCubicVolume<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reactor<sp/>inner<sp/>vessel<sp/>volume<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fReactorInnerVesselCubicVolume<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cm^3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mass<sp/>Calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>G4double<sp/>spallationTargetMass<sp/>=<sp/>fmap_LV_mass[GeomSVBR_AKME::getSpallationTargetName()];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>reactorOuterVesselMass<sp/>=<sp/>fmap_LV_mass[GeomSVBR_AKME::getReactorOuterVesselName()];</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>reactorInnerVesselMass<sp/>=<sp/>fmap_LV_mass[GeomSVBR_AKME::getReactorInnerVesselName()];</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>fuelUnionMass<sp/>=<sp/>0.;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>volume<sp/>of<sp/>fuel<sp/>in<sp/>cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_mass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,8)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuelMat&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fuelUnionMass<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>incinerationMass<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_mass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,8)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lIncBlkt&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>incinerationMass<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>secondaryCoolantMass<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_mass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,17)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lSecondaryCoolant&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>secondaryCoolantMass<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>primaryCoolantCoreMass<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_mass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,14)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lAssemblyCool_&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>primaryCoolantCoreMass<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>primaryCoolantMass<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_mass<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lreacvesI&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,14)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lCoreStructure&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,12)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lCoreQuarter&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lrefcool1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lreftube2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lblancool&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,9)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lrefcool2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,17)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lMHDUnitContainer&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,8)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lupflowI&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,8)<sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lloflowI&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>primaryCoolantMass<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Primary<sp/>coolant<sp/>mass<sp/>in<sp/>Core<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>primaryCoolantCoreMass<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Primary<sp/>coolant<sp/>mass<sp/>in<sp/>reactor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>primaryCoolantMass<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Secondary<sp/>coolant<sp/>mass<sp/>in<sp/>heat<sp/>exchanger<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>secondaryCoolantMass<sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fuel<sp/>mass<sp/>in<sp/>core<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fuelUnionMass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incineration<sp/>Blanket<sp/>mass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>incinerationMass<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Spallation<sp/>target<sp/>mass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>spallationTargetMass<sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>g&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reactor<sp/>outer<sp/>vessel<sp/>mass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reactorOuterVesselMass<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reactor<sp/>inner<sp/>vessel<sp/>mass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reactorInnerVesselMass<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>g&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;Geometry<sp/>==<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTargetBeamWindowCubicVolume<sp/>=<sp/>819.7<sp/>*<sp/>cm3;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>stretch<sp/>beam<sp/>window<sp/>[-225;<sp/>370]<sp/>mm<sp/>//<sp/>6264.1<sp/>*<sp/>cm3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTargetTubeCubicVolume<sp/>=<sp/>15250.9<sp/>*<sp/>cm3;<sp/></highlight><highlight class="comment">//<sp/>3.14159265<sp/>*<sp/>2.5<sp/>*<sp/>2.5<sp/>*<sp/>52.5<sp/>*<sp/>cm3;<sp/>//<sp/>Approximate<sp/>to<sp/>the<sp/>main<sp/>coolant<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelUnionCubicVolume<sp/>=<sp/>1022699.<sp/>*<sp/>cm3;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTargetTubeCubicVolume<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::vector&lt;std::string&gt;*<sp/>targetTube<sp/>=<sp/>TMXAbstractTargetAssembly::getCladName();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i=0;<sp/>i&lt;targetTube-&gt;size();<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4LogicalVolume*<sp/>logicTarget<sp/>=<sp/><sp/>G4LogicalVolumeStore::GetInstance()-&gt;GetVolume(&quot;l&quot;<sp/>+<sp/>(*targetTube)[i]<sp/>+<sp/>&quot;0&quot;,false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(logicTarget)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTargetTubeCubicVolume<sp/>+=<sp/>logicTarget-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(int)logicTarget-&gt;GetNoDaughters();<sp/>++j)<sp/>{<sp/>fTargetTubeCubicVolume<sp/>-=<sp/>logicTarget-&gt;GetDaughter(j)-&gt;GetLogicalVolume()-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Target<sp/>tube<sp/>Volume<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fTargetTubeCubicVolume<sp/>&lt;&lt;<sp/>&quot;<sp/>cm^3&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Calculation<sp/>of<sp/>volumes<sp/>in<sp/>cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fWaterInCoreCubicVolume<sp/>=<sp/>0;<sp/>//<sp/>Water<sp/>volume<sp/>inside<sp/>the<sp/>core<sp/>in<sp/>cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLeadCubicVolume<sp/>=<sp/>0;<sp/><sp/>//<sp/>Lead<sp/>volume<sp/>outside<sp/>B4C<sp/>in<sp/>the<sp/>fast<sp/>zone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fN_FastRods<sp/>=<sp/>0;<sp/>//<sp/>Number<sp/>of<sp/>fast<sp/>rods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelUnionCubicVolume<sp/>=<sp/>0;<sp/>//<sp/>Total<sp/>volume<sp/>of<sp/>fuel<sp/>in<sp/>cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(G4PhysicalVolumeStore::iterator<sp/>physicalVolume=G4PhysicalVolumeStore::GetInstance()-&gt;begin();<sp/>physicalVolume!=G4PhysicalVolumeStore::GetInstance()-&gt;end();<sp/>physicalVolume++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(*physicalVolume<sp/>&amp;&amp;<sp/>(*physicalVolume)-&gt;GetName()<sp/>!=<sp/>&quot;ScoringMeshPhys&quot;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(*physicalVolume)-&gt;GetName()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4LogicalVolume*<sp/>logicalVolume<sp/>=<sp/>(*physicalVolume)-&gt;GetLogicalVolume();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(logicalVolume<sp/>&amp;&amp;<sp/>logicalVolume-&gt;GetMaterial()<sp/>&amp;&amp;<sp/>logicalVolume-&gt;GetMaterial()-&gt;GetName()<sp/>==<sp/>&quot;fuel_Water&quot;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fWaterInCoreCubicVolume<sp/>+=<sp/>logicalVolume-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>logicalVolume-&gt;GetNoDaughters();<sp/>++i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fWaterInCoreCubicVolume<sp/>-=<sp/>logicalVolume-&gt;GetDaughter(i)-&gt;GetLogicalVolume()-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(logicalVolume<sp/>&amp;&amp;<sp/>logicalVolume-&gt;GetName()<sp/>==<sp/>&quot;lWaterFastZone&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++fN_FastRods;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(logicalVolume<sp/>&amp;&amp;<sp/>logicalVolume-&gt;GetName()<sp/>==<sp/>&quot;lFastZone&quot;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLeadCubicVolume<sp/>+=<sp/>logicalVolume-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>logicalVolume-&gt;GetNoDaughters();<sp/>++i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLeadCubicVolume<sp/>-=<sp/>logicalVolume-&gt;GetDaughter(i)-&gt;GetLogicalVolume()-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(logicalVolume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(<sp/>(logicalVolume-&gt;GetName()).substr(0,7)<sp/>==<sp/>&quot;lFuel8T&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(logicalVolume-&gt;GetName()).substr(0,7)<sp/>==<sp/>&quot;lTubeFuel8T&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(logicalVolume-&gt;GetName()).substr(0,7)<sp/>==<sp/>&quot;lFuel6T&quot;))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelUnionCubicVolume<sp/>+=<sp/>logicalVolume-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTargetTubeCubicVolume<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>TargetLVs<sp/>=<sp/>*TMXAbstractTargetAssembly::getCladName();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetLVs.insert(TargetLVs.end(),<sp/>TMXAbstractTargetAssembly::getCoolantName()-&gt;begin(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TMXAbstractTargetAssembly::getCoolantName()-&gt;end());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetLVs.insert(TargetLVs.end(),<sp/>TMXAbstractTargetAssembly::getTargetName()-&gt;begin(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TMXAbstractTargetAssembly::getTargetName()-&gt;end());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i=0;<sp/>i&lt;TargetLVs.size();<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTargetTubeCubicVolume<sp/>+=fmap_LV_volume[&quot;l&quot;<sp/>+<sp/>TargetLVs[i]<sp/>+<sp/>&quot;0&quot;];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=14;<sp/>i&lt;=23;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fTargetTubeCubicVolume<sp/>+=<sp/>fmap_Region_volume[i];</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLeadCubicVolume<sp/>=<sp/>fmap_LV_volume[</highlight><highlight class="stringliteral">&quot;Carrier_B4C&quot;</highlight><highlight class="normal">];<sp/></highlight><highlight class="comment">//<sp/>Lead<sp/>volume<sp/>outside<sp/>B4C<sp/>in<sp/>the<sp/>fast<sp/>zone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Al_capsule&quot;<sp/>-&gt;<sp/>B4C<sp/>to<sp/>absorb<sp/>thermal<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>FastAlCapsuleVolumes<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AlCarrier3&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;FastAlCapsuleVolumes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLeadCubicVolume<sp/>+=<sp/>fmap_LV_volume[FastAlCapsuleVolumes[i]];</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLeadCubicVolume<sp/>=<sp/>fmap_LV_volume[&quot;lFastZone&quot;];<sp/>//<sp/>Lead<sp/>volume<sp/>outside<sp/>B4C<sp/>in<sp/>the<sp/>fast<sp/>zone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fWaterInCoreCubicVolume<sp/>=<sp/>fmap_mat_volume[</highlight><highlight class="stringliteral">&quot;fuel_Water&quot;</highlight><highlight class="normal">];<sp/></highlight><highlight class="comment">//<sp/>Water<sp/>volume<sp/>inside<sp/>the<sp/>core<sp/>in<sp/>cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFuelUnionCubicVolume<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>volume<sp/>of<sp/>fuel<sp/>in<sp/>cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>LVvol<sp/>:<sp/>fmap_LV_volume<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(LVvol.first).substr(0,7)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuel8T&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,7)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lTubeFuel8T&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(LVvol.first).substr(0,7)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lFuel6T&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fFuelUnionCubicVolume<sp/>+=<sp/>LVvol.second;<sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Number<sp/>of<sp/>fast<sp/>rods<sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fN_FastRods<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Lead<sp/>volume<sp/>in<sp/>fast<sp/>zone:<sp/>&quot;<sp/>&lt;&lt;<sp/>fLeadCubicVolume<sp/>&lt;&lt;<sp/>&quot;<sp/>cm^3&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Water<sp/>in<sp/>core<sp/>volume<sp/><sp/><sp/><sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fWaterInCoreCubicVolume<sp/>&lt;&lt;<sp/>&quot;<sp/>cm^3&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Fuel<sp/><sp/>in<sp/>core<sp/>volume<sp/><sp/><sp/><sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fFuelUnionCubicVolume<sp/>&lt;&lt;<sp/>&quot;<sp/>cm^3&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fill<sp/>histograms<sp/>of<sp/>which<sp/>energy<sp/>distribution<sp/>of<sp/>the<sp/>neutron<sp/>flux<sp/>(with<sp/>volumic<sp/>dependencies)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::FillHistoTimeEnergyFlux(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BoundaryStatus,<sp/>G4int<sp/>nNeutrons)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>required<sp/>quantites<sp/>from<sp/>the<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>energyK<sp/>=<sp/>KineticEnergy_eV(theStep);<sp/></highlight><highlight class="comment">//<sp/>Kinetic<sp/>energy<sp/>in<sp/>eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>StepLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>theStep-&gt;GetStepLength()/cm;<sp/></highlight><highlight class="comment">//<sp/>Length<sp/>of<sp/>the<sp/>step<sp/>in<sp/>cm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>PostGlobalTime<sp/><sp/><sp/><sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetGlobalTime()/s;<sp/></highlight><highlight class="comment">//<sp/>Time<sp/>since<sp/>the<sp/>event<sp/>is<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>G4String<sp/>processName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep())</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processName<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep()-&gt;GetProcessName();</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;Geometry<sp/>==<sp/>7<sp/>||<sp/>p-&gt;Geometry<sp/>==<sp/>8)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>solution<sp/>for<sp/>the<sp/>SVBR<sp/>AKME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsTargetRegion(fPhysicalVolumeNumber))<sp/></highlight><highlight class="comment">//<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>BoundaryStatus<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(12,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>interactions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(16,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsTarget(fPhysicalVolumeNumber))<sp/></highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>in<sp/>target<sp/>except<sp/>target<sp/>tube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(13,<sp/>log10(energyK),<sp/>StepLength/fSpallationTargetCubicVolume);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsLeadRegion(fPhysicalVolumeNumber))<sp/><sp/></highlight><highlight class="comment">//<sp/>Lead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Angular<sp/>Distribution<sp/>(in<sp/>cos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(theStep<sp/>&amp;&amp;<sp/>theStep-&gt;GetPostStepPoint())<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4Isotope*<sp/>target<sp/>=<sp/>GetTargetIsotope(theStep-&gt;GetPostStepPoint());</highlight></codeline>
<codeline lineno="1199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(target)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(target<sp/>&amp;&amp;<sp/>(target-&gt;GetName()<sp/>==<sp/>&quot;BI-209-0&quot;))<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(46,<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetMomentumDirection().dot(theStep-&gt;GetPreStepPoint()-&gt;GetMomentumDirection()),<sp/>1);</highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>BoundaryStatus<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(14,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>interactions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(18,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>in<sp/>lead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsLead(fPhysicalVolumeNumber))<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(2,<sp/>log10(energyK),<sp/>StepLength/fPrimaryCoolantCoreCubicVolume);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fPhysicalVolumeNumber<sp/>&gt;=<sp/>50)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>at<sp/>different<sp/>radius<sp/>in<sp/>lead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(3<sp/>+<sp/>fPhysicalVolumeNumber-50,<sp/>log10(energyK),<sp/>StepLength/fPrimaryCoolantCubicVolume);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsFuel(fPhysicalVolumeNumber))<sp/><sp/></highlight><highlight class="comment">//<sp/>Fuel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>BoundaryStatus<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(15,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>interactions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(19,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>in<sp/>fuel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(8,<sp/>log10(energyK),<sp/>StepLength/fFuelUnionCubicVolume);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>//<sp/>use<sp/>scoring<sp/>in<sp/>param</highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMatBlkt1&quot;)</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(30,<sp/>log10(energyK),<sp/>StepLength/fFuelBlkt1CubicVolume);</highlight></codeline>
<codeline lineno="1233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMat1&quot;)</highlight></codeline>
<codeline lineno="1234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(31,<sp/>log10(energyK),<sp/>StepLength/fFuel1CubicVolume);</highlight></codeline>
<codeline lineno="1235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMat2&quot;)</highlight></codeline>
<codeline lineno="1236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(32,<sp/>log10(energyK),<sp/>StepLength/fFuel2CubicVolume);</highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMat3&quot;)</highlight></codeline>
<codeline lineno="1238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(33,<sp/>log10(energyK),<sp/>StepLength/fFuel3CubicVolume);</highlight></codeline>
<codeline lineno="1239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMatGrid2&quot;)</highlight></codeline>
<codeline lineno="1240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(34,<sp/>log10(energyK),<sp/>StepLength/fFuelGrid2CubicVolume);</highlight></codeline>
<codeline lineno="1241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMat4&quot;)</highlight></codeline>
<codeline lineno="1242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(35,<sp/>log10(energyK),<sp/>StepLength/fFuel4CubicVolume);</highlight></codeline>
<codeline lineno="1243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMat5&quot;)</highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(36,<sp/>log10(energyK),<sp/>StepLength/fFuel5CubicVolume);</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMat6&quot;)</highlight></codeline>
<codeline lineno="1246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(37,<sp/>log10(energyK),<sp/>StepLength/fFuel6CubicVolume);</highlight></codeline>
<codeline lineno="1247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMat7&quot;)</highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(38,<sp/>log10(energyK),<sp/>StepLength/fFuel7CubicVolume);</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMat8&quot;)</highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(39,<sp/>log10(energyK),<sp/>StepLength/fFuel8CubicVolume);</highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMatGrid3&quot;)</highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(40,<sp/>log10(energyK),<sp/>StepLength/fFuelGrid3CubicVolume);</highlight></codeline>
<codeline lineno="1253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMat9&quot;)</highlight></codeline>
<codeline lineno="1254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(41,<sp/>log10(energyK),<sp/>StepLength/fFuel9CubicVolume);</highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMat10&quot;)</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(42,<sp/>log10(energyK),<sp/>StepLength/fFuel10CubicVolume);</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMat11&quot;)</highlight></codeline>
<codeline lineno="1258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(43,<sp/>log10(energyK),<sp/>StepLength/fFuel11CubicVolume);</highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fPrePhysicalVolumeName<sp/>==<sp/>&quot;pFuelMatBlkt2&quot;)</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(44,<sp/>log10(energyK),<sp/>StepLength/fFuelBlkt2CubicVolume);</highlight></codeline>
<codeline lineno="1261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processName==</highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>spectrum<sp/>in<sp/>fuel<sp/>for<sp/>fissions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(9,<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>for<sp/>fissions<sp/>from<sp/>N0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fNeutronGeneration<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(12,<sp/>log10(PostGlobalTime));</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(14,<sp/>log10(PostGlobalTime));<sp/></highlight><highlight class="comment">//<sp/>Time<sp/>for<sp/>every<sp/>fissions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsInReactorVes(fPhysicalVolumeNumber))<sp/></highlight><highlight class="comment">//<sp/>Inner<sp/>Reactor<sp/>Vessel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>BoundaryStatus<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(41,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>interactions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(42,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>scoring<sp/>in<sp/>param<sp/>analysisManager-&gt;FillH1(28,<sp/>log10(energyK),<sp/>StepLength/fReactorInnerVesselCubicVolume);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSecondCoolant(fPhysicalVolumeNumber))<sp/></highlight><highlight class="comment">//<sp/>Secondary<sp/>Coolant<sp/>in<sp/>Heat<sp/>Exchangers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>BoundaryStatus<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(43,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>interactions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(44,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>scoring<sp/>in<sp/>param<sp/>analysisManager-&gt;FillH1(29,<sp/>log10(energyK),<sp/>StepLength/fSecondaryCoolantCubicVolume);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsIncineration(fPhysicalVolumeNumber))<sp/></highlight><highlight class="comment">//<sp/>Incineration<sp/>Blanket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>param<sp/>file<sp/>analysisManager-&gt;FillH1(47,<sp/>log10(energyK),<sp/>StepLength/fIncinerationCubicVolume);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>IsTargetRegion(fPhysicalVolumeNumber)<sp/>)<sp/></highlight><highlight class="comment">//<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>BoundaryStatus<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(12,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>interactions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(16,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsTarget(fPhysicalVolumeNumber))<sp/>{</highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>in<sp/>target<sp/>except<sp/>target<sp/>tube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(13,<sp/>log10(energyK),<sp/>StepLength/fTargetTubeCubicVolume);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Score<sp/>Base<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>theStep-&gt;GetTrack()-&gt;GetParticleDefinition()-&gt;GetParticleName()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetPhysicalVolume()-&gt;GetName()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(13,<sp/>log10(energyK),<sp/>StepLength/fmap_Region_volume[fPhysicalVolumeNumber]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>if<sp/>(IsBeamWindow(fPhysicalVolumeNumber))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(57,<sp/>log10(energyK),<sp/>StepLength/fTargetBeamWindowCubicVolume);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(p-&gt;Geometry<sp/>!=<sp/>1<sp/>&amp;&amp;<sp/>IsHeatShieldRegion(fPhysicalVolumeNumber))</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(p-&gt;Geometry<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>IsBeamWindow(fPhysicalVolumeNumber)))<sp/></highlight><highlight class="comment">//<sp/>Reflector<sp/>+<sp/>iron<sp/>Top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>BoundaryStatus<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(13,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>interactions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(17,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>in<sp/>water-cooled<sp/>heat<sp/>shield</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(10,<sp/>log10(energyK),<sp/>StepLength/fmap_Region_volume[fPhysicalVolumeNumber]);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsReflector(fPhysicalVolumeNumber))<sp/><sp/></highlight><highlight class="comment">//<sp/>Lead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>in<sp/>reflector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>scoring<sp/>in<sp/>param<sp/>analysisManager-&gt;FillH1(45,<sp/>log10(energyK),<sp/>StepLength/fmap_Region_volume[fPhysicalVolumeNumber]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsLeadRegion(fPhysicalVolumeNumber))<sp/><sp/></highlight><highlight class="comment">//<sp/>Lead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>BoundaryStatus<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(14,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>interactions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(18,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>in<sp/>lead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsLead(fPhysicalVolumeNumber))<sp/>{analysisManager-&gt;FillH1(2,<sp/>log10(energyK),<sp/>StepLength/fmap_Region_volume[fPhysicalVolumeNumber]);}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSamplesInLead(fPhysicalVolumeNumber))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>at<sp/>different<sp/>radius<sp/>in<sp/>lead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(3<sp/>+<sp/>fPhysicalVolumeNumber-50,<sp/>log10(energyK),<sp/>StepLength/<sp/>fmap_Region_volume[fPhysicalVolumeNumber]);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsFuel(fPhysicalVolumeNumber))<sp/><sp/></highlight><highlight class="comment">//<sp/>Fuel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>BoundaryStatus<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(15,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>interactions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(19,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>in<sp/>fuel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(8,<sp/>log10(energyK),<sp/>StepLength/fmap_Region_volume[fPhysicalVolumeNumber]);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processName==</highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>spectrum<sp/>in<sp/>fuel<sp/>for<sp/>fissions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(9,<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>for<sp/>fissions<sp/>from<sp/>N0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fNeutronGeneration<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(12,<sp/>log10(PostGlobalTime));</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(14,<sp/>log10(PostGlobalTime));<sp/></highlight><highlight class="comment">//<sp/>Time<sp/>for<sp/>every<sp/>fissions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsWaterCoreRegion(fPhysicalVolumeNumber))<sp/><sp/></highlight><highlight class="comment">//<sp/>Water<sp/>in<sp/>core<sp/>acting<sp/>as<sp/>the<sp/>moderator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>BoundaryStatus<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>a<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(39,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>interactions<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(40,<sp/>log10(PostGlobalTime),<sp/>log10(energyK));</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>in<sp/>water</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(26,<sp/>log10(energyK),<sp/>StepLength/fmap_Region_volume[fPhysicalVolumeNumber]);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSpentFuel(fPhysicalVolumeNumber))<sp/><sp/></highlight><highlight class="comment">//<sp/>Spent<sp/>fuel<sp/>samples<sp/>to<sp/>be<sp/>transmuted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fluence<sp/>spectrum<sp/>in<sp/>fuel<sp/>sample<sp/>to<sp/>transmute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(27,<sp/>log10(energyK),<sp/>StepLength/fmap_Region_volume[fPhysicalVolumeNumber]);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsNeutronAbsorber(fPhysicalVolumeNumber)<sp/>&amp;&amp;<sp/>fNeutronGeneration<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(processName==</highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal"><sp/>||<sp/>(processName==</highlight><highlight class="stringliteral">&quot;neutronInelastic&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>nNeutrons==0)))<sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>spectrum<sp/>for<sp/>absorption<sp/>of<sp/>spallation<sp/>neutrons<sp/>in<sp/>Neutron<sp/>absorber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(21,<sp/>log10(energyK),<sp/>log10(StepLength/fmap_Region_volume[fPhysicalVolumeNumber]));</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++fN0Absorber;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;SetN0Abs(fN0Absorber);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsNeutronAbsorber(fPhysicalVolumeNumber)<sp/>&amp;&amp;<sp/>(processName==</highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal"><sp/>||<sp/>(processName==</highlight><highlight class="stringliteral">&quot;neutronInelastic&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>nNeutrons==0)))<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>spectrum<sp/>for<sp/>absorption<sp/>in<sp/>Neutron<sp/>absorber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(20,<sp/>log10(energyK),<sp/>log10(StepLength/fmap_Region_volume[fPhysicalVolumeNumber]));</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((processName==</highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal"><sp/>||<sp/>(processName==</highlight><highlight class="stringliteral">&quot;neutronInelastic&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>nNeutrons==0)<sp/>||<sp/>processName==</highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>fPromptN)<sp/></highlight><highlight class="comment">//<sp/>Prompt<sp/>neutron<sp/>absorption<sp/>-&gt;<sp/>Calculation<sp/>of<sp/>prompt<sp/>neutron<sp/>lifetime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(19,<sp/>log10(PostGlobalTime<sp/>-<sp/>fBirthTime));</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>processName==</highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal"><sp/>||<sp/>(processName==</highlight><highlight class="stringliteral">&quot;neutronInelastic&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>nNeutrons==0)<sp/>||<sp/>processName==</highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>Neutron<sp/>absorption<sp/>-&gt;<sp/>Calculation<sp/>of<sp/>neutron<sp/>lifetime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(20,<sp/>log10(PostGlobalTime<sp/>-<sp/>fBirthTime));</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>mesh<sp/>which<sp/>is<sp/>used<sp/>for<sp/>keff<sp/>calculations<sp/>is<sp/>hard-coded<sp/>and<sp/>the<sp/>scoring<sp/>of<sp/>fission<sp/>must<sp/>be<sp/>adapted<sp/>to<sp/>this<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::keff_Mesh_scoring(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>G4String<sp/>processName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep())<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processName<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep()-&gt;GetProcessName();}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(processName==</highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TMXOption::IsKeffCalculation(p-&gt;int_Option))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>of<sp/>keff<sp/>calculation,<sp/>update<sp/>the<sp/>3D<sp/>space<sp/>distribution<sp/>with<sp/>the<sp/>position<sp/>of<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>PostPos<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;Geometry<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Troïtsk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>sqrt(PostPos.x()/mm<sp/>*<sp/>PostPos.x()/mm<sp/>+<sp/>PostPos.y()/mm*PostPos.y()/mm);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>std::acos(PostPos.x()/mm<sp/>/<sp/>radius);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PostPos.y()<sp/>&lt;<sp/>0)<sp/>{theta<sp/>=<sp/>twopi<sp/>-<sp/>theta;}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddWeight(radius*radius,<sp/>theta,<sp/>fTargetZdistanceToBottom<sp/>-<sp/>fh0<sp/>+<sp/>PostPos.z()/mm);<sp/><sp/></highlight><highlight class="comment">//<sp/>RandomDistribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;Geometry<sp/>==<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>CVR-Rez</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddWeight(PostPos.x()/mm,<sp/>PostPos.y()/mm,<sp/>PostPos.z()/mm);<sp/><sp/></highlight><highlight class="comment">//<sp/>RandomDistribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>is<sp/>polar<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>sqrt(PostPos.x()/mm<sp/>*<sp/>PostPos.x()/mm<sp/>+<sp/>PostPos.y()/mm*PostPos.y()/mm);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>std::acos(PostPos.x()/mm<sp/>/<sp/>radius);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PostPos.y()<sp/>&lt;<sp/>0)<sp/>{theta<sp/>=<sp/>twopi<sp/>-<sp/>theta;}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddWeight(radius*radius,<sp/>theta,<sp/>PostPos.z()/mm);<sp/><sp/></highlight><highlight class="comment">//<sp/>RandomDistribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SteppingAction<sp/>tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="1467"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialize<sp/>every<sp/>data<sp/>members<sp/>of<sp/>this<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::Initialize(<ref refid="class_event_action" kindref="compound">EventAction</ref>*<sp/>eventAction,<sp/><ref refid="class_run_action" kindref="compound">RunAction</ref>*<sp/>runAction,<sp/><ref refid="class_t_m_x_input_parameters" kindref="compound">TMXInputParameters</ref>&amp;<sp/>parameter)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;----<sp/>Begin<sp/>of<sp/>SteppingAction<sp/>Initialization<sp/>-----&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>fGenerationCounter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_t_m_x_neutron_generation_counting" kindref="compound">TMXNeutronGenerationCounting</ref>(eventAction,<sp/>&amp;parameter);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>fEventAction<sp/>=<sp/>eventAction;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>fRunAction<sp/>=<sp/>runAction;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/>fRunNumber=<sp/>fEventAction-&gt;GetRunNumber();</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>fNeutronGeneration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>fIsSourceNeutron<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>fNeutronGeneration<sp/>=<sp/>-1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>fIsSourceNeutron<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>v_NeutronGeneration.clear();</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>N0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/>Nf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>Nfission<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>Nnfission<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/>fN0Absorber<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>fTargetZdistanceToBottom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>fh0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/>fEnergyAtBirth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>fPosAtBirth<sp/>=<sp/>G4ThreeVector(0,0,0);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>fBirthTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>fPromptN<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>f_tBin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>&amp;parameter;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>fFromFission<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>fID_firstfission<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/>fEperFission<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>fProcessElas<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>fProcessInel<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/>fProcessCap<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>fProcessFis<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>fLengthBetweenCollision<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>fN_FastRods<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/>fPostPhysicalVolumeNumber<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/>fPrePhysicalVolumeNumber<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>fPhysicalVolumeNumber<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>region<sp/>ID<sp/>associated<sp/>to<sp/>physical<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>Initialize_userDefinedRegions();</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>volumes<sp/>in<sp/>cm3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>be<sp/>called<sp/>after<sp/>the<sp/>definition<sp/>of<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>fmap_LV_volume.clear();<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>map<sp/>at<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>fmap_mat_volume.clear();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>map<sp/>at<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>fmap_Region_volume.clear();<sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>map<sp/>at<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>RecursiveVolumeCalculation((*G4PhysicalVolumeStore::GetInstance())[0]);<sp/></highlight><highlight class="comment">//<sp/>First<sp/>physical<sp/>volume<sp/>of<sp/>the<sp/>G4PhysicalVolumeStore<sp/>is<sp/>the<sp/>universe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>fmap_LV_mass.clear();<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>map<sp/>at<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>fmap_mat_mass.clear();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>map<sp/>at<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>fmap_Region_mass.clear();<sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>map<sp/>at<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>RecursiveMassCalculation((*G4PhysicalVolumeStore::GetInstance())[0]);<sp/></highlight><highlight class="comment">//<sp/>First<sp/>physical<sp/>volume<sp/>of<sp/>the<sp/>G4PhysicalVolumeStore<sp/>is<sp/>the<sp/>universe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Definition<sp/>of<sp/>some<sp/>variables<sp/>(e.g.<sp/>volume<sp/>for<sp/>fluence<sp/>calculation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>Initialize_userDefinedVariables();</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;----<sp/>End<sp/>of<sp/>SteppingAction<sp/>Initialization<sp/>-----&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>the<sp/>volumes<sp/>of<sp/>interest<sp/>for<sp/>the<sp/>scoring<sp/>of<sp/>spectra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>fRunAction-&gt;m_scoringSurfaceCurrentSpectrum-&gt;buildMapPVSurface();</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>fRunAction-&gt;m_scoringSurfaceFluenceSpectrum-&gt;buildMapPVSurface();</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>fRunAction-&gt;m_scoringVolumeFluenceSpectrum-&gt;buildMapPVCubicVolume(fmap_LV_volume);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;Verbose<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fRunAction-&gt;m_scoringVolumeFluenceSpectrum-&gt;printSummary();</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Recalculate<sp/>the<sp/>region<sp/>ID<sp/>associated<sp/>to<sp/>a<sp/>physical<sp/>volume<sp/>at<sp/>each<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::GetPhysicalVolumeNumber(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>G4String<sp/><sp/>thePrePVname<sp/><sp/>=<sp/>theStep-&gt;GetPreStepPoint<sp/>()-&gt;GetPhysicalVolume()-&gt;GetName();<sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>the<sp/>physical<sp/>volume<sp/>of<sp/>the<sp/>preStep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepStatus<sp/>PreStatus<sp/><sp/>=<sp/>theStep-&gt;GetPreStepPoint<sp/>()-&gt;GetStepStatus();<sp/></highlight><highlight class="comment">//<sp/>Status<sp/>of<sp/>the<sp/>pre-step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>G4String<sp/><sp/>thePostPVname;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume())</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thePostPVname<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetName();<sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>the<sp/>physical<sp/>volume<sp/>of<sp/>the<sp/>postStep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thePostPVname<sp/>=<sp/>thePrePVname;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>postStep<sp/>is<sp/>outside<sp/>the<sp/>universe<sp/>=<sp/>its<sp/>name<sp/>is<sp/>the<sp/>one<sp/>of<sp/>the<sp/>preStep<sp/>physical<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepStatus<sp/>PostStatus<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetStepStatus();<sp/></highlight><highlight class="comment">//<sp/>Status<sp/>of<sp/>the<sp/>post-step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4int<sp/>stepnumber<sp/><sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetCurrentStepNumber();<sp/></highlight><highlight class="comment">//<sp/>stepnumber<sp/>of<sp/>the<sp/>track,<sp/>==1<sp/>means<sp/>first<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stepnumber<sp/>==<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>volume<sp/>number<sp/>of<sp/>the<sp/>track&apos;s<sp/>first<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPrePhysicalVolumeNumber<sp/>=<sp/>GetRegionNumber(thePrePVname,<sp/>PreStatus);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(thePrePVname.compare(thePostPVname)<sp/>==<sp/>0<sp/>||<sp/>PostStatus<sp/>==<sp/>fWorldBoundary)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>postStep<sp/>point<sp/>is<sp/>still<sp/>in<sp/>the<sp/>same<sp/>volume<sp/>or<sp/>at<sp/>the<sp/>boarder<sp/>of<sp/>the<sp/>universe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPostPhysicalVolumeNumber<sp/>=<sp/>fPrePhysicalVolumeNumber;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>We<sp/>search<sp/>its<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPostPhysicalVolumeNumber<sp/>=<sp/>GetRegionNumber(thePostPVname,<sp/>PostStatus);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>not<sp/>first<sp/>step<sp/>of<sp/>the<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fPrePhysicalVolumeNumber<sp/>!=<sp/>fPostPhysicalVolumeNumber<sp/>)<sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>track<sp/>has<sp/>changed<sp/>of<sp/>volume<sp/>during<sp/>last<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPrePhysicalVolumeNumber<sp/>=<sp/>fPostPhysicalVolumeNumber;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(thePrePVname.compare(thePostPVname)<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>PostStatus<sp/>==<sp/>fGeomBoundary)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>postStep<sp/>point<sp/>is<sp/>not<sp/>in<sp/>the<sp/>same<sp/>volume<sp/>and<sp/>postStep<sp/>is<sp/>at<sp/>the<sp/>boarder<sp/>of<sp/>a<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPostPhysicalVolumeNumber<sp/>=<sp/>GetRegionNumber(thePostPVname,<sp/>PostStatus);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>fPhysicalVolumeNumber<sp/>=<sp/>fPrePhysicalVolumeNumber;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>fPrePhysicalVolumeName<sp/>=<sp/>thePrePVname;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fPhysicalVolumeNumber<sp/>=<sp/>GetRegionNumber(thePrePVname,<sp/>PreStatus);</highlight></codeline>
<codeline lineno="1571"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(/*stepnumber<sp/>!=<sp/>1*/<sp/>fPhysicalVolumeNumber==1<sp/>&amp;&amp;<sp/>thePrePVname<sp/>!=<sp/>&quot;AirSpacer&quot;<sp/>&amp;&amp;<sp/>thePostPVname<sp/>!=<sp/>&quot;AirSpacer&quot;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\nstepnumber<sp/>&quot;<sp/>&lt;&lt;<sp/>stepnumber<sp/>&lt;&lt;<sp/>&quot;\n\t<sp/>thePrePVname<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>thePrePVname<sp/>&lt;&lt;<sp/>&quot;<sp/>fPrePhysicalVolumeNumber<sp/>&quot;<sp/>&lt;&lt;<sp/>fPrePhysicalVolumeNumber<sp/>&lt;&lt;<sp/>&quot;<sp/>boundary<sp/>?<sp/>&quot;<sp/>&lt;&lt;<sp/>(PreStatus<sp/>==<sp/>fGeomBoundary)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\t<sp/>thePostPVname<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>thePostPVname<sp/>&lt;&lt;<sp/>&quot;<sp/>fPostPhysicalVolumeNumber<sp/>&quot;<sp/>&lt;&lt;<sp/>fPostPhysicalVolumeNumber<sp/>&lt;&lt;<sp/>&quot;<sp/>boundary<sp/>?<sp/>&quot;<sp/>&lt;&lt;<sp/>(PostStatus<sp/>==<sp/>fGeomBoundary)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\t<sp/>fPhysicalVolumeNumber<sp/>&quot;<sp/>&lt;&lt;<sp/>fPhysicalVolumeNumber<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>region<sp/>ID<sp/>of<sp/>a<sp/>physical<sp/>volume<sp/>considering<sp/>its<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SteppingAction::GetRegionNumber(std::string<sp/>PhyicalVolume_name,<sp/>G4StepStatus<sp/></highlight><highlight class="comment">/*stepStatus*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fmap_PV_name_number.find(PhyicalVolume_name)<sp/>==<sp/>fmap_PV_name_number.end())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>PhyicalVolume_name<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(stepStatus<sp/>!=<sp/>fWorldBoundary)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;in<sp/>SteppingAction:<sp/>!!<sp/>WARNING<sp/>!!<sp/>Physical<sp/>Volume<sp/>&quot;<sp/>&lt;&lt;<sp/>PhyicalVolume_name<sp/>&lt;&lt;<sp/>&quot;<sp/>not<sp/>listed<sp/>in<sp/>fmap_PV_name_number<sp/>of<sp/>SteppingAction.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Region<sp/>number<sp/>is<sp/>set<sp/>to<sp/>universe<sp/>1&quot;<sp/>&lt;&lt;<sp/>std::endl;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>considered<sp/>as<sp/>the<sp/>universe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>If<sp/>found<sp/>in<sp/>the<sp/>map<sp/>of<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmap_PV_name_number[PhyicalVolume_name];</highlight></codeline>
<codeline lineno="1589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>cubic<sp/>volume<sp/>per<sp/>material,<sp/>logical<sp/>volume<sp/>or<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::RecursiveVolumeCalculation(G4VPhysicalVolume*<sp/>PV,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>replicate_number)<sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PV)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>physical<sp/>volume<sp/>is<sp/>not<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4LogicalVolume*<sp/>LV<sp/>=<sp/>PV-&gt;GetLogicalVolume();</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PV_replicate_number<sp/>=<sp/>replicate_number<sp/>*<sp/>PV-&gt;GetMultiplicity();<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>replicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LV)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>logical<sp/>volume<sp/>is<sp/>not<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PV_volume<sp/>=<sp/>replicate_number<sp/>*<sp/>LV-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>real<sp/>volume<sp/>of<sp/>daugthers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>volume<sp/>in<sp/>dedicated<sp/>maps</highlight></codeline>
<codeline lineno="1603"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>listed<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fmap_PV_name_number.find(PV-&gt;GetName())<sp/>!=<sp/>fmap_PV_name_number.end())</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_Region_volume[fmap_PV_name_number[PV-&gt;GetName()]]<sp/>+=<sp/>PV_volume;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_Region_volume[1]<sp/>+=<sp/>PV_volume;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>Logical<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_LV_volume[LV-&gt;GetName()]<sp/>+=<sp/>PV_volume;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>materials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LV-&gt;GetMaterial())<sp/>{<sp/>fmap_mat_volume[LV-&gt;GetMaterial()-&gt;GetName()]<sp/>+=<sp/>PV_volume;}<sp/></highlight><highlight class="comment">//<sp/>If<sp/>material<sp/>is<sp/>not<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>LV-&gt;GetNoDaughters();<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>Physical<sp/>volume<sp/>daugther<sp/>of<sp/>the<sp/>Logical<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4VPhysicalVolume*<sp/>Daughter_PV<sp/>=<sp/>LV-&gt;GetDaughter(i);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>daughter_replicate_number<sp/>=<sp/>PV_replicate_number<sp/>*<sp/>Daughter_PV-&gt;GetMultiplicity();<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>replicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>daugther_volume<sp/>=<sp/>daughter_replicate_number<sp/>*<sp/>Daughter_PV-&gt;GetLogicalVolume()-&gt;GetSolid()-&gt;GetCubicVolume()/cm3;<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>real<sp/>volume<sp/>of<sp/>daugthers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Substract<sp/>volume<sp/>of<sp/>daughters<sp/>in<sp/>dedicated<sp/>maps</highlight></codeline>
<codeline lineno="1624"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>listed<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fmap_PV_name_number.find(PV-&gt;GetName())<sp/>!=<sp/>fmap_PV_name_number.end())</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_Region_volume[fmap_PV_name_number[PV-&gt;GetName()]]<sp/>-=<sp/>daugther_volume;<sp/></highlight><highlight class="comment">//<sp/>removing<sp/>volume<sp/>of<sp/>daughters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_Region_volume[1]<sp/>-=<sp/>daugther_volume;<sp/></highlight><highlight class="comment">//<sp/>removing<sp/>volume<sp/>of<sp/>daughters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>Logical<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_LV_volume[LV-&gt;GetName()]<sp/>-=<sp/>daugther_volume;<sp/></highlight><highlight class="comment">//<sp/>removing<sp/>volume<sp/>of<sp/>daughters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>materials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LV-&gt;GetMaterial())<sp/>{<sp/>fmap_mat_volume[LV-&gt;GetMaterial()-&gt;GetName()]<sp/>-=<sp/>daugther_volume;}<sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>material<sp/>is<sp/>not<sp/>null,<sp/>the<sp/>volume<sp/>of<sp/>daughters<sp/>is<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>recursive<sp/>method<sp/>for<sp/>each<sp/>daughter<sp/>physical<sp/>volume<sp/>(Daughter_PV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecursiveVolumeCalculation(Daughter_PV,<sp/>PV_replicate_number);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>mass<sp/>per<sp/>material,<sp/>logical<sp/>volume<sp/>or<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::RecursiveMassCalculation(G4VPhysicalVolume*<sp/>PV,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>replicate_number)<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PV)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>physical<sp/>volume<sp/>is<sp/>not<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4LogicalVolume*<sp/>LV<sp/>=<sp/>PV-&gt;GetLogicalVolume();</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PV_replicate_number<sp/>=<sp/>replicate_number<sp/>*<sp/>PV-&gt;GetMultiplicity();<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>replicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LV)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>logical<sp/>volume<sp/>is<sp/>not<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PV_mass<sp/>=<sp/>replicate_number<sp/>*<sp/>LV-&gt;GetMass()/g;<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>real<sp/>mass<sp/>of<sp/>daugthers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>volume<sp/>in<sp/>dedicated<sp/>maps</highlight></codeline>
<codeline lineno="1656"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>listed<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fmap_PV_name_number.find(PV-&gt;GetName())<sp/>!=<sp/>fmap_PV_name_number.end())</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_Region_mass[fmap_PV_name_number[PV-&gt;GetName()]]<sp/>+=<sp/>PV_mass;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_Region_mass[1]<sp/>+=<sp/>PV_mass;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>Logical<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_LV_mass[LV-&gt;GetName()]<sp/>+=<sp/>PV_mass;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>materials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LV-&gt;GetMaterial())<sp/>{<sp/>fmap_mat_mass[LV-&gt;GetMaterial()-&gt;GetName()]<sp/>+=<sp/>PV_mass;}<sp/></highlight><highlight class="comment">//<sp/>If<sp/>material<sp/>is<sp/>not<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>LV-&gt;GetNoDaughters();<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>Physical<sp/>volume<sp/>daugther<sp/>of<sp/>the<sp/>Logical<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4VPhysicalVolume*<sp/>Daughter_PV<sp/>=<sp/>LV-&gt;GetDaughter(i);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>daughter_replicate_number<sp/>=<sp/>PV_replicate_number<sp/>*<sp/>Daughter_PV-&gt;GetMultiplicity();<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>replicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>daugther_volume<sp/>=<sp/>daughter_replicate_number<sp/>*<sp/>Daughter_PV-&gt;GetLogicalVolume()-&gt;GetMass()/g;<sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>real<sp/>mass<sp/>of<sp/>daugthers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Substract<sp/>volume<sp/>of<sp/>daughters<sp/>in<sp/>dedicated<sp/>maps</highlight></codeline>
<codeline lineno="1677"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>listed<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fmap_PV_name_number.find(PV-&gt;GetName())<sp/>!=<sp/>fmap_PV_name_number.end())</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_Region_mass[fmap_PV_name_number[PV-&gt;GetName()]]<sp/>-=<sp/>daugther_volume;<sp/></highlight><highlight class="comment">//<sp/>removing<sp/>volume<sp/>of<sp/>daughters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_Region_mass[1]<sp/>-=<sp/>daugther_volume;<sp/></highlight><highlight class="comment">//<sp/>removing<sp/>volume<sp/>of<sp/>daughters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>Logical<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmap_LV_mass[LV-&gt;GetName()]<sp/>-=<sp/>daugther_volume;<sp/></highlight><highlight class="comment">//<sp/>removing<sp/>volume<sp/>of<sp/>daughters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>of<sp/>materials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LV-&gt;GetMaterial())<sp/>{<sp/>fmap_mat_mass[LV-&gt;GetMaterial()-&gt;GetName()]<sp/>-=<sp/>daugther_volume;}<sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>material<sp/>is<sp/>not<sp/>null,<sp/>the<sp/>volume<sp/>of<sp/>daughters<sp/>is<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>recursive<sp/>method<sp/>for<sp/>each<sp/>daughter<sp/>physical<sp/>volume<sp/>(Daughter_PV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecursiveMassCalculation(Daughter_PV,<sp/>PV_replicate_number);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>kinetic<sp/>energy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SteppingAction::KineticEnergy_eV(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>energyK<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetKineticEnergy()/eV;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(energyK==0)<sp/>{energyK<sp/>=<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetKineticEnergy()/eV;}<sp/></highlight><highlight class="comment">//<sp/>If<sp/>kinetic<sp/>energy<sp/>is<sp/>0,<sp/>get<sp/>the<sp/>kinetic<sp/>energy<sp/>of<sp/>preStep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>energyK;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>energy<sp/>in<sp/>eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsInReactorVes<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/>80;}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsSecondCoolant<sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/>85;}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsIncineration<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/>90;}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsTargetRegion<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(VolNumber<sp/>&lt;=<sp/>26<sp/>&amp;&amp;<sp/><sp/>VolNumber<sp/>&gt;=<sp/>14);}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsTarget<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(VolNumber<sp/>&lt;=<sp/>23<sp/>&amp;&amp;<sp/><sp/>VolNumber<sp/>&gt;=<sp/>14);}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsHeatShieldRegion<sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(VolNumber<sp/>==<sp/>3<sp/><sp/>||<sp/><sp/>VolNumber<sp/>==<sp/>13);}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsLeadRegion<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(VolNumber<sp/>==<sp/>5<sp/><sp/>||<sp/>(VolNumber<sp/>&gt;=<sp/>50<sp/>&amp;&amp;<sp/>VolNumber<sp/>&lt;=<sp/>54));}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsWaterCoreRegion<sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/>42;}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsBeamPipe<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/>24;}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsBeamWindow<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/>25;}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsLead<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/><sp/>5;}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsSamplesInLead<sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(VolNumber<sp/>&gt;=<sp/>50<sp/><sp/>&amp;&amp;<sp/>VolNumber<sp/>&lt;=<sp/>54);}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsSpentFuel<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/>60;}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsNeutronAbsorber<sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/>55;}</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsFuel<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/>400;}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsCoolantRegion<sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(VolNumber<sp/>==<sp/>5<sp/>||<sp/>(VolNumber<sp/>&gt;=<sp/>50<sp/>&amp;&amp;<sp/>VolNumber<sp/>&lt;=<sp/>54));}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsCoolantInCoreRegion(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/>42;}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsReflector<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VolNumber)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>VolNumber<sp/>==<sp/>44;}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsFissionProduct(std::string<sp/>particleType)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(particleType==</highlight><highlight class="stringliteral">&quot;nucleus&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>IsFuel(fPhysicalVolumeNumber));}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsPrimaryProton(std::string<sp/>particleName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ID_track)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(particleName==</highlight><highlight class="stringliteral">&quot;proton&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ID_track<sp/>==<sp/>1);}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SteppingAction::IsEscapingTarget()<sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(IsTargetRegion(fPrePhysicalVolumeNumber)<sp/>&amp;&amp;<sp/>!IsTargetRegion(fPostPhysicalVolumeNumber));}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Methods<sp/>used<sp/>to<sp/>count<sp/>neutrons,<sp/>transmuted<sp/>elements,<sp/>and<sp/>calculate<sp/>k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="1767"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::CountSecondaries(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNeutrons)<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Counting<sp/>of<sp/>neutron<sp/>generations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Counting<sp/>of<sp/>source<sp/>term<sp/>for<sp/>burnup<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nb_second_neutrons=0;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nb_OtherNeutrons<sp/><sp/>=0;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nb_inelastic<sp/><sp/><sp/><sp/><sp/><sp/>=0;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>G4Track*&gt;<sp/>*secondaries<sp/>=<sp/>theStep-&gt;GetSecondaryInCurrentStep();</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>G4String<sp/>processName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep())<sp/>{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processName<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep()-&gt;GetProcessName();}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;<sp/>i&lt;(G4int)secondaries-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;secondaries<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>neutron<sp/>per<sp/>generation<sp/>and<sp/>change<sp/>generation<sp/>of<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>theStep-&gt;GetTrack()-&gt;GetTrackStatus()<sp/>!=<sp/>fKillTrackAndSecondaries<sp/>)</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fGenerationCounter-&gt;NeutronGenerationCounting(theStep,<sp/>(*secondaries)[i],<sp/>nNeutrons,<sp/>Nb_inelastic);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>track<sp/>and<sp/>its<sp/>secondaries<sp/>are<sp/>killed,<sp/>neutron<sp/>counting<sp/>is<sp/>biaised.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>secondary<sp/>neutrons<sp/>coming<sp/>from<sp/>mother<sp/>neutron<sp/>and<sp/>not<sp/>from<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(*secondaries)[i]-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>processName!=</highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Nb_second_neutrons;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>secondary<sp/>neutrons<sp/>coming<sp/>from<sp/>mother<sp/>particle<sp/>other<sp/>than<sp/>neutron<sp/>or<sp/>primary<sp/>particles<sp/>or<sp/>particle<sp/>in<sp/>the<sp/>target<sp/>(flagged<sp/>as<sp/>source<sp/>neutrons)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(*secondaries)[i]-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>processName!=</highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetTrackID()<sp/>!=<sp/>1</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>fIsSourceNeutron<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Nb_OtherNeutrons;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Source<sp/>term<sp/>calculation<sp/>for<sp/>Burnup<sp/>calculation</highlight></codeline>
<codeline lineno="1811"><highlight class="comment"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(p-&gt;TimeOfRun<sp/>&gt;<sp/>0)<sp/>{TMXBurnup::FillvectorBurnupElement(theStep,<sp/>fEventAction,<sp/>(*secondaries)[i]);}<sp/>//<sp/>Calculation<sp/>of<sp/>burnup<sp/>required<sp/>only<sp/>if<sp/>time<sp/>of<sp/>run<sp/>&gt;<sp/>0</highlight></codeline>
<codeline lineno="1813"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>processes<sp/>as<sp/>well<sp/>as<sp/>production<sp/>/<sp/>disparition<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>G4VProcess*<sp/>process<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">G4VProcess*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep());</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>G4HadronicProcess*<sp/>hproc<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">G4HadronicProcess*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(process);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="class_run" kindref="compound">Run</ref>*<sp/>run<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_run" kindref="compound">Run</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(G4RunManager::GetRunManager()-&gt;GetNonConstCurrentRun());</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>run-&gt;<ref refid="class_run_1ac5bfcd51f38b7c06c3b6f8e613631fdc" kindref="member">CountProcesses</ref>(process);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><sp/><sp/><sp/><sp/>hproc<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutronInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ionInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;protonInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;pi+Inelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;pi-Inelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;alphaInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;dInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;tInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;He3Inelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>))</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Isotope*<sp/>target<sp/>=<sp/>GetTargetIsotope(theStep-&gt;GetPostStepPoint());</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(target)</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZAmother<sp/>=<sp/>10000<sp/>*<sp/>target-&gt;GetZ()<sp/>+<sp/>10<sp/>*<sp/>target-&gt;GetN()<sp/>+<sp/>target-&gt;Getm();</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;<ref refid="class_run_1abce51991634ccd5a2061c2efb1c2a18e" kindref="member">ParticleCount</ref>(IZAmother,<sp/>-1,<sp/>(<ref refid="class_t_m_x_material" kindref="compound">TMXMaterial</ref>*)theStep-&gt;GetPreStepPoint()-&gt;GetMaterial());</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Daughter<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;const<sp/>G4Track*&gt;::size_type<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>secondaries-&gt;size();<sp/>j++)</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*secondaries)[j]-&gt;GetDefinition()-&gt;GetParticleType()<sp/><sp/><sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nucleus&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(*secondaries)[j]-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;proton&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Ions*<sp/>SecondIonsType<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">G4Ions*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>((*secondaries)[j]-&gt;GetDefinition());</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZAdaughter<sp/>=<sp/>10000<sp/>*<sp/>SecondIonsType-&gt;GetAtomicNumber()<sp/>+<sp/>10<sp/>*<sp/>SecondIonsType-&gt;GetAtomicMass()<sp/>+<sp/>SecondIonsType-&gt;GetIsomerLevel();</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;<ref refid="class_run_1abce51991634ccd5a2061c2efb1c2a18e" kindref="member">ParticleCount</ref>(IZAdaughter,<sp/>+1,<sp/>(<ref refid="class_t_m_x_material" kindref="compound">TMXMaterial</ref>*)theStep-&gt;GetPreStepPoint()-&gt;GetMaterial());</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Counting<sp/>of<sp/>additionnal<sp/>neutrons<sp/>not<sp/>coming<sp/>from<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nb_second_neutrons<sp/>&gt;<sp/>1)<sp/><sp/></highlight><highlight class="comment">//<sp/>secondary<sp/>neutrons<sp/>coming<sp/>from<sp/>mother<sp/>neutron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddInelasticN(Nb_second_neutrons);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nb_OtherNeutrons<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>secondary<sp/>neutrons<sp/>coming<sp/>from<sp/>mother<sp/>particle<sp/>other<sp/>than<sp/>neutron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddInelasticN(Nb_OtherNeutrons);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::computeSourceTerm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep)</highlight></codeline>
<codeline lineno="1864"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>processes<sp/>as<sp/>well<sp/>as<sp/>production<sp/>/<sp/>disparition<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>G4VProcess*<sp/>process<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">G4VProcess*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep());</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>G4HadronicProcess*<sp/>hproc<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">G4HadronicProcess*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(process);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_run" kindref="compound">Run</ref>*<sp/>run<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_run" kindref="compound">Run</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(G4RunManager::GetRunManager()-&gt;GetNonConstCurrentRun());</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>run-&gt;<ref refid="class_run_1ac5bfcd51f38b7c06c3b6f8e613631fdc" kindref="member">CountProcesses</ref>(process);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><sp/><sp/><sp/><sp/>hproc<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutronInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ionInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;protonInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;pi+Inelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;pi-Inelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;alphaInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;dInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;tInelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>process-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;He3Inelastic&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>))</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Isotope*<sp/>target<sp/>=<sp/>GetTargetIsotope(theStep-&gt;GetPostStepPoint());</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(target)</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZAmother<sp/>=<sp/>10000<sp/>*<sp/>target-&gt;GetZ()<sp/>+<sp/>10<sp/>*<sp/>target-&gt;GetN()<sp/>+<sp/>target-&gt;Getm();</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;<ref refid="class_run_1abce51991634ccd5a2061c2efb1c2a18e" kindref="member">ParticleCount</ref>(IZAmother,<sp/>-1,<sp/>(<ref refid="class_t_m_x_material" kindref="compound">TMXMaterial</ref>*)theStep-&gt;GetPreStepPoint()-&gt;GetMaterial());</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Daughter<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>G4Track*&gt;<sp/>*secondaries<sp/>=<sp/>theStep-&gt;GetSecondaryInCurrentStep();</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;const<sp/>G4Track*&gt;::size_type<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>secondaries-&gt;size();<sp/>j++)</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*secondaries)[j]-&gt;GetDefinition()-&gt;GetParticleType()<sp/><sp/><sp/><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nucleus&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(*secondaries)[j]-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;proton&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Ions*<sp/>SecondIonsType<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">G4Ions*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>((*secondaries)[j]-&gt;GetDefinition());</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>IZAdaughter<sp/>=<sp/>10000<sp/>*<sp/>SecondIonsType-&gt;GetAtomicNumber()<sp/>+<sp/>10<sp/>*<sp/>SecondIonsType-&gt;GetAtomicMass()<sp/>+<sp/>SecondIonsType-&gt;GetIsomerLevel();</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;<ref refid="class_run_1abce51991634ccd5a2061c2efb1c2a18e" kindref="member">ParticleCount</ref>(IZAdaughter,<sp/>+1,<sp/>(<ref refid="class_t_m_x_material" kindref="compound">TMXMaterial</ref>*)theStep-&gt;GetPreStepPoint()-&gt;GetMaterial());</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::ManagePrimaryProtonEscape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(theStep-&gt;GetTrack()-&gt;GetTrackID()<sp/>==<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theStep-&gt;GetTrack()-&gt;GetParticleDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;proton&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsEscapingTarget())<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddNprimaryEscape(1);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(28,<sp/>log10(KineticEnergy_eV(theStep)));</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1923"><highlight class="comment">void<sp/>SteppingAction::k_initialization(const<sp/>G4Step*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="1924"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Score<sp/>neutron<sp/>birth<sp/>for<sp/>neutron<sp/>counting</highlight></codeline>
<codeline lineno="1925"><highlight class="comment"><sp/><sp/><sp/><sp/>if(theStep-&gt;GetTrack()</highlight></codeline>
<codeline lineno="1926"><highlight class="comment"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()</highlight></codeline>
<codeline lineno="1927"><highlight class="comment"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/>&quot;neutron&quot;</highlight></codeline>
<codeline lineno="1928"><highlight class="comment"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetCurrentStepNumber()<sp/>==<sp/>1</highlight></codeline>
<codeline lineno="1929"><highlight class="comment"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Track<sp/>quantities</highlight></codeline>
<codeline lineno="1931"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>energyK<sp/>=<sp/>KineticEnergy_eV(theStep);</highlight></codeline>
<codeline lineno="1932"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>StepLength<sp/>=<sp/>theStep-&gt;GetStepLength()/cm;<sp/>//<sp/>Length<sp/>of<sp/>the<sp/>step<sp/>in<sp/>cm</highlight></codeline>
<codeline lineno="1933"><highlight class="comment"></highlight></codeline>
<codeline lineno="1934"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>PreStep<sp/>quantities</highlight></codeline>
<codeline lineno="1935"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>PrePos<sp/><sp/><sp/>=<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetPosition();</highlight></codeline>
<codeline lineno="1936"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>PreMom<sp/><sp/><sp/>=<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetMomentumDirection();</highlight></codeline>
<codeline lineno="1937"><highlight class="comment"></highlight></codeline>
<codeline lineno="1938"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Store<sp/>quantities<sp/>at<sp/>birth</highlight></codeline>
<codeline lineno="1939"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEnergyAtBirth<sp/>=<sp/>energyK;<sp/><sp/><sp/>//<sp/>Store<sp/>kinetic<sp/>energy<sp/>at<sp/>birth</highlight></codeline>
<codeline lineno="1940"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPosAtBirth<sp/>=<sp/>PrePos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Store<sp/>position<sp/>at<sp/>birth</highlight></codeline>
<codeline lineno="1941"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fBirthTime<sp/>=<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetGlobalTime()/s;<sp/>//<sp/>Store<sp/>time<sp/>at<sp/>birth</highlight></codeline>
<codeline lineno="1942"><highlight class="comment"></highlight></codeline>
<codeline lineno="1943"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(theStep-&gt;GetTrack()-&gt;GetParentID()<sp/>==<sp/>0)<sp/>{<sp/>//<sp/>If<sp/>birth<sp/>of<sp/>a<sp/>source<sp/>neutron<sp/>generated<sp/>by<sp/>primaryGenerator<sp/>=&gt;<sp/>generation<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1944"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScoreNeutronGeneration(0,<sp/>1);</highlight></codeline>
<codeline lineno="1945"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillHistoSourceN(fEnergyAtBirth,<sp/>fPosAtBirth,<sp/>energyK,<sp/>PrePos,<sp/>PreMom,<sp/>1);</highlight></codeline>
<codeline lineno="1946"><highlight class="comment"></highlight></codeline>
<codeline lineno="1947"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>MCNP<sp/>keff<sp/>estimators</highlight></codeline>
<codeline lineno="1948"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;Add_NsourceNeutronPerEvent(1);<sp/>//<sp/>Add<sp/>1<sp/>more<sp/>source<sp/>neutron<sp/>in<sp/>this<sp/>cycle<sp/>(=<sp/>event)</highlight></codeline>
<codeline lineno="1949"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLengthBetweenCollision<sp/>=<sp/>StepLength;<sp/>//<sp/>Initialize<sp/>stepLength<sp/>accumulator</highlight></codeline>
<codeline lineno="1950"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1952"><highlight class="comment"></highlight></codeline>
<codeline lineno="1953"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Manage<sp/>status<sp/>of<sp/>neutrons<sp/>and<sp/>generation<sp/>number</highlight></codeline>
<codeline lineno="1954"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(<sp/>theStep-&gt;GetTrack()</highlight></codeline>
<codeline lineno="1955"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetParentID()<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="1956"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetCurrentStepNumber()==1<sp/>)<sp/>{<sp/>//<sp/>New<sp/>event<sp/>-&gt;<sp/>Initialization<sp/>of<sp/>variables<sp/>for<sp/>k<sp/>calculation</highlight></codeline>
<codeline lineno="1957"><highlight class="comment"></highlight></codeline>
<codeline lineno="1958"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TMXOption::IsKeffCalculation(p-&gt;int_Option)<sp/>||<sp/>!p-&gt;ExtSourcePath.empty()<sp/>)<sp/>{<sp/>fIsSourceNeutron<sp/>=<sp/>false;<sp/>}<sp/>//<sp/>No<sp/>neutrons<sp/>coming<sp/>from<sp/>an<sp/>external<sp/>source<sp/>in<sp/>keff<sp/>calculation</highlight></codeline>
<codeline lineno="1959"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{<sp/>fIsSourceNeutron<sp/>=<sp/>true;<sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vStatus_secondaries.clear();</highlight></codeline>
<codeline lineno="1961"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_NeutronGeneration.clear();</highlight></codeline>
<codeline lineno="1962"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1963"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(theStep-&gt;GetTrack()</highlight></codeline>
<codeline lineno="1964"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetCurrentStepNumber()==1)<sp/>//<sp/>New<sp/>particle<sp/>birth<sp/>(not<sp/>a<sp/>primary)</highlight></codeline>
<codeline lineno="1965"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!TMXOption::IsKeffCalculation(p-&gt;int_Option))<sp/>{<sp/>//<sp/>if<sp/>it<sp/>is<sp/>not<sp/>a<sp/>keff<sp/>calculation</highlight></codeline>
<codeline lineno="1967"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>status<sp/>is<sp/>saved<sp/>in<sp/>the<sp/>vector<sp/>to<sp/>be<sp/>deleted<sp/>after<sp/>reading</highlight></codeline>
<codeline lineno="1968"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fIsSourceNeutron<sp/>=<sp/>vStatus_secondaries[vStatus_secondaries.size()-1];</highlight></codeline>
<codeline lineno="1969"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vStatus_secondaries.pop_back();</highlight></codeline>
<codeline lineno="1970"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="comment"></highlight></codeline>
<codeline lineno="1972"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>condition<sp/>commented<sp/>in<sp/>april<sp/>2021<sp/>should<sp/>be<sp/>uncommented</highlight></codeline>
<codeline lineno="1973"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4String<sp/>particleName<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName();</highlight></codeline>
<codeline lineno="1974"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>(!TMXOption::IsSourceNeutronEADefinition(p-&gt;int_Option)<sp/>&amp;&amp;<sp/>particleName<sp/>==<sp/>&quot;neutron&quot;<sp/>&amp;&amp;<sp/>!IsTargetRegion(fPhysicalVolumeNumber))//<sp/>if<sp/>a<sp/>neutron<sp/>is<sp/>generated<sp/>outside<sp/>the<sp/>target<sp/>(e.g.<sp/>in<sp/>the<sp/>beam<sp/>window)<sp/>and<sp/>the<sp/>definition<sp/>of<sp/>source<sp/>neutron<sp/>is<sp/>not<sp/>the<sp/>Energy<sp/>Amplifier&apos;s<sp/>definition</highlight></codeline>
<codeline lineno="1975"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/>TMXOption::IsKeffCalculation(p-&gt;int_Option)<sp/>//<sp/>or<sp/>if<sp/>it<sp/>is<sp/>a<sp/>keff<sp/>calculation</highlight></codeline>
<codeline lineno="1976"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(TMXOption::IsSourceNeutronEADefinition(p-&gt;int_Option)<sp/>&amp;&amp;<sp/>particleName<sp/>==<sp/>&quot;neutron&quot;<sp/>&amp;&amp;<sp/>KineticEnergy_eV(theStep)<sp/>&lt;<sp/>2E7)<sp/>//<sp/>or<sp/>old<sp/>definition<sp/>of<sp/>source<sp/>neutrons<sp/>(Energy<sp/>Amplifier<sp/>1995):<sp/>From<sp/>neutron<sp/>with<sp/>E<sp/>&gt;<sp/>20<sp/>MeV<sp/>and<sp/>E_second_neutron<sp/>at<sp/>birth<sp/>&lt;<sp/>20<sp/>MeV</highlight></codeline>
<codeline lineno="1977"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1978"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(TMXOption::IsKeffCalculation(p-&gt;int_Option))<sp/>//if<sp/>it<sp/>is<sp/>a<sp/>keff<sp/>calculation</highlight></codeline>
<codeline lineno="1979"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>status<sp/>is<sp/>changed<sp/>whatever<sp/>the<sp/>particle</highlight></codeline>
<codeline lineno="1980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>it<sp/>is<sp/>a<sp/>neutron,<sp/>the<sp/>source<sp/>neutron<sp/>is<sp/>scored</highlight></codeline>
<codeline lineno="1981"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>It<sp/>should<sp/>be<sp/>tested</highlight></codeline>
<codeline lineno="1983"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>fIsSourceNeutron<sp/>//<sp/>The<sp/>particle<sp/>is<sp/>still<sp/>flagged<sp/>in<sp/>the<sp/>target<sp/>(never<sp/>escaped)</highlight></codeline>
<codeline lineno="1984"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()==&quot;neutron&quot;)<sp/>//<sp/>it<sp/>is<sp/>a<sp/>neutron</highlight></codeline>
<codeline lineno="1985"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1986"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScoreNeutronGeneration(0,<sp/>1);<sp/>//<sp/>Score<sp/>1<sp/>source<sp/>neutron<sp/>(generation<sp/>0)</highlight></codeline>
<codeline lineno="1987"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>postPos<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition();</highlight></codeline>
<codeline lineno="1988"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>postMom<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetMomentumDirection();</highlight></codeline>
<codeline lineno="1989"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillHistoSourceN(fEnergyAtBirth,<sp/>fPosAtBirth,<sp/>KineticEnergy_eV(theStep),<sp/>postPos,<sp/>postMom,<sp/>1);<sp/>//<sp/>Score<sp/>position<sp/>/<sp/>energy<sp/>of<sp/>1<sp/>source<sp/>neutron</highlight></codeline>
<codeline lineno="1990"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1991"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fIsSourceNeutron<sp/>=<sp/>false;<sp/>//<sp/>The<sp/>particle<sp/>and<sp/>its<sp/>progeny<sp/>is<sp/>flagged<sp/>as<sp/>it<sp/>has<sp/>escaped<sp/>the<sp/>target</highlight></codeline>
<codeline lineno="1992"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1993"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1994"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1995"><highlight class="comment"></highlight></codeline>
<codeline lineno="1996"><highlight class="comment">void<sp/>SteppingAction::InitializeNeutronGenerationFlag(const<sp/>G4Step<sp/>*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="comment"><sp/><sp/><sp/><sp/>if(theStep-&gt;GetTrack()</highlight></codeline>
<codeline lineno="1998"><highlight class="comment"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()</highlight></codeline>
<codeline lineno="1999"><highlight class="comment"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/>&quot;neutron&quot;</highlight></codeline>
<codeline lineno="2000"><highlight class="comment"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetCurrentStepNumber()<sp/>==<sp/>1)<sp/>{<sp/>//<sp/>If<sp/>first<sp/>step<sp/>of<sp/>a<sp/>neutron<sp/>track</highlight></codeline>
<codeline lineno="2001"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(TMXOption::IsMultiplicationKilled(p-&gt;int_Option)<sp/>//<sp/>If<sp/>the<sp/>multiplication<sp/>is<sp/>killed</highlight></codeline>
<codeline lineno="2002"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>theStep-&gt;GetTrack()-&gt;GetParentID()<sp/>==<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>or<sp/>if<sp/>it<sp/>is<sp/>a<sp/>primary<sp/>neutron<sp/>generated<sp/>by<sp/>the<sp/>primaryGenerator<sp/>=&gt;<sp/>generation<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="2003"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fNeutronGeneration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2004"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2005"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if(<sp/>theStep-&gt;GetTrack()-&gt;GetParentID()<sp/>!=<sp/>0)<sp/>{<sp/>//<sp/>else<sp/>if<sp/>it<sp/>is<sp/>not<sp/>a<sp/>primary<sp/>neutron</highlight></codeline>
<codeline lineno="2006"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>status<sp/>is<sp/>saved<sp/>in<sp/>the<sp/>vector;<sp/>to<sp/>be<sp/>deleted<sp/>after<sp/>reading</highlight></codeline>
<codeline lineno="2007"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fNeutronGeneration<sp/>=<sp/>v_NeutronGeneration[v_NeutronGeneration.size()-1];</highlight></codeline>
<codeline lineno="2008"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_NeutronGeneration.pop_back();</highlight></codeline>
<codeline lineno="2009"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2010"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2011"><highlight class="comment">}</highlight></codeline>
<codeline lineno="2012"><highlight class="comment"></highlight></codeline>
<codeline lineno="2013"><highlight class="comment">void<sp/>SteppingAction::FillHistoSourceN(double<sp/>energyAtBirth,<sp/>G4ThreeVector&amp;<sp/>posAtBirth,<sp/>double<sp/>energyAtCounting,<sp/>G4ThreeVector&amp;<sp/>posAtCounting,<sp/>G4ThreeVector&amp;<sp/>dirAtCounting,<sp/>int<sp/>nbNeutrons)<sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2015"><highlight class="comment"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(16,<sp/>log10(energyAtBirth),<sp/>nbNeutrons);</highlight></codeline>
<codeline lineno="2016"><highlight class="comment"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(17,<sp/>log10(energyAtCounting),<sp/>nbNeutrons);</highlight></codeline>
<codeline lineno="2017"><highlight class="comment"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(32,<sp/>posAtCounting.x()/mm,<sp/>posAtCounting.y()/mm,<sp/>nbNeutrons);</highlight></codeline>
<codeline lineno="2018"><highlight class="comment"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(33,<sp/>posAtCounting.x()/mm,<sp/>posAtCounting.z()/mm,<sp/>nbNeutrons);</highlight></codeline>
<codeline lineno="2019"><highlight class="comment"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(34,<sp/>posAtBirth.x()/mm,<sp/>posAtBirth.y()/mm,<sp/>nbNeutrons);</highlight></codeline>
<codeline lineno="2020"><highlight class="comment"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(35,<sp/>posAtBirth.x()/mm,<sp/>posAtBirth.z()/mm,<sp/>nbNeutrons);</highlight></codeline>
<codeline lineno="2021"><highlight class="comment"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(36,<sp/>dirAtCounting.unit().z(),<sp/>log10(energyAtCounting),<sp/>nbNeutrons);</highlight></codeline>
<codeline lineno="2022"><highlight class="comment"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(37,<sp/>std::acos(dirAtCounting.unit().z())*<sp/>360.0<sp/>/<sp/>twopi,<sp/>log10(energyAtCounting),<sp/>nbNeutrons);</highlight></codeline>
<codeline lineno="2023"><highlight class="comment">}</highlight></codeline>
<codeline lineno="2024"><highlight class="comment"></highlight></codeline>
<codeline lineno="2025"><highlight class="comment">void<sp/>SteppingAction::CountN0_leavingTarget(const<sp/>G4Step<sp/>*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Neutrons<sp/>born<sp/>in<sp/>the<sp/>target<sp/>and<sp/>leaving<sp/>the<sp/>target<sp/>tube<sp/>are<sp/>counted<sp/>as<sp/>N0</highlight></codeline>
<codeline lineno="2027"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Or<sp/>old<sp/>definition<sp/>of<sp/>source<sp/>neutrons<sp/>(Energy<sp/>Amplifier<sp/>1995):<sp/>E_neutron<sp/>&lt;<sp/>20<sp/>MeV</highlight></codeline>
<codeline lineno="2028"><highlight class="comment"><sp/><sp/><sp/><sp/>if(<sp/>(<sp/>(!TMXOption::IsSourceNeutronEADefinition(p-&gt;int_Option)<sp/>&amp;&amp;<sp/>!TMXOption::IsKeffCalculation(p-&gt;int_Option)<sp/>&amp;&amp;<sp/>IsEscapingTarget())</highlight></codeline>
<codeline lineno="2029"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(TMXOption::IsSourceNeutronEADefinition(p-&gt;int_Option)<sp/>&amp;&amp;<sp/>KineticEnergy_eV(theStep)<sp/>&lt;<sp/>2E7)<sp/>)</highlight></codeline>
<codeline lineno="2030"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>fIsSourceNeutron<sp/>//<sp/>The<sp/>neutron<sp/>is<sp/>still<sp/>flagged<sp/>in<sp/>the<sp/>target<sp/>(never<sp/>escaped)</highlight></codeline>
<codeline lineno="2031"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()==&quot;neutron&quot;)<sp/>//<sp/>it<sp/>is<sp/>a<sp/>neutron</highlight></codeline>
<codeline lineno="2032"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScoreNeutronGeneration(0,<sp/>1);<sp/>//<sp/>Score<sp/>1<sp/>source<sp/>neutron<sp/>(generation<sp/>0)</highlight></codeline>
<codeline lineno="2034"><highlight class="comment"></highlight></codeline>
<codeline lineno="2035"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>postPos<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition();</highlight></codeline>
<codeline lineno="2036"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>postMom<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetMomentumDirection();</highlight></codeline>
<codeline lineno="2037"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillHistoSourceN(fEnergyAtBirth,<sp/>fPosAtBirth,<sp/>KineticEnergy_eV(theStep),<sp/>postPos,<sp/>postMom,<sp/>1);<sp/>//<sp/>Score<sp/>position<sp/>/<sp/>energy<sp/>of<sp/>1<sp/>source<sp/>neutron</highlight></codeline>
<codeline lineno="2038"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fIsSourceNeutron<sp/>=<sp/>false;<sp/>//<sp/>The<sp/>neutron<sp/>has<sp/>escaped<sp/>the<sp/>target</highlight></codeline>
<codeline lineno="2039"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2040"><highlight class="comment">}</highlight></codeline>
<codeline lineno="2041"><highlight class="comment"></highlight></codeline>
<codeline lineno="2042"><highlight class="comment">void<sp/>SteppingAction::CountN0_FromPrimaries(const<sp/>G4Step*<sp/>theStep,<sp/>double<sp/>SecondEnergy,<sp/>G4ThreeVector&amp;<sp/>SecondPos,<sp/>G4ThreeVector&amp;<sp/>SecondMom)<sp/>{</highlight></codeline>
<codeline lineno="2043"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>particleName<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName();</highlight></codeline>
<codeline lineno="2044"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>ID_track<sp/>=<sp/><sp/>theStep-&gt;GetTrack()-&gt;GetTrackID();</highlight></codeline>
<codeline lineno="2045"><highlight class="comment"><sp/><sp/><sp/><sp/>if(<sp/>(<sp/>(!TMXOption::IsSourceNeutronEADefinition(p-&gt;int_Option)<sp/>&amp;&amp;<sp/>!IsTargetRegion(fPostPhysicalVolumeNumber))<sp/>//<sp/>if<sp/>a<sp/>source<sp/>neutron<sp/>is<sp/>generated<sp/>by<sp/>a<sp/>source<sp/>proton<sp/>outside<sp/>the<sp/>target<sp/>(e.g.<sp/>in<sp/>the<sp/>beam<sp/>window)</highlight></codeline>
<codeline lineno="2046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(TMXOption::IsSourceNeutronEADefinition(p-&gt;int_Option)<sp/>&amp;&amp;<sp/>SecondEnergy<sp/>&lt;<sp/>2E7))<sp/>//<sp/>if<sp/>a<sp/>source<sp/>neutron<sp/>is<sp/>generated<sp/>by<sp/>a<sp/>source<sp/>proton<sp/>outside<sp/>the<sp/>target<sp/>(e.g.<sp/>in<sp/>the<sp/>beam<sp/>window)</highlight></codeline>
<codeline lineno="2047"><highlight class="comment"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>IsPrimaryProton(particleName,<sp/>ID_track))<sp/>{<sp/>//<sp/>if<sp/>it<sp/>is<sp/>a<sp/>primary<sp/>proton</highlight></codeline>
<codeline lineno="2048"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScoreNeutronGeneration(0,<sp/>1);<sp/><sp/>//<sp/>Score<sp/>1<sp/>source<sp/>neutron<sp/>(generation<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="2049"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillHistoSourceN(SecondEnergy,<sp/>SecondPos,<sp/>SecondEnergy,<sp/>SecondPos,<sp/>SecondMom,<sp/>1);<sp/><sp/>//<sp/>The<sp/>source<sp/>neutron<sp/>is<sp/>scored<sp/>and<sp/>counted<sp/>thus<sp/>the<sp/>position<sp/>is<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="2050"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2051"><highlight class="comment">}</highlight></codeline>
<codeline lineno="2052"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::CountNeutronSource_DefEAP(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4double<sp/>kinEnergyThreshold<sp/>=<sp/>19.7e6;<sp/></highlight><highlight class="comment">//<sp/>eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TMXOption::IsSourceNeutronEADefinition(p-&gt;int_Option)<sp/>&amp;&amp;<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>theStep-&gt;GetPreStepPoint()-&gt;GetKineticEnergy()/eV<sp/>&gt;<sp/>kinEnergyThreshold</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetKineticEnergy()/eV<sp/>&lt;<sp/>kinEnergyThreshold</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetKineticEnergy()/eV<sp/>!=<sp/>0.</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Collision<sp/>reach<sp/>the<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EAP<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetKineticEnergy()/eV<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetKineticEnergy()/eV<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>kinEnergyThreshold</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*FillNtupleNeutronSource(theStep-&gt;GetPostStepPoint()-&gt;GetPosition(),</highlight></codeline>
<codeline lineno="2068"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetPostStepPoint()-&gt;GetMomentumDirection(),</highlight></codeline>
<codeline lineno="2069"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetPostStepPoint()-&gt;GetKineticEnergy()/eV</highlight></codeline>
<codeline lineno="2070"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Count<sp/>EAP80<sp/>collision&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theStep-&gt;GetPreStepPoint()-&gt;GetKineticEnergy()/eV<sp/>&gt;<sp/>kinEnergyThreshold)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Production<sp/>of<sp/>neutrons<sp/>from<sp/>any<sp/>particles<sp/>with<sp/>an<sp/>energy<sp/>higher<sp/>than<sp/>19.7<sp/>MeV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4String<sp/>processName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep())<sp/>{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processName<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep()-&gt;GetProcessName();</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal"><sp/>||<sp/>processName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutronInelastic&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>processName<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>G4Track*&gt;<sp/>*secondaries<sp/>=<sp/>theStep-&gt;GetSecondaryInCurrentStep();</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;<sp/>i&lt;(G4int)secondaries-&gt;size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>SecondEnergy<sp/>=<sp/>(*secondaries)[i]-&gt;GetKineticEnergy()/eV;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*secondaries)[i]-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>SecondEnergy<sp/>&lt;<sp/>kinEnergyThreshold)<sp/>{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*FillNtupleNeutronSource(</highlight></codeline>
<codeline lineno="2084"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*secondaries)[i]-&gt;GetPosition(),</highlight></codeline>
<codeline lineno="2085"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*secondaries)[i]-&gt;GetMomentumDirection(),</highlight></codeline>
<codeline lineno="2086"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SecondEnergy</highlight></codeline>
<codeline lineno="2087"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Count<sp/>EAP80<sp/>process&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::CountNeutronGeneration_FromInelastic(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MotherNeutronGeneration,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nb_inelastic)<sp/>{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Counting<sp/>of<sp/>additionnal<sp/>neutrons<sp/>coming<sp/>from<sp/>inelastic<sp/>reaction<sp/>(n,<sp/>Xn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nb_inelastic<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>fIsSourceNeutron<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Neutron<sp/>is<sp/>counted<sp/>only<sp/>if<sp/>it<sp/>exits<sp/>the<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Source<sp/>neutrons<sp/>definition<sp/>1:<sp/>The<sp/>generation<sp/>of<sp/>neutrons<sp/>is<sp/>not<sp/>changed<sp/>after<sp/>(n,<sp/>Xn)<sp/>reactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(TMXOption::IsSrcNeutronDefinitionWithNxN(p-&gt;int_Option))<sp/>{<sp/>ScoreNeutronGeneration(MotherNeutronGeneration,<sp/>Nb_inelastic-1);<sp/>}</highlight><highlight class="comment">//<sp/>+Nb_inelastic-1<sp/>neutron<sp/>from<sp/>generation<sp/>MotherNeutronGeneration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>The<sp/>generation<sp/>of<sp/>neutrons<sp/>is<sp/>changed<sp/>after<sp/>(n,<sp/>Xn)<sp/>reactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScoreNeutronGeneration(MotherNeutronGeneration+1,<sp/>Nb_inelastic);<sp/>}</highlight><highlight class="comment">//<sp/>+Nb_inelastic<sp/>neutron<sp/>for<sp/>generation<sp/>MotherNeutronGeneration+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::CountNeutronGeneration_FromFission(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NeutronGeneration)<sp/>{</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Secondary<sp/>neutron<sp/>is<sp/>counted<sp/>only<sp/>if<sp/>it<sp/>is<sp/>not<sp/>a<sp/>source<sp/>neutron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NeutronGeneration<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>fIsSourceNeutron<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{<sp/>ScoreNeutronGeneration(NeutronGeneration,<sp/>1);<sp/>}<sp/></highlight><highlight class="comment">//<sp/>+1<sp/>neutron<sp/>from<sp/>generation<sp/>fNeutronGeneration+1<sp/>(old<sp/>definition<sp/>(Energy<sp/>Amplifier<sp/>1995))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::ScoreNeutronGeneration(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NeutronGeneration,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NeutronNumber)<sp/>{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>Nf<sp/>+=<sp/>NeutronNumber;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>fEventAction-&gt;SetNf(Nf);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>fEventAction-&gt;AddNbNeutronPerGeneration(NeutronGeneration,<sp/>NeutronNumber);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(15,<sp/>NeutronGeneration,<sp/>NeutronNumber);<sp/></highlight><highlight class="comment">//<sp/>+NeutronNumber<sp/>neutron(s)<sp/>from<sp/>generation<sp/>NeutronGeneration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>SteppingAction::MCNPkeffInitialize(const<sp/>G4Step*<sp/>theStep)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Score<sp/>neutron<sp/>birth<sp/>for<sp/>neutron<sp/>counting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(theStep-&gt;GetTrack()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetParentID()<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/>&quot;neutron&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetCurrentStepNumber()<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>MCNP<sp/>keff<sp/>estimators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;Add_NsourceNeutronPerEvent(1);<sp/>//<sp/>Add<sp/>1<sp/>more<sp/>source<sp/>neutron<sp/>in<sp/>this<sp/>cycle<sp/>(=<sp/>event)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLengthBetweenCollision<sp/>=<sp/>theStep-&gt;GetStepLength()/cm;<sp/>//<sp/>Initialize<sp/>stepLength<sp/>accumulator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Scoring<sp/>tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="2171"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::ManageNeutronScoring(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nNeutrons)<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetTrack()</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>required<sp/>quantites<sp/>from<sp/>the<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4StepStatus<sp/>PostStatus<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetStepStatus();<sp/></highlight><highlight class="comment">//<sp/>Status<sp/>of<sp/>the<sp/>post-step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/><sp/><sp/><sp/><sp/><sp/>PostPos<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition();</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/><sp/><sp/><sp/>PostGlobalTime<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetGlobalTime()/s;<sp/></highlight><highlight class="comment">//<sp/>Time<sp/>since<sp/>the<sp/>event<sp/>is<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4String<sp/>processName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep())</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processName<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep()-&gt;GetProcessName();</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>Neutron<sp/>birth<sp/>(initialisation<sp/>and<sp/>counting<sp/>of<sp/>neutrons)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ManageNeutronBirth(theStep);<sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>histograms/Ntuples<sp/>and<sp/>manage<sp/>neutron<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>neutrons<sp/>as<sp/>a<sp/>function<sp/>of<sp/>time<sp/>in<sp/>4<sp/>different<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>log10(PostGlobalTime)<sp/>&gt;<sp/>log10(f_tBin)<sp/>+<sp/>fDeltat<sp/>)<sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>time<sp/>reach<sp/>another<sp/>bin<sp/>of<sp/>the<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillNdensityVStimeHisto(PostGlobalTime);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Definition<sp/>of<sp/>the<sp/>neutron<sp/>scoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>for<sp/>fission,<sp/>capture<sp/>or<sp/>inelastic<sp/>reactions</highlight></codeline>
<codeline lineno="2195"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>neutron<sp/>mean<sp/>free<sp/>(or<sp/>GetMeanFreePath)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(processName==&quot;nFission&quot;<sp/>||<sp/>processName==&quot;nCapture&quot;<sp/>||<sp/>processName==&quot;neutronInelastic&quot;<sp/>||<sp/>processName==&quot;hadElastic&quot;)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Scoring<sp/>of<sp/>fission,<sp/>capture<sp/>or<sp/>inelastic<sp/>reaction</highlight></codeline>
<codeline lineno="2204"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processName==</highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ManageFission(theStep);}</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processName==</highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!TMXOption::IsKeffCalculation(p-&gt;int_Option))<sp/>{</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ManageCapture(theStep);}</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processName==</highlight><highlight class="stringliteral">&quot;neutronInelastic&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ManageNInelastic(theStep,<sp/>nNeutrons);}</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ManageNeutronEscape(theStep);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Energy<sp/>vs<sp/>Time<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Fluence<sp/>Energy<sp/>spectrum</highlight></codeline>
<codeline lineno="2217"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillHistoTimeEnergyFlux(theStep,<sp/>PostStatus<sp/>==<sp/>fGeomBoundary,<sp/>nNeutrons);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::ManageNeutronBirth(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetTrack()-&gt;GetCurrentStepNumber()<sp/>==<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>If<sp/>first<sp/>step<sp/>of<sp/>the<sp/>neutron<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PreStep<sp/>quantities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>PrePos<sp/><sp/><sp/>=<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetPosition();</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>PreGlobalTime<sp/>=<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetGlobalTime()/s;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillNtuple1(PrePos.x()/mm,<sp/>PrePos.y()/mm,<sp/>PrePos.z()/mm,<sp/>-1,<sp/>fPhysicalVolumeNumber,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>theStep-&gt;GetTrack()-&gt;GetParentID(),<sp/>0);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillNdensityVStimeHisto(PreGlobalTime);<sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>number<sp/>of<sp/>neutrons<sp/>as<sp/>a<sp/>function<sp/>of<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::ManageFission(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instantiate<sp/>the<sp/>analysis<sp/>manager<sp/>for<sp/>the<sp/>scoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>required<sp/>quantites<sp/>from<sp/>the<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Track*<sp/>theTrack<sp/>=<sp/>theStep-&gt;GetTrack();</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>G4int<sp/>ID_track<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theTrack)<sp/>{ID_track<sp/>=<sp/>theTrack-&gt;GetTrackID();}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>StepLength<sp/>=<sp/>theStep-&gt;GetStepLength()/cm;<sp/></highlight><highlight class="comment">//<sp/>Length<sp/>of<sp/>the<sp/>step<sp/>in<sp/>cm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/><sp/><sp/><sp/>energyK<sp/>=<sp/>KineticEnergy_eV(theStep);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tot_Edep<sp/>=<sp/>theStep-&gt;GetTotalEnergyDeposit()/eV;<sp/></highlight><highlight class="comment">//<sp/>Total<sp/>Energy<sp/>Deposit<sp/>in<sp/>this<sp/>step<sp/>in<sp/>eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>PostGlobalTime<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetGlobalTime()/s;<sp/></highlight><highlight class="comment">//<sp/>Time<sp/>since<sp/>the<sp/>event<sp/>is<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ThreeVector<sp/><sp/><sp/>PostPos<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition();<sp/></highlight><highlight class="comment">//<sp/>Position<sp/>of<sp/>the<sp/>postStep<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>Threshold_promtNeutrons<sp/>=<sp/>40*ms;<sp/></highlight><highlight class="comment">//<sp/>WARNING:<sp/>hard-coded<sp/>value,<sp/>to<sp/>discriminate<sp/>between<sp/>prompt<sp/>and<sp/>delayed<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>a<sp/>fission<sp/>at<sp/>fID_firstfission<sp/>to<sp/>estimate<sp/>energy<sp/>released<sp/>by<sp/>fission<sp/>and<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!fFromFission<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFromFission<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fID_firstfission<sp/>=<sp/>ID_track;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEperFission<sp/>=<sp/>Tot_Edep;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fNfission_fromFission<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>++fNfission_fromFission;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>number<sp/>of<sp/>fissions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>++Nfission;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/>fEventAction-&gt;AddFission(1);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fNeutronGeneration<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is<sp/>a<sp/>source<sp/>neutron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddN0fission(1);<sp/></highlight><highlight class="comment">//<sp/>Increase<sp/>number<sp/>of<sp/>fissions<sp/>due<sp/>to<sp/>source<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(38,<sp/>PostPos.x(),<sp/>PostPos.y());<sp/></highlight><highlight class="comment">//<sp/>Score<sp/>death<sp/>position<sp/>of<sp/>source<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(45,<sp/>PostPos.x(),<sp/>PostPos.z());<sp/></highlight><highlight class="comment">//<sp/>Score<sp/>death<sp/>position<sp/>of<sp/>source<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>of<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(26,<sp/>std::log10(PostGlobalTime),<sp/>std::log10(Tot_Edep));<sp/></highlight><highlight class="comment">//<sp/>Score<sp/>energy<sp/>and<sp/>time<sp/>for<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>tot<sp/>for<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>TotE_fission<sp/>=<sp/>Tot_Edep;</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>fission<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>G4Track*&gt;<sp/>*secondaries<sp/>=<sp/>theStep-&gt;GetSecondaryInCurrentStep();</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;<sp/>i&lt;(G4int)secondaries-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4String<sp/>secondary_particleName<sp/>=<sp/>(*secondaries)[i]-&gt;GetDefinition()-&gt;GetParticleName();</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secondary_particleName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Nnfission;<sp/><sp/></highlight><highlight class="comment">//<sp/>Increase<sp/>the<sp/>counter<sp/>of<sp/>neutrons<sp/>coming<sp/>from<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*secondaries)[i]-&gt;GetGlobalTime()/s<sp/>-<sp/>PostGlobalTime<sp/>&lt;<sp/>Threshold_promtNeutrons)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>prompt<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPromptN<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>prompt<sp/>neutron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(22,<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s),<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV));<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>fission<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPromptN<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>not<sp/>a<sp/>prompt<sp/>neutron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(28,<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s),<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV));<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>fission<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secondary_particleName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;gamma&quot;</highlight><highlight class="normal">)<sp/>{<sp/>analysisManager-&gt;FillH2(23,<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s),<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV));}<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>fission<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secondary_particleName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;e-&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/>{<sp/>analysisManager-&gt;FillH2(24,<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s),<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV));}<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>fission<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>analysisManager-&gt;FillH2(25,<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s),<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV));}<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>fission<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TotE_fission<sp/>+=<sp/>(*secondaries)[i]-&gt;GetKineticEnergy()/eV;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(27,<sp/>std::log10(PostGlobalTime),<sp/>std::log10(TotE_fission));<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>fission<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>fEventAction-&gt;Setnu(Nnfission/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Nfission);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/>fEventAction-&gt;SetFissionN(Nnfission);</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Isotope*<sp/>target<sp/>=<sp/>GetTargetIsotope(theStep-&gt;GetPostStepPoint());</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target-&gt;GetName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U235&quot;</highlight><highlight class="normal">)<sp/>{<sp/>fEventAction-&gt;AddNabsU5(1.);}<sp/><sp/></highlight><highlight class="comment">//<sp/>WARNING:<sp/>hard-coded<sp/>value<sp/>related<sp/>to<sp/>the<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scoring<sp/>of<sp/>transmutation<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>IsSpentFuel(fPhysicalVolumeNumber)<sp/>)<sp/>{FillNtuple2(PostPos.x()/mm,<sp/>PostPos.y()/mm,<sp/>PostPos.z()/mm,<sp/>energyK,<sp/>fPhysicalVolumeNumber,<sp/>0,<sp/>StepLength,<sp/>fmap_Region_volume[fPhysicalVolumeNumber],<sp/>target-&gt;GetN(),<sp/>target-&gt;GetZ());}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>multiplication<sp/>is<sp/>not<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TMXOption::IsMultiplicationKilled(p-&gt;int_Option))</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theTrack-&gt;SetTrackStatus(fKillTrackAndSecondaries);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Score<sp/>fission<sp/>in<sp/>ntuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>FillNtuple1(PostPos.x()/mm,<sp/>PostPos.y()/mm,<sp/>PostPos.z()/mm,<sp/>0,<sp/>fPhysicalVolumeNumber,<sp/>fPhysicalVolumeNumber,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>theStep-&gt;GetTrack()-&gt;GetParentID(),<sp/>0);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::ManageCapture(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>required<sp/>quantites<sp/>from<sp/>the<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>PostPos<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition();<sp/></highlight><highlight class="comment">//<sp/>Position<sp/>of<sp/>the<sp/>postStep<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>StepLength<sp/>=<sp/>theStep-&gt;GetStepLength()/cm;<sp/></highlight><highlight class="comment">//<sp/>Length<sp/>of<sp/>the<sp/>step<sp/>in<sp/>cm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/><sp/><sp/><sp/>energyK<sp/>=<sp/>KineticEnergy_eV(theStep);</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>neutrons<sp/>absorbed<sp/>or<sp/>captured<sp/>by<sp/>U-235<sp/>and<sp/>U-238<sp/>respectively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Isotope*<sp/>target<sp/>=<sp/>GetTargetIsotope(theStep-&gt;GetPostStepPoint());</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(target-&gt;GetName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U235&quot;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">//<sp/>WARNING<sp/>:<sp/>hard<sp/>coded<sp/>value<sp/>related<sp/>to<sp/>the<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddNabsU5(1.);</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(target-&gt;GetName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U238&quot;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">//<sp/>WARNING<sp/>:<sp/>hard<sp/>coded<sp/>value<sp/>related<sp/>to<sp/>the<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddNcapU8(1.);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>neutron<sp/>absorption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/>fEventAction-&gt;AddNabsTot(1);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Score<sp/>death<sp/>position<sp/>of<sp/>source<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fNeutronGeneration<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(38,<sp/>PostPos.x(),<sp/>PostPos.y());</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(45,<sp/>PostPos.x(),<sp/>PostPos.z());</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>sample<sp/>to<sp/>study<sp/>the<sp/>transmutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>IsSpentFuel(fPhysicalVolumeNumber)<sp/>)<sp/>{<sp/>FillNtuple2(PostPos.x()/mm,<sp/>PostPos.y()/mm,<sp/>PostPos.z()/mm,<sp/>energyK,<sp/>0,<sp/>fPhysicalVolumeNumber,<sp/>StepLength,<sp/>fmap_Region_volume[fPhysicalVolumeNumber],<sp/>target-&gt;GetN(),<sp/>target-&gt;GetZ());}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Score<sp/>capture<sp/>in<sp/>ntuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>FillNtuple1(PostPos.x()/mm,<sp/>PostPos.y()/mm,<sp/>PostPos.z()/mm,<sp/>0,<sp/>fPhysicalVolumeNumber,<sp/>0,<sp/>fPhysicalVolumeNumber,<sp/>0,<sp/>0,<sp/>0,<sp/>theStep-&gt;GetTrack()-&gt;GetParentID(),<sp/>0);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::ManageNInelastic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nNeutrons)<sp/>{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>required<sp/>quantites<sp/>from<sp/>the<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>PostPos<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition();<sp/></highlight><highlight class="comment">//<sp/>Position<sp/>of<sp/>the<sp/>postStep<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>StepLength<sp/>=<sp/>theStep-&gt;GetStepLength()/cm;<sp/></highlight><highlight class="comment">//<sp/>Length<sp/>of<sp/>the<sp/>step<sp/>in<sp/>cm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/><sp/><sp/><sp/>energyK<sp/>=<sp/>KineticEnergy_eV(theStep);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/>G4int<sp/>InelasticVol<sp/>=<sp/>0,<sp/>nXnVol<sp/>=<sp/>0,<sp/>nnPrimeVol<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>target<sp/>isotope<sp/>(nucleus<sp/>which<sp/>interacts<sp/>with<sp/>neutron)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Isotope*<sp/>target<sp/>=<sp/>GetTargetIsotope(theStep-&gt;GetPostStepPoint());</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/>nNeutrons<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>number<sp/>of<sp/>secondary<sp/>neutrons<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Counter<sp/>number<sp/>of<sp/>secondary<sp/>neutrons<sp/>from<sp/>inelastic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>G4Track*&gt;<sp/>*secondaries<sp/>=<sp/>theStep-&gt;GetSecondaryInCurrentStep();</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;<sp/>i&lt;(G4int)secondaries-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*secondaries)[i]-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal">)<sp/>{<sp/>++nNeutrons;<sp/>}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nNeutrons<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Neutron<sp/>is<sp/>absorbed<sp/>=&gt;<sp/>usually<sp/>called<sp/>inelastic<sp/>reaction<sp/>(e.g.<sp/>(n,<sp/>alpha)<sp/>reaction)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InelasticVol<sp/>=<sp/>fPhysicalVolumeNumber;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IsSpentFuel(fPhysicalVolumeNumber))<sp/>{<sp/>InelasticVol<sp/>+=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetCopyNo();<sp/>}<sp/>//<sp/>if<sp/>volume<sp/>=<sp/>pSpentFuel<sp/>-&gt;<sp/>element<sp/>to<sp/>be<sp/>transmuted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Death<sp/>position<sp/>of<sp/>source<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fNeutronGeneration<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(38,<sp/>PostPos.x(),<sp/>PostPos.y());</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(45,<sp/>PostPos.x(),<sp/>PostPos.z());</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>sample<sp/>to<sp/>study<sp/>the<sp/>transmutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>IsSpentFuel(fPhysicalVolumeNumber)<sp/>)<sp/>{FillNtuple2(PostPos.x()/mm,<sp/>PostPos.y()/mm,<sp/>PostPos.z()/mm,<sp/>energyK,<sp/>0,<sp/>InelasticVol,<sp/>StepLength,<sp/>fmap_Region_volume[fPhysicalVolumeNumber],<sp/>target-&gt;GetN(),<sp/>target-&gt;GetZ());}</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nNeutrons<sp/>==<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>(n,<sp/>n&apos;)<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnPrimeVol<sp/>=<sp/>fPhysicalVolumeNumber;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IsSpentFuel(fPhysicalVolumeNumber))<sp/>{<sp/>nnPrimeVol<sp/>+=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetCopyNo();<sp/>}<sp/>//<sp/>if<sp/>volume<sp/>=<sp/>pSpentFuel<sp/>-&gt;<sp/>element<sp/>to<sp/>be<sp/>transmuted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>nNeutrons<sp/>&gt;<sp/>1<sp/>=&gt;<sp/>(n,<sp/>Xn)<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nXnVol<sp/>=<sp/>fPhysicalVolumeNumber;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(IsSpentFuel(fPhysicalVolumeNumber))<sp/>{<sp/>nXnVol<sp/>+=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetCopyNo();<sp/>}<sp/>//<sp/>if<sp/>volume<sp/>=<sp/>pSpentFuel<sp/>-&gt;<sp/>element<sp/>to<sp/>be<sp/>transmuted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Death<sp/>position<sp/>of<sp/>source<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fNeutronGeneration<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(38,<sp/>PostPos.x(),<sp/>PostPos.y());</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(45,<sp/>PostPos.x(),<sp/>PostPos.z());</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>sample<sp/>to<sp/>study<sp/>the<sp/>transmutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>IsSpentFuel(fPhysicalVolumeNumber)<sp/>)<sp/>{FillNtuple2(PostPos.x()/mm,<sp/>PostPos.y()/mm,<sp/>PostPos.z()/mm,<sp/>energyK,<sp/>0,<sp/>nXnVol,<sp/>StepLength,<sp/>fmap_Region_volume[fPhysicalVolumeNumber],<sp/>target-&gt;GetN(),<sp/>target-&gt;GetZ());}</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WARNING:<sp/>hard-coded<sp/>values<sp/>to<sp/>count<sp/>the<sp/>absorption/capture<sp/>in<sp/>U-235<sp/>or<sp/>U-238</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nNeutrons<sp/>!=<sp/>1<sp/>&amp;&amp;<sp/>target-&gt;GetName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U235&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>If<sp/>absorption<sp/>in<sp/>U235</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddNabsU5(1.);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nNeutrons<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>target-&gt;GetName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;U238&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>If<sp/>capture<sp/>in<sp/>U235</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddNcapU8(1.);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>neutron<sp/>total<sp/>absorption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nNeutrons<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddNabsTot(1);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Score<sp/>inelastic<sp/>in<sp/>ntuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/>FillNtuple1(PostPos.x()/mm,<sp/>PostPos.y()/mm,<sp/>PostPos.z()/mm,<sp/>0,<sp/>fPhysicalVolumeNumber,<sp/>0,<sp/>0,<sp/>InelasticVol,<sp/>nnPrimeVol,<sp/>nXnVol,<sp/>theStep-&gt;GetTrack()-&gt;GetParentID(),<sp/>0);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::ManageNeutronEscape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theStep-&gt;GetPostStepPoint()-&gt;GetStepStatus()<sp/>==<sp/>fWorldBoundary</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>PrePos<sp/>=<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetPosition();</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillNtuple1(PrePos.x()/mm,<sp/>PrePos.y()/mm,<sp/>PrePos.z()/mm,<sp/>-1,<sp/>fPhysicalVolumeNumber,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>theStep-&gt;GetTrack()-&gt;GetParentID(),<sp/>-1);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Kill<sp/>the<sp/>neutron</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetTrack()-&gt;SetTrackStatus(fStopAndKill);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Isotope*<sp/>SteppingAction::GetTargetIsotope(G4StepPoint*<sp/>thePostPoint)<sp/>{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/>G4VProcess*<sp/>process<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">G4VProcess*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(thePostPoint-&gt;GetProcessDefinedStep());</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/>G4HadronicProcess*<sp/>hproc<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">G4HadronicProcess*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(process);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Isotope*<sp/>target<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hproc)<sp/>target<sp/>=<sp/>hproc-&gt;GetTargetIsotope();</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>target;</highlight></codeline>
<codeline lineno="2430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::FillNtuple1(G4double<sp/>PosX,<sp/>G4double<sp/>PosY,<sp/>G4double<sp/>PosZ,<sp/>G4int<sp/>reasonID,<sp/>G4int<sp/>EveryVol,<sp/>G4int<sp/>FissionVol,<sp/>G4int<sp/>CaptureVol,<sp/>G4int<sp/>InelasticVol,<sp/>G4int<sp/>nnPrimeVol,<sp/>G4int<sp/>nXnVol,<sp/>G4int<sp/>pID,<sp/>G4int<sp/>OutPhysVol)<sp/>{</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(<sp/>0,<sp/>0,PosX);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>0<sp/>PosX<sp/>en<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(<sp/>0,<sp/>1,PosY);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>1<sp/>PosY<sp/>en<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(<sp/>0,<sp/>2,PosZ);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>2<sp/>PosZ<sp/>en<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,<sp/>3,reasonID);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>3<sp/>ID<sp/>of<sp/>the<sp/>scoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,<sp/>4,EveryVol);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>4<sp/>Number<sp/>of<sp/>neutrons<sp/>in<sp/>the<sp/>volume<sp/>of<sp/>interest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,<sp/>5,FissionVol);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>5<sp/>Number<sp/>of<sp/>neutrons<sp/>inducing<sp/>fission<sp/>into<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,<sp/>6,CaptureVol);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>6<sp/>Number<sp/>of<sp/>neutrons<sp/>captured<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>into<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,<sp/>7,InelasticVol);<sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>7<sp/>Number<sp/>of<sp/>neutrons<sp/>inducing<sp/>inelastic<sp/>scattering<sp/>into<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,<sp/>8,nnPrimeVol);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>8<sp/>Number<sp/>of<sp/>neutrons<sp/>inducing<sp/>inelastic<sp/>scattering<sp/>into<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,<sp/>9,nXnVol);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>9<sp/>Number<sp/>of<sp/>neutrons<sp/>inducing<sp/>inelastic<sp/>scattering<sp/>into<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,10,pID);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=11<sp/>ID<sp/>of<sp/>the<sp/>parent<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,11,fNeutronGeneration);<sp/></highlight><highlight class="comment">//<sp/>ID=10<sp/>Neutron<sp/>generation<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,12,OutPhysVol);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=12<sp/>Number<sp/>of<sp/>neutrons<sp/>going<sp/>out<sp/>of<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>analysisManager-&gt;FillNtupleDColumn(<sp/>0,13,Edep);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>ID=13<sp/>Kinetic<sp/>energy<sp/>in<sp/>eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,<sp/>7,InPhysVol);<sp/><sp/><sp/><sp/><sp/>//<sp/>ID=<sp/>7<sp/>Number<sp/>of<sp/>neutrons<sp/>entering<sp/><sp/>in<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleDColumn(<sp/>0,14,GlobalTime);<sp/><sp/><sp/><sp/>//<sp/>ID=14<sp/>Time<sp/>since<sp/>the<sp/>track<sp/>is<sp/>created<sp/>in<sp/>ns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleDColumn(<sp/>0,15,StepLength);<sp/><sp/><sp/><sp/>//<sp/>ID=15<sp/>Neutron<sp/>step<sp/>length<sp/>in<sp/>cm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>0,16,fNeutronGeneration);<sp/><sp/><sp/><sp/><sp/>//<sp/>ID=16<sp/>Neutron<sp/>generation<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;AddNtupleRow(0);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::FillNtuple2(G4double<sp/>PosX,<sp/>G4double<sp/>PosY,<sp/>G4double<sp/>PosZ,<sp/>G4double<sp/>energyK,<sp/>G4int<sp/>FissionVol,<sp/>G4int<sp/>CaptureVol,<sp/>G4double<sp/>StepLength,<sp/>G4double<sp/>CubicVolume,<sp/>G4int<sp/>A,<sp/>G4int<sp/>Z)<sp/>{</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(<sp/>1,<sp/>0,PosX);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>0<sp/>PosX<sp/>en<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(<sp/>1,<sp/>1,PosY);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>1<sp/>PosY<sp/>en<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(<sp/>1,<sp/>2,PosZ);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>2<sp/>PosZ<sp/>en<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleDColumn(<sp/>1,<sp/>3,energyK);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>3<sp/>Kinetic<sp/>energy<sp/>in<sp/>eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleDColumn(<sp/>1,<sp/>4,StepLength/CubicVolume);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=4<sp/>Neutron<sp/>step<sp/>length<sp/>in<sp/>cm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>1,<sp/>5,FissionVol);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>9<sp/>Number<sp/>of<sp/>neutrons<sp/>inducing<sp/>fission<sp/>into<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>1,<sp/>6,CaptureVol);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=10<sp/>Number<sp/>of<sp/>neutrons<sp/>captured<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>into<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>1,<sp/>7,fNeutronGeneration);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=16<sp/>Neutron<sp/>generation<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>1,<sp/>8,A);<sp/><sp/></highlight><highlight class="comment">//<sp/>ID=11<sp/>Number<sp/>of<sp/>neutrons<sp/>inducing<sp/>inelastic<sp/>scattering<sp/>into<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(<sp/>1,<sp/>9,Z);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=12<sp/>Number<sp/>of<sp/>neutrons<sp/>inducing<sp/>inelastic<sp/>scattering<sp/>into<sp/>the<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>analysisManager-&gt;AddNtupleRow(1);</highlight></codeline>
<codeline lineno="2470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::FillNtupleDepositedPower(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theStep<sp/>&amp;&amp;<sp/>theStep-&gt;GetTotalEnergyDeposit())<sp/>{</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>N0_Energy<sp/>=<sp/>theStep-&gt;GetTotalEnergyDeposit()/eV;</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N0_Energy<sp/>&gt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4int<sp/>row<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theStep-&gt;GetPostStepPoint()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4String<sp/>thePostPVname<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetName();</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>position<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition();</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>0,<sp/>position.x()/mm);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>0<sp/>X<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>1,<sp/>position.y()/mm);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>1<sp/>Y<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>2,<sp/>position.z()/mm);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>2<sp/>Z<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleDColumn(row,<sp/>3,<sp/>N0_Energy);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>3<sp/><sp/><sp/>Energy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleIColumn(row,<sp/>4,<sp/>thePostPVname.find(</highlight><highlight class="stringliteral">&quot;FuelPellet&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;AddNtupleRow(row);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::FillNtupleNeutronSource(G4ThreeVector<sp/>N0_Pos,<sp/>G4ThreeVector<sp/>N0_Momentum,<sp/>G4double<sp/>N0_Energy)<sp/>{</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N0_Energy<sp/>&gt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4int<sp/>row<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>0,<sp/>N0_Pos.x()/mm);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>0<sp/>X<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>1,<sp/>N0_Pos.y()/mm);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>1<sp/>Y<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>2,<sp/>N0_Pos.z()/mm);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>2<sp/>Z<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>3,<sp/>N0_Momentum.x());<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>3<sp/>X<sp/>Momentum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>4,<sp/>N0_Momentum.y());<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>4<sp/>Y<sp/>Momentum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>5,<sp/>N0_Momentum.z());<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>5<sp/>Z<sp/>Momentum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleDColumn(row,<sp/>6,<sp/>N0_Energy);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>6<sp/><sp/><sp/>Energy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;AddNtupleRow(row);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::FillNtupleProton(G4ThreeVector<sp/>N0_Pos,<sp/>G4ThreeVector<sp/>N0_Momentum,<sp/>G4double<sp/>N0_Energy)<sp/>{</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N0_Energy<sp/>&gt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4int<sp/>row<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>0,<sp/>N0_Pos.x()/mm);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>0<sp/>X<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>1,<sp/>N0_Pos.y()/mm);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>1<sp/>Y<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>2,<sp/>N0_Pos.z()/mm);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>2<sp/>Z<sp/>Position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>3,<sp/>N0_Momentum.x());<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>3<sp/>X<sp/>Momentum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>4,<sp/>N0_Momentum.y());<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>4<sp/>Y<sp/>Momentum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleFColumn(row,<sp/>5,<sp/>N0_Momentum.z());<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>5<sp/>Z<sp/>Momentum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillNtupleDColumn(row,<sp/>6,<sp/>N0_Energy);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID=<sp/>6<sp/><sp/><sp/>Energy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;AddNtupleRow(row);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::FillNdensityVStimeHisto(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time)<sp/>{</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/>f_tBin<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>IsTargetRegion<sp/>(fPhysicalVolumeNumber))<sp/>{<sp/>analysisManager-&gt;FillH1(21,<sp/>log10(time));<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>Target<sp/><sp/><sp/><sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>IsCoolantRegion(fPhysicalVolumeNumber))<sp/>{<sp/>analysisManager-&gt;FillH1(22,<sp/>log10(time));<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>coolant<sp/><sp/><sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>IsFuel<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fPhysicalVolumeNumber))<sp/>{<sp/>analysisManager-&gt;FillH1(23,<sp/>log10(time));<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>fuel<sp/><sp/><sp/><sp/><sp/><sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>IsReflector<sp/><sp/><sp/><sp/>(fPhysicalVolumeNumber))<sp/>{<sp/>analysisManager-&gt;FillH1(24,<sp/>log10(time));<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>Reflector<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::FillEdepInStepHisto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*dbl_Ibeam*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!TMXOption::IsMultiplicationKilled(p-&gt;int_Option))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>multiplication<sp/>is<sp/>not<sp/>killed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>Energy<sp/>Deposit<sp/>in<sp/>this<sp/>step<sp/>in<sp/>eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>Tot_Edep<sp/>=<sp/>theStep-&gt;GetTotalEnergyDeposit()/eV;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>Tot_Edep<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddEdep(Tot_Edep);<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>energy<sp/>deposit<sp/>to<sp/>this<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fmap_Region_volume[fPhysicalVolumeNumber]<sp/>!=<sp/>1)<sp/>{<sp/>analysisManager-&gt;FillH1(0,<sp/>fPhysicalVolumeNumber,<sp/>Tot_Edep<sp/><sp/>/fmap_Region_volume[fPhysicalVolumeNumber]);}<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>deposit<sp/>/cm3<sp/>in<sp/>listed<sp/>volumes<sp/>(not<sp/>in<sp/>the<sp/>universe)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(1,<sp/>fPhysicalVolumeNumber,<sp/>Tot_Edep<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>deposit<sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>listed<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(18,fPhysicalVolumeNumber,<sp/>Tot_Edep*Tot_Edep<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>deposit^2<sp/>in<sp/>listed<sp/>volumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(25,fPhysicalVolumeNumber);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>times<sp/>the<sp/>deposited<sp/>energy<sp/>is<sp/>scored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>Case<sp/>for<sp/>TMXTarget</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>zMin<sp/>=<sp/>p-&gt;minZ,<sp/>zMax<sp/>=<sp/>p-&gt;maxZ;</highlight></codeline>
<codeline lineno="2555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>double<sp/>nBins<sp/>=<sp/>p-&gt;nbinsZ;</highlight></codeline>
<codeline lineno="2556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>radialWidth<sp/>=<sp/>12.5<sp/>*<sp/>mm;</highlight></codeline>
<codeline lineno="2557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>xPosition<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition().x()/mm;</highlight></codeline>
<codeline lineno="2558"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>yPosition<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition().y()/mm;</highlight></codeline>
<codeline lineno="2559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>zPosition<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition().z()/mm;</highlight></codeline>
<codeline lineno="2560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(zMin<sp/>&lt;=<sp/>zPosition<sp/>&amp;&amp;<sp/>zPosition<sp/>&lt;=<sp/>zMax)<sp/>{</highlight></codeline>
<codeline lineno="2561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(</highlight></codeline>
<codeline lineno="2562"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetLogicalVolume()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetLogicalVolume()-&gt;GetName()</highlight></codeline>
<codeline lineno="2565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>rPosition<sp/>=<sp/>sqrt(xPosition*xPosition<sp/>+<sp/>yPosition*yPosition);</highlight></codeline>
<codeline lineno="2567"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>leadHisto<sp/>=<sp/>(int)(rPosition/radialWidth);</highlight></codeline>
<codeline lineno="2568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>logicalVolumeName<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPhysicalVolume()-&gt;GetLogicalVolume()-&gt;GetName();</highlight></codeline>
<codeline lineno="2569"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(logicalVolumeName<sp/>==<sp/>&quot;lWindow&quot;)<sp/>{<sp/>//<sp/>Beam<sp/>Window</highlight></codeline>
<codeline lineno="2570"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(48,<sp/>zPosition,<sp/>Tot_Edep);</highlight></codeline>
<codeline lineno="2571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2572"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(logicalVolumeName<sp/>==<sp/>&quot;lTargetCoolant&quot;<sp/>&amp;&amp;<sp/>rPosition<sp/>&lt;=<sp/>95.*mm)<sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH1(49+leadHisto,<sp/>zPosition,<sp/>Tot_Edep);</highlight></codeline>
<codeline lineno="2574"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2575"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2577"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::FillBeamProfile(G4Track&amp;<sp/>theTrack,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stepnumber,<sp/>G4ThreeVector&amp;<sp/>PrePos,<sp/>G4AnalysisManager&amp;<sp/>analysisManager)<sp/>{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theTrack.GetParentID()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>stepnumber==1)</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager.FillH2(8,<sp/>PrePos.y()/mm,<sp/>PrePos.z()/mm,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>Beam<sp/>profile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::FillEdepPrimaries(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep</highlight><highlight class="comment">/*G4ThreeVector&amp;<sp/>PostPos,<sp/>double<sp/>Tot_Edep*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*dbl_Ibeam*/</highlight><highlight class="normal">,<sp/>G4AnalysisManager&amp;<sp/>analysisManager)<sp/>{</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>Tot_Edep<sp/>=<sp/>theStep-&gt;GetTotalEnergyDeposit()/eV;<sp/></highlight><highlight class="comment">//<sp/>Total<sp/>Energy<sp/>Deposit<sp/>in<sp/>this<sp/>step<sp/>in<sp/>eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ThreeVector<sp/><sp/>PrePos<sp/>=<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetPosition();</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ThreeVector<sp/>PostPos<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition();</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>PostPos.z()<sp/>&gt;<sp/>fTargetZdistanceToBottom<sp/>-<sp/>fh0<sp/>-<sp/>126*mm<sp/>&amp;&amp;<sp/>PostPos.z()<sp/>&lt;<sp/>fTargetZdistanceToBottom<sp/>-<sp/>fh0<sp/>+<sp/>126*mm<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>&amp;&amp;<sp/>Tot_Edep<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MeshCubicVolume<sp/>=<sp/>((p-&gt;maxX-p-&gt;minX)/p-&gt;nbinsX<sp/>*<sp/>(p-&gt;maxY-p-&gt;minY)/p-&gt;nbinsY)/cm2<sp/>*<sp/>25.2;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager.FillH2(5,<sp/>PostPos.x()/mm,<sp/>PostPos.y()/mm,<sp/>Tot_Edep<sp/><sp/>/MeshCubicVolume<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>deposit<sp/>mapping<sp/>for<sp/>primary<sp/>protons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FillNtupleDepositedPower(theStep);<sp/>//<sp/>Already<sp/>taken<sp/>into<sp/>account<sp/>in<sp/>line<sp/>119</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::AccumulateMeanEperFission(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>To<sp/>calculate<sp/>the<sp/>mean<sp/>deposited<sp/>energy<sp/>per<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ID_track<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetTrackID();</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>Tot_Edep<sp/>=<sp/>theStep-&gt;GetTotalEnergyDeposit()/eV;<sp/></highlight><highlight class="comment">//<sp/>Total<sp/>Energy<sp/>Deposit<sp/>in<sp/>this<sp/>step<sp/>in<sp/>eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>fID_firstfission<sp/>&gt;<sp/>ID_track)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>secondaries<sp/>of<sp/>fission<sp/>n°fID_firstfission<sp/>are<sp/>all<sp/>simulated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculation<sp/>of<sp/>the<sp/>mean<sp/>energy<sp/>per<sp/>fission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;AddEperfission(fEperFission/(G4double)fNfission_fromFission);</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialization<sp/>of<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFromFission<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fID_firstfission<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEperFission<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fNfission_fromFission<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fFromFission)<sp/>{</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEperFission<sp/>+=<sp/>Tot_Edep;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WARNING:<sp/>not<sp/>necessary<sp/>(to<sp/>be<sp/>tested)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>theStep-&gt;GetTrack()</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetParentID()<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>theStep-&gt;GetTrack()-&gt;GetCurrentStepNumber()==1<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>New<sp/>event<sp/>-&gt;<sp/>Initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFromFission<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fID_firstfission<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fNfission_fromFission<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEperFission<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::FillTimeEnergyFissionProducts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>G4String<sp/>processName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep())<sp/>{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processName<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetProcessDefinedStep()-&gt;GetProcessName();}</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(processName<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;ionIoni&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;ParallelScoringWorld&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;ParallelScoringWorld_polar&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName!=</highlight><highlight class="stringliteral">&quot;RadioactiveDecayBase&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName!=</highlight><highlight class="stringliteral">&quot;CoupledTransportation&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName!=</highlight><highlight class="stringliteral">&quot;hadElastic&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName!=</highlight><highlight class="stringliteral">&quot;alphaInelastic&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName!=</highlight><highlight class="stringliteral">&quot;msc&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName!=</highlight><highlight class="stringliteral">&quot;hIoni&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;Transportation&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>processName<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4int<sp/>A<sp/>=<sp/>particleType-&gt;GetAtomicMass();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4int<sp/>Z<sp/>=<sp/>particleType-&gt;GetAtomicNumber();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>G4Track*&gt;<sp/>*secondaries<sp/>=<sp/>theStep-&gt;GetSecondaryInCurrentStep();</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Presence_anti_nu_e<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>AntiNuGlobalTime<sp/>=<sp/>0,<sp/>AntiNuEnergy<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Presence_e<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>ElectronGlobalTime<sp/>=<sp/>0,<sp/>ElectronEnergy<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;<sp/>i&lt;(G4int)secondaries-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4String<sp/>secondary_particleName<sp/>=<sp/>(*secondaries)[i]-&gt;GetDefinition()-&gt;GetParticleName();</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secondary_particleName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(28,<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s),<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV));<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>FF<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secondary_particleName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;gamma&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName==</highlight><highlight class="stringliteral">&quot;RadioactiveDecayBase&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(29,<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s),<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV));<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>FF<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secondary_particleName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;e-&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName==</highlight><highlight class="stringliteral">&quot;RadioactiveDecayBase&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElectronGlobalTime<sp/>=<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElectronEnergy<sp/><sp/><sp/><sp/><sp/>=<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Presence_e<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(24,<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s),<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV));<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>FF<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secondary_particleName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;anti_nu_e&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName==</highlight><highlight class="stringliteral">&quot;RadioactiveDecayBase&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AntiNuGlobalTime<sp/>=<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AntiNuEnergy<sp/><sp/><sp/><sp/><sp/>=<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Presence_anti_nu_e<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(31,<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s),<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV));<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>FF<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(processName==</highlight><highlight class="stringliteral">&quot;RadioactiveDecayBase&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(*secondaries)[i]-&gt;GetDefinition()-&gt;GetParticleType()!=</highlight><highlight class="stringliteral">&quot;nucleus&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>secondary_particleName<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager-&gt;FillH2(30,<sp/>std::log10((*secondaries)[i]-&gt;GetGlobalTime()/s),<sp/>std::log10((*secondaries)[i]-&gt;GetKineticEnergy()/eV));<sp/></highlight><highlight class="comment">//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>FF<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(Presence_e<sp/>&amp;&amp;<sp/>Presence_anti_nu_e)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager.FillH2(24,<sp/>ElectronGlobalTime,<sp/>ElectronEnergy);<sp/>//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>FF<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysisManager.FillH2(31,<sp/>AntiNuGlobalTime,<sp/>AntiNuEnergy);<sp/>//<sp/>Energy<sp/>and<sp/>time<sp/>for<sp/>FF<sp/>secondaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::ScorePrimaryProtons(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step*<sp/>theStep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dbl_Ibeam)<sp/>{</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsPrimaryProton(theStep-&gt;GetTrack()-&gt;GetDefinition()-&gt;GetParticleName(),<sp/>theStep-&gt;GetTrack()-&gt;GetTrackID()))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>primary<sp/>protons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysisManager<sp/>=<sp/>G4AnalysisManager::Instance();</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Track*<sp/>theTrack<sp/>=<sp/>theStep-&gt;GetTrack();</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4int<sp/>stepnumber<sp/>=<sp/>theTrack-&gt;GetCurrentStepNumber();</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//G4double<sp/>Tot_Edep<sp/>=<sp/>theStep-&gt;GetTotalEnergyDeposit()/eV;<sp/>//<sp/>Total<sp/>Energy<sp/>Deposit<sp/>in<sp/>this<sp/>step<sp/>in<sp/>eV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ThreeVector<sp/><sp/>PrePos<sp/>=<sp/>theStep-&gt;GetPreStepPoint()-&gt;GetPosition();</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//G4ThreeVector<sp/>PostPos<sp/>=<sp/>theStep-&gt;GetPostStepPoint()-&gt;GetPosition();*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillEdepPrimaries(theStep</highlight><highlight class="comment">/*PostPos,<sp/>Tot_Edep*/</highlight><highlight class="normal">,<sp/>dbl_Ibeam,<sp/>*analysisManager);</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FillBeamProfile(*theTrack,<sp/>stepnumber,<sp/>PrePos,<sp/>*analysisManager);</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MCNP<sp/>keff<sp/>estimators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="2728"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::GetNeutronHadronicProcesses()<sp/>{</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>la<sp/>particule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ParticleDefinition<sp/>*particle<sp/>=<sp/>G4ParticleTable::GetParticleTable()-&gt;FindParticle(</highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>G4Neutron::Definition();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>le<sp/>process<sp/>manager<sp/>pour<sp/>la<sp/>particule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ProcessManager<sp/>*pManager<sp/>=<sp/>particle-&gt;GetProcessManager();</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>la<sp/>liste<sp/>des<sp/>processus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ProcessVector<sp/>*pList<sp/>=<sp/>pManager-&gt;GetProcessList();</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>boucle<sp/>pour<sp/>trouver<sp/>le<sp/>bon<sp/>process<sp/>(je<sp/>pense<sp/>qu&apos;il<sp/>faut<sp/>les<sp/>imprimer<sp/>une<sp/>fois<sp/>pour<sp/>voir)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4VProcess<sp/>*pp<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>pList-&gt;size();<sp/>idx++)</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp<sp/>=<sp/>(*pList)[idx];</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4int<sp/>ptype<sp/>=<sp/>pp-&gt;GetProcessType();</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ptype<sp/>==<sp/>4<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Reaction<sp/>of<sp/>a<sp/>neutron<sp/>with<sp/>something<sp/>else<sp/>(no<sp/>surface,<sp/>parallel<sp/>world,<sp/>etc.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>((G4String)pp-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;hadElastic&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fProcessElas<sp/>=<sp/>(G4HadronicProcess<sp/>*)pp;<sp/>}</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((G4String)pp-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutronInelastic&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fProcessInel<sp/>=<sp/>(G4HadronicProcess<sp/>*)pp;<sp/>}</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((G4String)pp-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fProcessCap<sp/>=<sp/>(G4HadronicProcess<sp/>*)pp;<sp/>}</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((G4String)pp-&gt;GetProcessName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fProcessFis<sp/>=<sp/>(G4HadronicProcess<sp/>*)pp;<sp/>}</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n<sp/>!!<sp/>WARNING<sp/>!!<sp/>\n<sp/>!!<sp/>At<sp/>least<sp/>one<sp/>hadronic<sp/>process<sp/>has<sp/>not<sp/>been<sp/>taken<sp/>into<sp/>account<sp/>in<sp/>SteppingAction::GetNeutronHadronicProcesses<sp/>!!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>[%s,%d,%d]&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)pp-&gt;GetProcessName(),<sp/>ptype,<sp/>pp-&gt;GetProcessSubType());</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal">G4double<sp/>SteppingAction::GetElementElasticCrossSection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep,<sp/>G4Element*<sp/>elm,<sp/>G4Material*<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>une<sp/>DynamicParticle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4DynamicParticle*<sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetDynamicParticle();</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>vérifie<sp/>l&apos;énergie<sp/>cinltique<sp/>non<sp/>nulle<sp/>sinon<sp/>on<sp/>en<sp/>défini<sp/>une<sp/>autre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Track<sp/>theTrack<sp/>=<sp/>*theStep-&gt;GetTrack();</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepPoint<sp/>PreStep<sp/>=<sp/>*theStep-&gt;GetPreStepPoint();</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(particleDyn-&gt;GetKineticEnergy()<sp/>&lt;<sp/>1e+6)</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4DynamicParticle(particleDyn-&gt;GetParticleDefinition(),<sp/>particleDyn-&gt;GetMomentumDirection(),<sp/>KineticEnergy_eV(theStep)*eV);</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>la<sp/>section<sp/>efficace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fProcessElas-&gt;GetElementCrossSection(particleDyn,<sp/>elm,<sp/>mat)/cm2;</highlight></codeline>
<codeline lineno="2773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal">G4double<sp/>SteppingAction::GetElementInelastCrossSection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep,<sp/>G4Element*<sp/>elm,<sp/>G4Material*<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>une<sp/>DynamicParticle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4DynamicParticle*<sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetDynamicParticle();</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>vérifie<sp/>l&apos;énergie<sp/>cinltique<sp/>non<sp/>nulle<sp/>sinon<sp/>on<sp/>en<sp/>défini<sp/>une<sp/>autre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Track<sp/>theTrack<sp/>=<sp/>*theStep-&gt;GetTrack();</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepPoint<sp/>PreStep<sp/>=<sp/>*theStep-&gt;GetPreStepPoint();</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(particleDyn-&gt;GetKineticEnergy()<sp/>&lt;<sp/>1e+6)</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4DynamicParticle(particleDyn-&gt;GetParticleDefinition(),<sp/>particleDyn-&gt;GetMomentumDirection(),<sp/>KineticEnergy_eV(theStep)*eV);</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>la<sp/>section<sp/>efficace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fProcessInel-&gt;GetElementCrossSection(particleDyn,<sp/>elm,<sp/>mat)/cm2;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;G4ParticleHPThermalBoost.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal">G4double<sp/>SteppingAction::GetElementInelastChannelCrossSection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep,<sp/>G4Element*<sp/>elm,<sp/>G4int<sp/>jchan)<sp/>{</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>DynamicParticle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4DynamicParticle*<sp/>particleDyn<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetDynamicParticle();</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>DynParticle<sp/>pre-step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Track*<sp/>theTrack<sp/>=<sp/>theStep-&gt;GetTrack();</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepPoint<sp/>PreStep<sp/>=<sp/>*theStep-&gt;GetPreStepPoint();</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(particleDyn-&gt;GetKineticEnergy()<sp/>&lt;<sp/>1e+6)</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4DynamicParticle(particleDyn-&gt;GetParticleDefinition(),<sp/>particleDyn-&gt;GetMomentumDirection(),<sp/>KineticEnergy_eV(theStep)*eV);</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ParticleHPInelastic*<sp/>inthpinelastic<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">G4ParticleHPInelastic*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fProcessInel-&gt;GetHadronicModel(</highlight><highlight class="stringliteral">&quot;NeutronHPInelastic&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modified<sp/>G4<sp/>to<sp/>obtain<sp/>the<sp/>channel<sp/>list<sp/>--<sp/>one<sp/>per<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;G4ParticleHPChannelList*&gt;*<sp/>chanlist<sp/>=<sp/>inthpinelastic-&gt;GetChannelList();<sp/></highlight><highlight class="comment">//<sp/>one<sp/>List<sp/>per<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2801"><highlight class="comment"><sp/><sp/><sp/><sp/>if(G4Threading::G4GetThreadId()<sp/>==<sp/>99)<sp/>{</highlight></codeline>
<codeline lineno="2802"><highlight class="comment"><sp/><sp/><sp/><sp/>for(auto<sp/>ichan=chanlist-&gt;begin();<sp/>ichan!=chanlist-&gt;end();<sp/>++ichan)<sp/>{</highlight></codeline>
<codeline lineno="2803"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>List<sp/>of<sp/>channels<sp/>lists<sp/>--<sp/>one<sp/>per<sp/>element</highlight></codeline>
<codeline lineno="2804"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ParticleHPChannelList*<sp/>chanl<sp/>=<sp/>*ichan;</highlight></codeline>
<codeline lineno="2805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4int<sp/>nchans<sp/>=<sp/>chanl-&gt;GetNumberOfChannels();</highlight></codeline>
<codeline lineno="2806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Modified<sp/>G4<sp/>to<sp/>get<sp/>the<sp/>channels,<sp/>one<sp/>by<sp/>one</highlight></codeline>
<codeline lineno="2807"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ParticleHPChannel<sp/>**chanvec<sp/>=<sp/>chanl-&gt;GetChannels();</highlight></codeline>
<codeline lineno="2808"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(G4int<sp/>i=0;i&lt;nchans;++i)<sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4ParticleHPChannel<sp/>*chan<sp/>=<sp/>chanvec[i];</highlight></codeline>
<codeline lineno="2810"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(chan-&gt;GetNiso()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;=====================================================<sp/>DumpInfo<sp/>=======================================================&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2812"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan-&gt;DumpInfo();</highlight></codeline>
<codeline lineno="2813"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;=====================================================<sp/>DumpInfo<sp/>=======================================================&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2816"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2817"><highlight class="comment"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="2818"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2819"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ParticleHPChannelList*<sp/>elmchanlist<sp/>=<sp/>(*chanlist)[elm-&gt;GetIndex()];<sp/></highlight><highlight class="comment">//<sp/>channel<sp/>list<sp/>for<sp/>that<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ParticleHPChannel*<sp/>channel<sp/>=<sp/>(elmchanlist-&gt;GetChannels())[jchan];</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/>G4ParticleHPThermalBoost<sp/>aThermalE;<sp/></highlight><highlight class="comment">//<sp/>Thermal<sp/>boost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/>G4int<sp/>nisos<sp/>=<sp/>channel-&gt;GetNiso();</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>xsec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>G4Mutex<sp/>mutex<sp/>=<sp/>G4MUTEX_INITIALIZER;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>G4AutoLock<sp/>l(&amp;mutex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;i&lt;nisos;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(channel-&gt;HasAnyData(i))<sp/>{</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xsec<sp/>+=<sp/>channel-&gt;GetWeightedXsec(aThermalE.GetThermalEnergy(*theTrack,</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel-&gt;GetN(i),<sp/>channel-&gt;GetZ(i),</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theTrack-&gt;GetMaterial()-&gt;GetTemperature()),i);</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>l.unlock();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xsec;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal">G4double<sp/>SteppingAction::GetElementCaptureCrossSection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep,<sp/>G4Element*<sp/>elm,<sp/>G4Material*<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>une<sp/>DynamicParticle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4DynamicParticle*<sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetDynamicParticle();</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>vérifie<sp/>l&apos;énergie<sp/>cinltique<sp/>non<sp/>nulle<sp/>sinon<sp/>on<sp/>en<sp/>défini<sp/>une<sp/>autre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Track<sp/>theTrack<sp/>=<sp/>*theStep-&gt;GetTrack();</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepPoint<sp/>PreStep<sp/>=<sp/>*theStep-&gt;GetPreStepPoint();</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(particleDyn-&gt;GetKineticEnergy()<sp/>&lt;<sp/>1e+6)</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4DynamicParticle(particleDyn-&gt;GetParticleDefinition(),<sp/>particleDyn-&gt;GetMomentumDirection(),<sp/>KineticEnergy_eV(theStep)*eV);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>la<sp/>section<sp/>efficace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fProcessCap-&gt;GetElementCrossSection(particleDyn,<sp/>elm,<sp/>mat)/cm2;</highlight></codeline>
<codeline lineno="2852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal">G4double<sp/>SteppingAction::GetElementFissionCrossSection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep,<sp/>G4Element*<sp/>elm,<sp/>G4Material*<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>une<sp/>DynamicParticle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4DynamicParticle*<sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetDynamicParticle();</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>vérifie<sp/>l&apos;énergie<sp/>cinltique<sp/>non<sp/>nulle<sp/>sinon<sp/>on<sp/>en<sp/>défini<sp/>une<sp/>autre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Track<sp/>theTrack<sp/>=<sp/>*theStep-&gt;GetTrack();</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepPoint<sp/>PreStep<sp/>=<sp/>*theStep-&gt;GetPreStepPoint();</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(particleDyn-&gt;GetKineticEnergy()<sp/>&lt;<sp/>1e+6)</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4DynamicParticle(particleDyn-&gt;GetParticleDefinition(),<sp/>particleDyn-&gt;GetMomentumDirection(),<sp/>KineticEnergy_eV(theStep)*eV);</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(mat-&gt;GetName()<sp/>==<sp/>&quot;fuel_UO2Al&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>particleDyn-&gt;GetKineticEnergy()/MeV<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>&quot;<sp/>&lt;&lt;<sp/>fProcessFis-&gt;GetProcessName()<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>&quot;<sp/>&lt;&lt;<sp/>elm-&gt;GetName()<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>&quot;<sp/>&lt;&lt;<sp/>fProcessFis-&gt;GetElementCrossSection(particleDyn,<sp/>elm,<sp/>mat)/cm2<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>la<sp/>section<sp/>efficace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fProcessFis-&gt;GetElementCrossSection(particleDyn,<sp/>elm,<sp/>mat)/cm2;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal">G4double<sp/>SteppingAction::GetMaterialElasticCrossSection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep,<sp/>G4Material*<sp/>mat)<sp/><sp/>{</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>une<sp/>DynamicParticle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4DynamicParticle*<sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetDynamicParticle();</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>vérifie<sp/>l&apos;énergie<sp/>cinltique<sp/>non<sp/>nulle<sp/>sinon<sp/>on<sp/>en<sp/>défini<sp/>une<sp/>autre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Track<sp/>theTrack<sp/>=<sp/>*theStep-&gt;GetTrack();</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepPoint<sp/>PreStep<sp/>=<sp/>*theStep-&gt;GetPreStepPoint();</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(particleDyn-&gt;GetKineticEnergy()<sp/>&lt;<sp/>1e+6)</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4DynamicParticle(particleDyn-&gt;GetParticleDefinition(),<sp/>particleDyn-&gt;GetMomentumDirection(),<sp/>KineticEnergy_eV(theStep)*eV);</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>matCrossSection<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/>G4int<sp/>nElements<sp/>=<sp/>mat-&gt;GetNumberOfElements();</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4double*<sp/>nAtomsPerVolume<sp/>=<sp/>mat-&gt;GetVecNbOfAtomsPerVolume();</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>TotNbAtomsPerVolume<sp/>=<sp/>mat-&gt;GetTotNbOfAtomsPerVolume();</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;<sp/>i&lt;nElements;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matCrossSection<sp/>+=<sp/>nAtomsPerVolume[i]/(G4double)TotNbAtomsPerVolume<sp/>*<sp/>(fProcessElas-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(particleDyn,<sp/>(*mat-&gt;GetElementVector())[i],<sp/>mat)/cm2);</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>la<sp/>section<sp/>efficace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matCrossSection;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>fProcessElas-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(particleDyn,<sp/>mat/*thePrePV-&gt;GetLogicalVolume()-&gt;GetMaterial()*/);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal">G4double<sp/>SteppingAction::GetMaterialInelastCrossSection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep,<sp/>G4Material*<sp/>mat)<sp/><sp/>{</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>une<sp/>DynamicParticle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4DynamicParticle*<sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetDynamicParticle();</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>vérifie<sp/>l&apos;énergie<sp/>cinltique<sp/>non<sp/>nulle<sp/>sinon<sp/>on<sp/>en<sp/>défini<sp/>une<sp/>autre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Track<sp/>theTrack<sp/>=<sp/>*theStep-&gt;GetTrack();</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepPoint<sp/>PreStep<sp/>=<sp/>*theStep-&gt;GetPreStepPoint();</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(particleDyn-&gt;GetKineticEnergy()<sp/>&lt;<sp/>1e+6)</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4DynamicParticle(particleDyn-&gt;GetParticleDefinition(),<sp/>particleDyn-&gt;GetMomentumDirection(),<sp/>KineticEnergy_eV(theStep)*eV);</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>matCrossSection<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/>G4int<sp/>nElements<sp/>=<sp/>mat-&gt;GetNumberOfElements();</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4double*<sp/>nAtomsPerVolume<sp/>=<sp/>mat-&gt;GetVecNbOfAtomsPerVolume();</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>TotNbAtomsPerVolume<sp/>=<sp/>mat-&gt;GetTotNbOfAtomsPerVolume();</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;<sp/>i&lt;nElements;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matCrossSection<sp/>+=<sp/>nAtomsPerVolume[i]/(G4double)TotNbAtomsPerVolume<sp/>*<sp/>(fProcessInel-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(particleDyn,<sp/>(*mat-&gt;GetElementVector())[i],<sp/>mat)/cm2);</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>la<sp/>section<sp/>efficace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matCrossSection;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>fProcessInel-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(particleDyn,<sp/>mat)/cm2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal">G4double<sp/>SteppingAction::GetMaterialCaptureCrossSection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep,<sp/>G4Material*<sp/>mat)<sp/><sp/>{</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>une<sp/>DynamicParticle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4DynamicParticle*<sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetDynamicParticle();</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>vérifie<sp/>l&apos;énergie<sp/>cinltique<sp/>non<sp/>nulle<sp/>sinon<sp/>on<sp/>en<sp/>défini<sp/>une<sp/>autre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Track<sp/>theTrack<sp/>=<sp/>*theStep-&gt;GetTrack();</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepPoint<sp/>PreStep<sp/>=<sp/>*theStep-&gt;GetPreStepPoint();</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(particleDyn-&gt;GetKineticEnergy()<sp/>&lt;<sp/>1e+6)</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4DynamicParticle(particleDyn-&gt;GetParticleDefinition(),<sp/>particleDyn-&gt;GetMomentumDirection(),<sp/>KineticEnergy_eV(theStep)*eV);</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>matCrossSection<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/>G4int<sp/>nElements<sp/>=<sp/>mat-&gt;GetNumberOfElements();</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4double*<sp/>nAtomsPerVolume<sp/>=<sp/>mat-&gt;GetVecNbOfAtomsPerVolume();</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>TotNbAtomsPerVolume<sp/>=<sp/>mat-&gt;GetTotNbOfAtomsPerVolume();</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;<sp/>i&lt;nElements;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matCrossSection<sp/>+=<sp/>nAtomsPerVolume[i]/(G4double)TotNbAtomsPerVolume<sp/>*<sp/>(fProcessCap-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(particleDyn,<sp/>(*mat-&gt;GetElementVector())[i],<sp/>mat)/cm2);</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>la<sp/>section<sp/>efficace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matCrossSection;</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>fProcessCap-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(particleDyn,<sp/>mat)/cm2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal">G4double<sp/>SteppingAction::GetMaterialFissionCrossSection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>*<sp/>theStep,<sp/>G4Material*<sp/>mat)<sp/><sp/>{</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>une<sp/>DynamicParticle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4DynamicParticle*<sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/>theStep-&gt;GetTrack()-&gt;GetDynamicParticle();</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>vérifie<sp/>l&apos;énergie<sp/>cinltique<sp/>non<sp/>nulle<sp/>sinon<sp/>on<sp/>en<sp/>défini<sp/>une<sp/>autre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/>G4Track<sp/>theTrack<sp/>=<sp/>*theStep-&gt;GetTrack();</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepPoint<sp/>PreStep<sp/>=<sp/>*theStep-&gt;GetPreStepPoint();</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(particleDyn-&gt;GetKineticEnergy()<sp/>&lt;<sp/>1e+6)</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particleDyn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4DynamicParticle(particleDyn-&gt;GetParticleDefinition(),<sp/>particleDyn-&gt;GetMomentumDirection(),<sp/>KineticEnergy_eV(theStep)*eV);</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>matCrossSection<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/>G4int<sp/>nElements<sp/>=<sp/>mat-&gt;GetNumberOfElements();</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4double*<sp/>nAtomsPerVolume<sp/>=<sp/>mat-&gt;GetVecNbOfAtomsPerVolume();</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>TotNbAtomsPerVolume<sp/>=<sp/>mat-&gt;GetTotNbOfAtomsPerVolume();</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;<sp/>i&lt;nElements;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matCrossSection<sp/>+=<sp/>nAtomsPerVolume[i]/(G4double)TotNbAtomsPerVolume<sp/>*<sp/>(fProcessFis-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(particleDyn,<sp/>(*mat-&gt;GetElementVector())[i],<sp/>mat)/cm2);</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(mat-&gt;GetName()<sp/>==<sp/>&quot;fuel_UO2Al&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>particleDyn-&gt;GetKineticEnergy()/MeV<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>&quot;<sp/>&lt;&lt;<sp/>fProcessFis-&gt;GetProcessName()<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>&quot;<sp/>&lt;&lt;<sp/>matCrossSection<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>recupere<sp/>la<sp/>section<sp/>efficace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matCrossSection;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>fProcessFis-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(particleDyn,<sp/>mat)/cm2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::MCNP_Keff_estimators_ori(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>theStep)<sp/>{</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Beginning<sp/>of<sp/>MCNP_Keff_estimators&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>const<sp/>G4VProcess<sp/>*pp<sp/>=<sp/>theStep.GetPostStepPoint()-&gt;GetProcessDefinedStep();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(pp<sp/>&amp;&amp;<sp/>theStep.GetTrack()-&gt;GetDynamicParticle()-&gt;GetKineticEnergy()<sp/>&lt;<sp/>20*MeV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>pp-&gt;GetProcessName()<sp/>!=<sp/>&quot;hadElastic&quot;<sp/>&amp;&amp;<sp/>pp-&gt;GetProcessName()<sp/>!=<sp/>&quot;CoupledTransportation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>pp-&gt;GetProcessName()<sp/>!=<sp/>&quot;nFission&quot;<sp/>&amp;&amp;<sp/>pp-&gt;GetProcessName()<sp/>!=<sp/>&quot;ParallelScoringWorld&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>pp-&gt;GetProcessName()<sp/>!=<sp/>&quot;nCapture&quot;<sp/>/*&amp;&amp;<sp/>pp-&gt;GetProcessSubType()<sp/>!=<sp/>121*/)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;<sp/>[%s,%d,%d]<sp/>\n&quot;,<sp/>(const<sp/>char<sp/>*)((G4NeutronInelasticProcess*)pp)-&gt;GetProcessName(),<sp/>((G4NeutronInelasticProcess*)pp)-&gt;GetProcessType(),<sp/>((G4NeutronInelasticProcess*)pp)-&gt;GetProcessSubType());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4ParticleDefinition*<sp/>part<sp/>=<sp/>theStep.GetTrack()-&gt;GetDefinition();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((G4NeutronInelasticProcess*)pp)-&gt;DumpPhysicsTable(*part);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((G4NeutronInelasticProcess*)pp)-&gt;DumpPhysicsTable(*G4Neutron::Definition());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/><sp/><sp/><sp/>if((const<sp/>char<sp/>*)pp-&gt;GetProcessName()<sp/>==<sp/>&quot;Hadronic&quot;<sp/>&amp;&amp;<sp/>pp-&gt;GetProcessSubType()<sp/>==<sp/><sp/>fHadronInelastic)<sp/>break;<sp/>//<sp/>mais<sp/>il<sp/>faut<sp/>tous<sp/>les<sp/>imprimer<sp/>une<sp/>fois<sp/>pour<sp/>voir!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>nu<sp/>=<sp/>fEventAction-&gt;GetNu();</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"></highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>post<sp/>step<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/>G4StepPoint*<sp/><sp/>thePostPoint<sp/>=<sp/>theStep.GetPostStepPoint();</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>process<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/>G4String<sp/>processName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(thePostPoint-&gt;GetProcessDefinedStep())<sp/>{</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processName<sp/>=<sp/>thePostPoint-&gt;GetProcessDefinedStep()-&gt;GetProcessName();}</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>processName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;hadElastic&quot;</highlight><highlight class="normal"><sp/>||<sp/>processName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;neutronInelastic&quot;</highlight><highlight class="normal"><sp/>||<sp/>processName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal"><sp/>||<sp/>processName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Material*<sp/>mat<sp/>=<sp/>thePostPoint-&gt;GetPhysicalVolume()-&gt;GetLogicalVolume()-&gt;GetMaterial();</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>MaterialSigmaF<sp/>=<sp/>GetMaterialFissionCrossSection(&amp;theStep,<sp/>mat);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(MaterialSigmaF<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>MaterialSigmaTot<sp/>=<sp/>GetMaterialElasticCrossSection(&amp;theStep,<sp/>mat)</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>GetMaterialInelastCrossSection(&amp;theStep,<sp/>mat)</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>GetMaterialCaptureCrossSection(&amp;theStep,<sp/>mat)</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>MaterialSigmaF;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>MaterialDensityG4<sp/>=<sp/>mat-&gt;GetTotNbOfAtomsPerVolume()*cm3;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>MaterialDensity<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Atomic<sp/>density</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;mat-&gt;GetNumberOfElements();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(mat-&gt;GetDensity()/(g/cm3))<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>mat-&gt;GetFractionVector()[i]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>mat-&gt;GetElement(i)-&gt;GetA()/(g/mole)<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>Avogadro<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>mat-&gt;GetTotNbOfAtomsPerVolume()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>mat-&gt;GetVecNbOfAtomsPerVolume()[i]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>mat-&gt;GetVecNbOfAtomsPerVolume()[i]/mat-&gt;GetTotNbOfAtomsPerVolume()*100<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MaterialDensity<sp/>+=<sp/>(mat-&gt;GetDensity()/(g/cm3))<sp/>*<sp/>mat-&gt;GetFractionVector()[i]<sp/>/<sp/>(mat-&gt;GetElement(i)-&gt;GetA()/(g/mole))<sp/>*<sp/>Avogadro;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>diff<sp/>=<sp/>2*std::abs(MaterialDensityG4-MaterialDensity)/(MaterialDensityG4+MaterialDensity);</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(diff<sp/>&gt;=<sp/>1e-7)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EEEEEEEEK!<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MaterialDensityG4<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ours<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;MaterialDensity<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(MaterialSigmaF<sp/>&gt;0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>mat-&gt;GetName()<sp/>&lt;&lt;<sp/>&quot;<sp/>sigmaf<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>MaterialSigmaF<sp/>&lt;&lt;<sp/>&quot;<sp/>sigmaTot<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>MaterialSigmaTot<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;density<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>MaterialDensity<sp/>&lt;&lt;<sp/>&quot;<sp/>at/cm3<sp/>;<sp/>fLengthBetweenCollision<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>fLengthBetweenCollision<sp/>&lt;&lt;<sp/>&quot;<sp/>cm<sp/>;<sp/>nu<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>nu<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>MaterialDensity<sp/>*<sp/>fLengthBetweenCollision<sp/>*<sp/>nu<sp/>*<sp/>MaterialSigmaF<sp/>&lt;&lt;<sp/>&quot;\n&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Collision<sp/>keff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(MaterialSigmaTot<sp/>&gt;<sp/>0)<sp/>{fEventAction-&gt;Add_keff_collision(nu<sp/>*<sp/>MaterialSigmaF<sp/>/<sp/>MaterialSigmaTot);}</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Track<sp/>length<sp/>keff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>mat-&gt;GetName()<sp/>&lt;&lt;<sp/>&quot;<sp/>MaterialDensity<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>MaterialDensity<sp/>&lt;&lt;<sp/>&quot;<sp/>fLengthBetweenCollision<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fLengthBetweenCollision<sp/>&lt;&lt;<sp/>&quot;<sp/>nu<sp/>&quot;<sp/>&lt;&lt;<sp/>nu<sp/>&lt;&lt;<sp/>&quot;<sp/>sigmaF<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>MaterialSigmaF<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;Add_keff_trackLength(MaterialDensity<sp/>*<sp/>fLengthBetweenCollision<sp/>*<sp/>nu<sp/>*<sp/>MaterialSigmaF);</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLengthBetweenCollision<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>processName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Material*<sp/>mat<sp/>=<sp/>thePostPoint-&gt;GetPhysicalVolume()-&gt;GetLogicalVolume()-&gt;GetMaterial();</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4VProcess*<sp/>process<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">G4VProcess*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(thePostPoint-&gt;GetProcessDefinedStep());</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4HadronicProcess*<sp/>hproc<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">G4HadronicProcess*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(process);</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Isotope*<sp/>target<sp/>=<sp/>hproc-&gt;GetTargetIsotope();</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4ElementTable<sp/>*ElmTable<sp/>=<sp/>G4Element::GetElementTable();</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Element*<sp/>elm<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;ElmTable-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*ElmTable)[i])<sp/>{</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*ElmTable)[i]-&gt;GetZ()<sp/>==<sp/>target-&gt;GetZ()<sp/>&amp;&amp;<sp/>(*ElmTable)[i]-&gt;GetN()<sp/>==<sp/>target-&gt;GetN())</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elm<sp/>=<sp/>(*ElmTable)[i];</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(elm)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>isotope<sp/>has<sp/>been<sp/>found<sp/>in<sp/>the<sp/>table<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>ElementSigmaF<sp/>=<sp/>GetElementFissionCrossSection(&amp;theStep,<sp/>elm,<sp/>mat);</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>ElementSigmaAbs<sp/>=<sp/>GetElementInelastCrossSection(&amp;theStep,<sp/>elm,<sp/>mat)</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>GetElementCaptureCrossSection(&amp;theStep,<sp/>elm,<sp/>mat);</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>ElementSigmaTot<sp/>=<sp/>GetElementElasticCrossSection(&amp;theStep,<sp/>elm,<sp/>mat)</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>ElementSigmaAbs</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>ElementSigmaF;</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(ElementSigmaF<sp/>&lt;0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>mat-&gt;GetName()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>elm-&gt;GetName()<sp/>&lt;&lt;<sp/>&quot;<sp/>sigmaf<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>ElementSigmaF<sp/>&lt;&lt;<sp/>&quot;<sp/>sigmaTot<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>ElementSigmaTot<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>ElementSigmaAbs<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>ElementSigmaAbs<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>nu<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>nu<sp/>&lt;&lt;<sp/>&quot;\n&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>nu*ElementSigmaF<sp/>/<sp/>(ElementSigmaAbs<sp/>+<sp/>ElementSigmaF)<sp/>&lt;&lt;<sp/>&quot;\n&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Analog<sp/>absorption<sp/>keff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>a<sp/>particle<sp/>collides,<sp/>there<sp/>is<sp/>a<sp/>probability<sp/>that<sp/>it<sp/>is<sp/>absorbed<sp/>by<sp/>the<sp/>nucleus.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>analog<sp/>absorption,<sp/>the<sp/>particle<sp/>is<sp/>killed<sp/>with<sp/>that<sp/>probability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ElementSigmaAbs<sp/>+<sp/>ElementSigmaF<sp/>)<sp/>{<sp/>fEventAction-&gt;Add_keff_analogAbs(nu*ElementSigmaF<sp/>/<sp/>(ElementSigmaAbs<sp/>+<sp/>ElementSigmaF));}</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implicit<sp/>absorption<sp/>keff<sp/>(not<sp/>the<sp/>case<sp/>in<sp/>GEANT4,<sp/>23/11/2020)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>particle<sp/>is<sp/>never<sp/>killed<sp/>by<sp/>absorption;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instead,<sp/>its<sp/>weight<sp/>is<sp/>reduced<sp/>by<sp/>the<sp/>absorption<sp/>probability<sp/>at<sp/>eachcollision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ElementSigmaTot<sp/>)<sp/>{fEventAction-&gt;Add_keff_implicitAbs(nu*ElementSigmaF<sp/>/<sp/>ElementSigmaTot);}</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;End<sp/>of<sp/>MCNP_Keff_estimators&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SteppingAction::MCNP_Keff_estimators(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4Step<sp/>&amp;theStep)<sp/>{</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>post<sp/>step<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4StepPoint*<sp/>thePostPoint<sp/>=<sp/>theStep.GetPostStepPoint();</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4StepPoint*<sp/>thePrePoint<sp/><sp/>=<sp/>theStep.GetPreStepPoint();</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>process<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/>G4String<sp/>processName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(thePostPoint-&gt;GetProcessDefinedStep())<sp/>{</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>processName<sp/>=<sp/>thePostPoint-&gt;GetProcessDefinedStep()-&gt;GetProcessName();}</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Exclude<sp/>all<sp/>particles<sp/>but<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theStep.GetTrack()-&gt;GetDynamicParticle()-&gt;GetParticleDefinition()-&gt;GetParticleName()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;neutron&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/>G4Material*<sp/>mat<sp/>=<sp/>thePostPoint-&gt;GetPhysicalVolume()-&gt;GetLogicalVolume()-&gt;GetMaterial();</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/>G4Material*<sp/>matp<sp/>=<sp/>thePrePoint-&gt;GetPhysicalVolume()-&gt;GetLogicalVolume()-&gt;GetMaterial();</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/>G4double<sp/>ken<sp/>=theStep.GetPreStepPoint()-&gt;GetKineticEnergy();</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/>G4int<sp/>nElements<sp/>=<sp/>mat-&gt;GetNumberOfElements();</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4double*<sp/>nAtomsPerVolume<sp/>=<sp/>mat-&gt;GetVecNbOfAtomsPerVolume();</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>G4double<sp/>TotNbAtomsPerVolume<sp/>=<sp/>mat-&gt;GetTotNbOfAtomsPerVolume();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"></highlight></codeline>
<codeline lineno="3088"><highlight class="normal">G4int<sp/>ich<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal">GetElementInelastChannelCrossSection(&amp;theStep,<sp/>(*mat-&gt;GetElementVector())[0],<sp/>ich);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/>G4double<sp/>nufissCrossSection<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/>G4double<sp/>captureCrossSection<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/>G4double<sp/>totalCrossSection<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4DynamicParticle<sp/>*dynp<sp/>=<sp/>theStep.GetTrack()-&gt;GetDynamicParticle();</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>G4DynamicParticle<sp/>*pdynp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>G4DynamicParticle(dynp-&gt;GetParticleDefinition(),</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynp-&gt;GetMomentumDirection(),</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ken);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(G4int<sp/>i=0;<sp/>i&lt;nElements;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>fis<sp/>=<sp/>fProcessFis-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(pdynp,<sp/>(*mat-&gt;GetElementVector())[i],<sp/>mat);</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/>G4double<sp/>cap<sp/>=<sp/>fProcessCap-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(pdynp,<sp/>(*mat-&gt;GetElementVector())[i],<sp/>mat);</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/>totalCrossSection<sp/>+=<sp/>nAtomsPerVolume[i]*(</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fProcessElas-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(pdynp,<sp/>(*mat-&gt;GetElementVector())[i],<sp/>mat)+</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fProcessInel-&gt;GetCrossSectionDataStore()-&gt;GetCrossSection(pdynp,<sp/>(*mat-&gt;GetElementVector())[i],<sp/>mat)+</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cap+fis);</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/>nufissCrossSection<sp/>+=<sp/><sp/>nAtomsPerVolume[i]*fEventAction-&gt;GetNu(ken)*fis;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/>captureCrossSection<sp/>+=<sp/><sp/>nAtomsPerVolume[i]*cap;</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Track<sp/>length<sp/>keff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/>fEventAction-&gt;Add_keff_trackLength(theStep.GetStepLength()*nufissCrossSection);</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Exclude<sp/>non-collision<sp/>processes<sp/>and<sp/>all<sp/>particles<sp/>but<sp/>neutrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(processName<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;ParallelScoringWorld&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>processName<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;CoupledTransportation&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mat<sp/>!=<sp/>matp<sp/>&amp;&amp;<sp/>processName)</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;matpre<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>matp-&gt;GetName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>matpost<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mat-&gt;GetName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>proc<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>processName<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(processName<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;hadElastic&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processName<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;neutronInelastic&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processName<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processName<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;nFission&quot;</highlight><highlight class="normal">)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>proc<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>processName<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Collision<sp/>keff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/>fEventAction-&gt;Add_keff_collision(nufissCrossSection<sp/>/<sp/>totalCrossSection);</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Analog<sp/>abs<sp/>keff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(processName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nCapture&quot;</highlight><highlight class="normal">)<sp/>fEventAction-&gt;Add_keff_analogAbs(nufissCrossSection<sp/>/<sp/>captureCrossSection);</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Track<sp/>length<sp/>keff</highlight></codeline>
<codeline lineno="3131"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>mat-&gt;GetName()<sp/>&lt;&lt;<sp/>&quot;<sp/>MaterialDensity<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>MaterialDensity<sp/>&lt;&lt;<sp/>&quot;<sp/>fLengthBetweenCollision<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>fLengthBetweenCollision<sp/>&lt;&lt;<sp/>&quot;<sp/>nu<sp/>&quot;<sp/>&lt;&lt;<sp/>nu<sp/>&lt;&lt;<sp/>&quot;<sp/>sigmaF<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>MaterialSigmaF<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fEventAction-&gt;Add_keff_trackLength(MaterialDensity<sp/>*<sp/>fLengthBetweenCollision<sp/>*<sp/>nu<sp/>*<sp/>MaterialSigmaF);</highlight></codeline>
<codeline lineno="3133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fLengthBetweenCollision<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3134"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3135"><highlight class="comment"></highlight></codeline>
<codeline lineno="3136"><highlight class="comment"><sp/><sp/><sp/><sp/>if(<sp/>processName<sp/>==<sp/>&quot;nFission&quot;)<sp/>{</highlight></codeline>
<codeline lineno="3137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Material*<sp/>mat<sp/>=<sp/>thePostPoint-&gt;GetPhysicalVolume()-&gt;GetLogicalVolume()-&gt;GetMaterial();</highlight></codeline>
<codeline lineno="3138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4VProcess*<sp/>process<sp/>=<sp/>const_cast&lt;G4VProcess*&gt;(thePostPoint-&gt;GetProcessDefinedStep());</highlight></codeline>
<codeline lineno="3139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4HadronicProcess*<sp/>hproc<sp/>=<sp/>dynamic_cast&lt;G4HadronicProcess*&gt;(process);</highlight></codeline>
<codeline lineno="3140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4Isotope*<sp/>target<sp/>=<sp/>hproc-&gt;GetTargetIsotope();</highlight></codeline>
<codeline lineno="3141"><highlight class="comment"></highlight></codeline>
<codeline lineno="3142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>G4ElementTable<sp/>*ElmTable<sp/>=<sp/>G4Element::GetElementTable();</highlight></codeline>
<codeline lineno="3143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4Element*<sp/>elm<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline lineno="3144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(size_t<sp/>i=0;<sp/>i&lt;ElmTable-&gt;size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if((*ElmTable)[i])<sp/>{</highlight></codeline>
<codeline lineno="3146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if((*ElmTable)[i]-&gt;GetZ()<sp/>==<sp/>target-&gt;GetZ()<sp/>&amp;&amp;<sp/>(*ElmTable)[i]-&gt;GetN()<sp/>==<sp/>target-&gt;GetN())</highlight></codeline>
<codeline lineno="3147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elm<sp/>=<sp/>(*ElmTable)[i];</highlight></codeline>
<codeline lineno="3148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3150"><highlight class="comment"></highlight></codeline>
<codeline lineno="3151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(elm)<sp/>{<sp/>//<sp/>if<sp/>isotope<sp/>has<sp/>been<sp/>found<sp/>in<sp/>the<sp/>table<sp/>of<sp/>elements</highlight></codeline>
<codeline lineno="3152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>ElementSigmaF<sp/>=<sp/>GetElementFissionCrossSection(&amp;theStep,<sp/>elm,<sp/>mat);</highlight></codeline>
<codeline lineno="3153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>ElementSigmaAbs<sp/>=<sp/>GetElementInelastCrossSection(&amp;theStep,<sp/>elm,<sp/>mat)</highlight></codeline>
<codeline lineno="3154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>GetElementCaptureCrossSection(&amp;theStep,<sp/>elm,<sp/>mat);</highlight></codeline>
<codeline lineno="3155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4double<sp/>ElementSigmaTot<sp/>=<sp/>GetElementElasticCrossSection(&amp;theStep,<sp/>elm,<sp/>mat)</highlight></codeline>
<codeline lineno="3156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>ElementSigmaAbs</highlight></codeline>
<codeline lineno="3157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>ElementSigmaF;</highlight></codeline>
<codeline lineno="3158"><highlight class="comment"></highlight></codeline>
<codeline lineno="3159"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(ElementSigmaF<sp/>&lt;0)<sp/>{</highlight></codeline>
<codeline lineno="3160"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>mat-&gt;GetName()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>elm-&gt;GetName()<sp/>&lt;&lt;<sp/>&quot;<sp/>sigmaf<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>ElementSigmaF<sp/>&lt;&lt;<sp/>&quot;<sp/>sigmaTot<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>ElementSigmaTot<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3161"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>ElementSigmaAbs<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>ElementSigmaAbs<sp/>&lt;&lt;<sp/>&quot;<sp/>;<sp/>nu<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>nu<sp/>&lt;&lt;<sp/>&quot;\n&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3162"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>nu*ElementSigmaF<sp/>/<sp/>(ElementSigmaAbs<sp/>+<sp/>ElementSigmaF)<sp/>&lt;&lt;<sp/>&quot;\n&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3163"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3164"><highlight class="comment"></highlight></codeline>
<codeline lineno="3165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Analog<sp/>absorption<sp/>keff</highlight></codeline>
<codeline lineno="3166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>When<sp/>a<sp/>particle<sp/>collides,<sp/>there<sp/>is<sp/>a<sp/>probability<sp/>that<sp/>it<sp/>is<sp/>absorbed<sp/>by<sp/>the<sp/>nucleus.</highlight></codeline>
<codeline lineno="3167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>In<sp/>analog<sp/>absorption,<sp/>the<sp/>particle<sp/>is<sp/>killed<sp/>with<sp/>that<sp/>probability</highlight></codeline>
<codeline lineno="3168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>ElementSigmaAbs<sp/>+<sp/>ElementSigmaF<sp/>)<sp/>{<sp/>fEventAction-&gt;Add_keff_analogAbs(nu*ElementSigmaF<sp/>/<sp/>(ElementSigmaAbs<sp/>+<sp/>ElementSigmaF));}</highlight></codeline>
<codeline lineno="3169"><highlight class="comment"></highlight></codeline>
<codeline lineno="3170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Implicit<sp/>absorption<sp/>keff<sp/>(not<sp/>the<sp/>case<sp/>in<sp/>GEANT4,<sp/>23/11/2020)</highlight></codeline>
<codeline lineno="3171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>particle<sp/>is<sp/>never<sp/>killed<sp/>by<sp/>absorption;</highlight></codeline>
<codeline lineno="3172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>instead,<sp/>its<sp/>weight<sp/>is<sp/>reduced<sp/>by<sp/>the<sp/>absorption<sp/>probability<sp/>at<sp/>eachcollision.</highlight></codeline>
<codeline lineno="3173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>ElementSigmaTot<sp/>)<sp/>{fEventAction-&gt;Add_keff_implicitAbs(nu*ElementSigmaF<sp/>/<sp/>ElementSigmaTot);}</highlight></codeline>
<codeline lineno="3174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3175"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3176"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;End<sp/>of<sp/>MCNP_Keff_estimators&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3177"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3181"><highlight class="comment">#include<sp/>&lt;sys/types.h&gt;</highlight></codeline>
<codeline lineno="3182"><highlight class="comment">#include<sp/>&lt;sys/stat.h&gt;</highlight></codeline>
<codeline lineno="3183"><highlight class="comment">#include<sp/>&lt;fcntl.h&gt;</highlight></codeline>
<codeline lineno="3184"><highlight class="comment">void<sp/>posplot(const<sp/>G4Step<sp/>theStep)</highlight></codeline>
<codeline lineno="3185"><highlight class="comment">{</highlight></codeline>
<codeline lineno="3186"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>FILE*<sp/>file<sp/>=<sp/>fopen(&quot;fiss.csv&quot;,&quot;w&quot;);</highlight></codeline>
<codeline lineno="3187"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3188"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>G4Mutex<sp/>mutex<sp/>=<sp/>G4MUTEX_INITIALIZER;</highlight></codeline>
<codeline lineno="3189"><highlight class="comment"></highlight></codeline>
<codeline lineno="3190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>post<sp/>step<sp/>point</highlight></codeline>
<codeline lineno="3191"><highlight class="comment"><sp/><sp/><sp/><sp/>G4StepPoint*<sp/><sp/>thePostPoint<sp/>=<sp/>theStep.GetPostStepPoint();</highlight></codeline>
<codeline lineno="3192"><highlight class="comment"></highlight></codeline>
<codeline lineno="3193"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>process<sp/>name</highlight></codeline>
<codeline lineno="3194"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>G4String<sp/>processName<sp/>=<sp/>thePostPoint-&gt;GetProcessDefinedStep()-&gt;GetProcessName();</highlight></codeline>
<codeline lineno="3195"><highlight class="comment"></highlight></codeline>
<codeline lineno="3196"><highlight class="comment"><sp/><sp/><sp/><sp/>if(processName<sp/>==<sp/>&quot;nFission&quot;)<sp/>{</highlight></codeline>
<codeline lineno="3197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G4AutoLock<sp/>l(&amp;mutex);</highlight></codeline>
<codeline lineno="3198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(file,&quot;%d,%12.7g,%12.7g,%12.7g,%12.7g\n&quot;,count++,thePostPoint-&gt;GetGlobalTime(),</highlight></codeline>
<codeline lineno="3199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(thePostPoint-&gt;GetPosition()).x(),</highlight></codeline>
<codeline lineno="3200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(thePostPoint-&gt;GetPosition()).y(),</highlight></codeline>
<codeline lineno="3201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(thePostPoint-&gt;GetPosition()).z()</highlight></codeline>
<codeline lineno="3202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.unlock();</highlight></codeline>
<codeline lineno="3204"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3205"><highlight class="comment"></highlight></codeline>
<codeline lineno="3206"><highlight class="comment">}</highlight></codeline>
<codeline lineno="3207"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/Transmutex/Simulation/ADS_SimulationCode/Benchmark-2/src/SteppingAction.cc"/>
  </compounddef>
</doxygen>
